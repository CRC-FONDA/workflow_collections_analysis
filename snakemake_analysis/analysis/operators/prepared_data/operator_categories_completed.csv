operator, total count, category (0=domain specific, 1=control flow, 2=file content handling, 3=file handling, 4=code execution (e.g. conda, python, rscript ..), 5=data handling (e.g. wget), 6=misc, 7=noise, 8=under 10 count)
echo, 857, 6
samtools, 773, 0
mkdir, 588, 3
set, 509, 4
python, 495, 4
rm, 457, 3
&1, 391, 7
cut, 386, 2
mv, 378, 3
sed, 351, 2
cat, 344, 2
2, 302, 7
awk, 297, 2
if, 288, 1
Rscript, 285, 4
grep, 259, 2
cd, 258, 3
bcftools, 252, 0
qiime, 250, 0
bedtools, 225, 0
fi, 224, 1
touch, 203, 3
wget, 193, 5
conda, 185, 4
cp, 183, 3
gzip, 177, 5
for, 165, 1
python3, 138, 4
done, 138, 1
export, 135, 4
sort, 132, 2
gatk, 131, 0
perl, 120, 4
bgzip, 118, 5
else, 111, 1
fastqc, 110, 0
bwa, 104, 0
zcat, 103, 5
&2, 101, 7
tr, 100, 2
gunzip, 99, 5
ln, 95, 3
tabix, 94, 0
r, 90, 6
&, 85, 7
module, 85, 4
paste, 83, 2
1, 82, 7
multiqc, 72, 0
exec, 67, 2
R, 67, 6
source, 67, 4
[, 65, 7
pigz, 63, 5
head, 61, 2
wc, 52, 2
STAR, 52, 6
vcftools, 52, 0
uniq, 51, 2
picard, 48, 0
(, 47, 7
do, 47, 1
bash, 47, 6
while, 47, 1
tail, 46, 2
curl, 46, 5
tar, 46, 5
pygna, 45, 6
trim_galore, 41, 0
seqtk, 39, 0
java, 39, 4
&&, 39, 7
bowtie2, 38, 0
tee, 37, 2
minimap2, 35, 0
/, 34, 7
), 33, 7
exit, 33, 6
augur, 32, 0
rbt, 31, 6
/dev/null, 30, 6
+, 30, 7
bedextract, 30, 0
then, 29, 1
salmon, 28, 0
featureCounts, 27, 0
cutadapt, 27, 0
., 26, 7
bowtie2-build, 25, 0
macs2, 25, 0
bamCoverage, 25, 0
elif, 25, 1
hisat2, 24, 0
ls, 24, 6
snakemake, 23, 4
dot, 23, 6
find, 23, 2
bismark_methylation_extractor, 22, 0
checkm, 22, 0
gsutil, 22, 6
md5sum, 22, 6
mmseqs, 22, 0
stringtie, 21, 0
kallisto, 21, 0
plink, 21, 6
git, 20, 6
singularity, 19, 6
mothur, 19, 0
config[VENV_DIR], 19, 6
trimmomatic, 18, 0
cpan, 18, 6
);, 17, 7
$(basename, 16, 7
rsync, 15, 3
infer_experiment.py, 15, 6
bam_stat.py, 15, 0
read_GC.py, 15, 6
plotHeatmap, 15, 6
fastp, 15, 0
biom, 15, 0
abricate, 15, 0
sourmash, 15, 0
done;, 15, 1
gffread, 14, 0
=, 14, 7
sh, 14, 6
diamond, 14, 6
read_distribution.py, 14, 6
true, 14, 6
xargs, 14, 6
pushd, 14, 3
read_duplication.py, 13, 6
computeMatrix, 13, 6
seqkit, 13, 0
g, 13, 7
rio, 13, 6
bismark, 12, 0
metawrap, 12, 0
spades.py, 12, 6
unzip, 12, 5
multiBamSummary, 12, 0
junction_saturation.py, 12, 6
inner_distance.py, 12, 6
printf, 12, 6
NanoPlot, 12, 0
rev, 12, 2
smc++, 12, 6
hamronize, 12, 6
^.*/, 12, 7
L=$(less, 12, 7
], 12, 7
junction_annotation.py, 11, 6
$CAT, 11, 6
pore_c, 11, 0
bwa-mem2, 10, 0
bedGraphToBigWig, 10, 6
gtdbtk, 10, 0
megahit, 10, 0
gffcompare, 10, 0
chmod, 10, 6
zgrep, 10, 5
fi;, 10, 1
/bin/rm, 10, 3
&1;, 10, 7
0, 10, 7
kraken2, 10, 0
sleep, 10, 1
name=$(echo, 10, 7
N=$(less, 10, 7
test, 10, 6
INPUT={input}, 10, 6
cooler, 9, 8
isoseq3, 9, 8
date, 9, 8
imctools, 9, 8
/ilastik-release/bin/python, 9, 8
metabat2, 9, 8
add_descriptions.py, 9, 8
xvfb-run, 9, 8
}}, 9, 8
$len;, 9, 8
reformat.sh, 8, 8
eval, 8, 8
wd=$(pwd), 8, 8
jgi_summarize_bam_contig_depths, 8, 8
docker, 8, 8
ulimit, 8, 8
parallel_cmd=, 8, 8
parallel_cmd=parallel, 8, 8
qualimap, 8, 8
mafft, 8, 8
local, 8, 8
fsampleID=$(echo, 8, 8
var=$(echo, 8, 8
g);, 8, 8
sambamba, 8, 8
OUTPUT={output}, 8, 8
scripts/join_tables.py, 8, 8
UNFINISHED_GENOME, 8, 8
RepeatMasker, 7, 8
rmdir, 7, 8
emapper.py, 7, 8
blastn, 7, 8
plotCorrelation, 7, 8
hisat2-build, 7, 8
header.html;, 7, 8
prodigal, 7, 8
[[, 7, 8
zip, 7, 8
parallel, 7, 8
split, 7, 8
porechop, 7, 8
2.0, 7, 8
bismark_genome_preparation, 7, 8
fpython3, 7, 8
groot, 7, 8
metaphlan, 7, 8
rgi, 7, 8
umi_tools, 7, 8
expIslDir={params.isl_dir}/{wildcards.accession}/{params.organism}, 7, 8
merfishtools, 7, 8
OUTPUT={output.bam}, 7, 8
NanoStat, 7, 8
results_report={params.resultsreport}, 7, 8
.format(**config), 7, 8
scripts/tomat.py, 7, 8
int, 7, 8
float, 7, 8
FILES=$(echo, 7, 8
sortBed, 6, 8
dRep, 6, 8
hmmpress, 6, 8
fasterq-dump, 6, 8
HiC-Pro, 6, 8
iqtree, 6, 8
Attribute, 6, 8
O={output.bam}, 6, 8
sniffles, 6, 8
SURVIVOR, 6, 8
mosdepth, 6, 8
parallel_cmd=$([[, 6, 8
f, 6, 8
canu, 6, 8
function, 6, 8
freebayes, 6, 8
I={input.bam}, 6, 8
30.0, 6, 8
=NF;i++)if($i, 6, 8
m)m=$i;print, 6, 8
CAT=cat;, 6, 8
log, 6, 8
python2, 6, 8
contacts, 6, 8
check_tsv_data_file_not_empty_of_data, 6, 8
sudo, 6, 8
fio, 6, 8
sickle, 6, 8
jupyter, 6, 8
f{{wildcards.model}}, 6, 8
smorfer.sh, 6, 8
prokka, 5, 8
blobtools, 5, 8
hmmscan, 5, 8
Trinity, 5, 8
egrep, 5, 8
CAT, 5, 8
shuf, 5, 8
//g, 5, 8
concoct, 5, 8
fasttree, 5, 8
vsearch, 5, 8
phyloFlash.pl, 5, 8
flye, 5, 8
LC_ALL=C, 5, 8
WC1=$(zcat, 5, 8
WC2=$(zcat, 5, 8
vep, 5, 8
samblaster, 5, 8
prefix={params.output_dir}, 5, 8
0), 5, 8
/data/bin/cellranger-atac, 5, 8
refgenie, 5, 8
ivar, 5, 8
data/tmp, 5, 8
make, 5, 8
sampleID=$(echo, 5, 8
samp=$(echo, 5, 8
models, 5, 8
2]//, 5, 8
sbatch, 5, 8
antsApplyTransforms, 5, 8
geneNameFile=$(, 5, 8
amm, 5, 8
$decoratedFile.swp, 5, 8
decoratedFileLength=$(wc, 5, 8
decorate_if_exists, 5, 8
CREATE_INDEX=true, 5, 8
Trinotate, 5, 8
julia, 5, 8
Fasta_to_Scaffolds2Bin.sh, 5, 8
ktImportText, 5, 8
annotation={params[0]}, 5, 8
annotation={params[2]}, 5, 8
coverage2cytosine, 5, 8
Min, 5, 8
f{{wildcards.dataset}}, 5, 8
pbmm2, 4, 8
repair.sh, 4, 8
prefetch, 4, 8
dmesg, 4, 8
sample=$(echo, 4, 8
contigtax, 4, 8
taxmapper, 4, 8
check_directory, 4, 8
\t, 4, 8
mem_per_job=$(expr, 4, 8
!DOCTYPE, 4, 8
Filter, 4, 8
I={input}, 4, 8
fastq-dump, 4, 8
20, 4, 8
temp.html;, 4, 8
delly, 4, 8
gtf2bed, 4, 8
$0, 4, 8
lra, 4, 8
megalodon, 4, 8
/p;2~4p, 4, 8
0){{print, 4, 8
bbduk.sh, 4, 8
mawk, 4, 8
scripts/summarize-table.py, 4, 8
DIRNAME=$(mktemp, 4, 8
\tsmc++, 4, 8
./{input.bin}, 4, 8
numactl, 4, 8
vt, 4, 8
input_accessions={input.accessions}, 4, 8
multiBigwigSummary, 4, 8
NanoFilt, 4, 8
sys.path[0], 4, 8
40.0, 4, 8
&2), 4, 8
GTDBTK_DATA_PATH={GTDBTK_DATA_PATH}, 4, 8
callpeak, 4, 8
../../{output.vcf}, 4, 8
init_template, 4, 8
reg_to_template, 4, 8
update_template, 4, 8
src/aggregate_previous_sctensor.sh, 4, 8
src/aggregate_sctensor.sh, 4, 8
src/plot_auc.sh, 4, 8
src/plot_aucpr.sh, 4, 8
src/plot_f.sh, 4, 8
src/plot_mcc.sh, 4, 8
src/plot_fpr.sh, 4, 8
src/plot_fnr.sh, 4, 8
src/plot_pr.sh, 4, 8
src/plot_time.sh, 4, 8
src/plot_memory.sh, 4, 8
src/plot_LR.sh, 4, 8
quast, 4, 8
ktImportTaxonomy, 4, 8
merge_metaphlan_tables.py, 4, 8
bc, 4, 8
alignments, 4, 8
IFS=$\, 4, 8
NR==1, 4, 8
OUTFMT=$OUTFMT, 4, 8
0.05, 4, 8
fastq_to_fasta, 4, 8
set.dir(output={params.outdir});, 4, 8
SORT_ORDER=queryname, 4, 8
\tmkdir, 4, 8
yes, 4, 8
$(readlink, 4, 8
bowtie, 4, 8
nanopolish, 4, 8
GENOME.fasta, 4, 8
HRIBO/scripts/generate_excel_overview.py, 4, 8
Genrich, 4, 8
fastq-sort, 4, 8
twoBitToFa, 4, 8
variantcalling={params[0]}, 4, 8
debug={params[2]}, 4, 8
annotation={params[1]}, 4, 8
SV={params[0]}, 4, 8
MEI={params[1]}, 4, 8
script, 4, 8
kreport2mpa.py, 4, 8
taxon_nametreads, 4, 8
scripts/area_plot.py, 4, 8
scripts/KrakenTools/kreport2krona.py, 4, 8
est_abundance.py, 4, 8
add_to_queries, 4, 8
$import_versions, 4, 8
genome=$(echo, 4, 8
ngd, 4, 8
rnew=$(echo, 4, 8
VALIDATION_STRINGENCY=SILENT, 4, 8
R={input.ref}, 4, 8
VALIDATION_STRINGENCY=LENIENT, 4, 8
6_viewBS/inputfiles.txt, 4, 8
fpython, 4, 8
coverm, 3, 8
gtfToGenePred, 3, 8
genePredToBed, 3, 8
scp, 3, 8
crimson, 3, 8
true), 3, 8
$TMPDIR/fasta/db.fasta, 3, 8
bbmap.sh, 3, 8
plotCoverage, 3, 8
findMotifsGenome.pl, 3, 8
download-db.sh, 3, 8
amrfinder, 3, 8
?xml, 3, 8
Query, 3, 8
Dataset, 3, 8
/Dataset, 3, 8
/Query, 3, 8
palin_mode=$(grep, 3, 8
cellranger, 3, 8
100, 3, 8
hisat2_extract_exons.py, 3, 8
hisat2_extract_splice_sites.py, 3, 8
CTG_PREFIX=$(basename, 3, 8
vamb, 3, 8
mysql, 3, 8
blastp, 3, 8
cuteSV, 3, 8
You, 3, 8
MODE={params.mode}, 3, 8
TAXON_LEVELS=(2, 3, 8
picrust2_pipeline.py, 3, 8
$1\, 3, 8
Unassigned, 3, 8
//, 3, 8
htseq-count, 3, 8
temp.txt, 3, 8
1{{print}}, 3, 8
10, 3, 8
plot-vcfstats, 3, 8
nofiles=$(ls, 3, 8
base64, 3, 8
slang=$(egrep, 3, 8
mix_files=, 3, 8
nolines=$(cat, 3, 8
mix_files=-m, 3, 8
papermill, 3, 8
a=$(basename, 3, 8
REMOVE_DUPLICATES=true, 3, 8
print, 3, 8
mash, 3, 8
~/bin/SEACR/SEACR_1.3.sh, 3, 8
3.0, 3, 8
60.0, 3, 8
200.0, 3, 8
MarkDuplicates, 3, 8
HaplotypeCaller, 3, 8
bamtools, 3, 8
%$//g, 3, 8
$4, 3, 8
maxVal)), 3, 8
bc), 3, 8
O={output}, 3, 8
M={log}, 3, 8
snpEff, 3, 8
plotPCA, 3, 8
stdbuf, 3, 8
makeblastdb, 3, 8
src/plot_auc_eachcci.sh, 3, 8
src/plot_auc_merge.sh, 3, 8
src/plot_aucpr_eachcci.sh, 3, 8
src/plot_aucpr_merge.sh, 3, 8
src/plot_f_eachcci.sh, 3, 8
src/plot_f_merge.sh, 3, 8
src/plot_mcc_eachcci.sh, 3, 8
src/plot_mcc_merge.sh, 3, 8
src/plot_fpr_eachcci.sh, 3, 8
src/plot_fpr_merge.sh, 3, 8
src/plot_fnr_eachcci.sh, 3, 8
src/plot_fnr_merge.sh, 3, 8
src/plot_pr_eachcci.sh, 3, 8
src/plot_pr_merge.sh, 3, 8
src/plot_time_merge.sh, 3, 8
src/plot_memory_merge.sh, 3, 8
true;, 3, 8
wb_command, 3, 8
run_MaxBin.pl, 3, 8
rev), 3, 8
src/scripts/Fasta_to_Scaffolds2Bin.sh, 3, 8
DAS_Tool, 3, 8
idvar=$(echo, 3, 8
grid, 3, 8
clean(r, 3, 8
clean(, 3, 8
freyja, 3, 8
OUTFMT=6, 3, 8
ionice, 3, 8
AverageImages, 3, 8
.05, 3, 8
CENT=0, 3, 8
CENT=$(grep, 3, 8
../bcmap, 3, 8
busco, 3, 8
analyticsFile={wildcards.accession}-analytics.tsv, 3, 8
expType={params.exp_type}, 3, 8
PATH=$PATH:{workflow.basedir}/atlas-analysis/differential, 3, 8
mktemp_dir, 3, 8
idf_filename=$(perl, 3, 8
hmmsearch, 3, 8
SVL12K_DF, 3, 8
`, 3, 8
pilon, 3, 8
0.5, 3, 8
ngmlr, 3, 8
basta, 3, 8
SnpSift, 3, 8
$F[$r];}}, 3, 8
eff_size=$(awk, 3, 8
nbatch=$(ls, 3, 8
iter={config[interval.iter]}, 3, 8
samp={config[interval.samp]}, 3, 8
bpen={config[bpen]}, 3, 8
bpen{bpen}.res_noheader.txt, 3, 8
popd, 3, 8
../../../{log.std}, 3, 8
lofreq, 3, 8
debug={params[1]}, 3, 8
format={params[0]}, 3, 8
paired={params[2]}, 3, 8
STR={params[0]}, 3, 8
genotype={params[1]}, 3, 8
sha256sum, 3, 8
tools/rename_multifasta_prefix.py, 3, 8
threads={threads}, 3, 8
flair.py, 3, 8
segments=--segments, 3, 8
sequenza-utils, 3, 8
deduplicate_bismark, 3, 8
string, 3, 8
humann2_join_tables, 3, 8
ribotricer, 3, 8
O={output.stats}, 3, 8
DEDUPLICATE_BISMARK, 3, 8
/biodata/irg/grp_stich/Hv-DRR-pop/bin/bismark_v0.20.0/Bismark/bismark2summary, 3, 8
STAR_lane1_map1_logfile.log, 2, 8
ccs, 2, 8
OUTPUT=$(dirname, 2, 8
bismark2report, 2, 8
bismark2summary, 2, 8
filter_non_conversion, 2, 8
temp.gtf;, 2, 8
scripts/rename_multifasta_prefix.py, 2, 8
real=$(realpath, 2, 8
${{TMPDIR}}/merged.bed, 2, 8
gmst.pl, 2, 8
base=$(basename, 2, 8
$TMPDIR/fasta/taxonmap, 2, 8
transabyss, 2, 8
transabyss-merge, 2, 8
max_mem=$(({params.cpumem}, 2, 8
riana, 2, 8
run_dbcan.py, 2, 8
/opt/deepvariant/bin/run_deepvariant, 2, 8
dv_make_examples.py, 2, 8
dv_call_variants.py, 2, 8
dv_postprocess_variants.py, 2, 8
scripts/prepend_labels.sh, 2, 8
logs/validate_bed_file/bedtools_merge.log;, 2, 8
!, 2, 8
configureStrelkaGermlineWorkflow.py, 2, 8
/usr/local/bin/HiC-Pro_3.1.0/bin/utils/sparseToDense.py, 2, 8
geneBody_coverage.py, 2, 8
Saccharomyces_cerevisiae.R64-1-1.ncrna.fa, 2, 8
]/, 2, 8
nextalign, 2, 8
run_gubbins.py, 2, 8
bamPEFragmentSize, 2, 8
bamCompare, 2, 8
PairSeq.py, 2, 8
ParseHeaders.py, 2, 8
filename={wildcards.ss_file};, 2, 8
from_build=$(echo, 2, 8
select=$[$(wc, 2, 8
beaglew, 2, 8
={wildcards.maf}, 2, 8
={params.maf_upper}, 2, 8
temp;, 2, 8
demuxlet, 2, 8
continue, 2, 8
lastdb, 2, 8
lastal, 2, 8
medaka_consensus, 2, 8
./bwa-0.7.17/bwa, 2, 8
catfishq, 2, 8
vcfsort, 2, 8
bgziptabix, 2, 8
log/{wildcards.sample}_qc.err, 2, 8
log/{wildcards.sample}_minimap_hpv.err, 2, 8
log/{wildcards.sample}_minimap_sort_hpv.err, 2, 8
log/{wildcards.sample}_minimap_index_hpv.err, 2, 8
run_pepper_margin_deepvariant, 2, 8
log/{wildcards.sample}_minimap.err, 2, 8
log/{wildcards.sample}_minimap_sort.err, 2, 8
log/{wildcards.sample}_minimap_index.err, 2, 8
log/{wildcards.sample}_qc_hpv.err, 2, 8
./make-lineage-csv.py, 2, 8
$2\, 2, 8
=d),(?=d)//g, 2
get_species_taxids.sh, 2, 8
=NF;X++){{OUT=OUT, 2, 8
Unassigned_[0-9]*, 2, 8
Unass)^, 2, 8
){{seq=seq+1;print, 2, 8
1{{print, 2, 8
swarm, 2, 8
Scripts/stampa_merge.py, 2, 8
fold, 2, 8
15), 2, 8
bzcat, 2, 8
vcffilter, 2, 8
tombo, 2, 8
rmats.py, 2, 8
tail_start=1, 2, 8
tail_start=2, 2, 8
docjoin, 2, 8
header=$(head, 2, 8
cargo, 2, 8
BERGSTROEM2020/{wildcards.population}/{wildcards.individual}_mt.sam, 2, 8
cellranger-dna, 2, 8
whatshap, 2, 8
which, 2, 8
maxThreads={threads}, 2, 8
useGrid=false, 2, 8
return, 2, 8
if($3, 2, 8
outdir=$(dirname, 2, 8
$1, 2, 8
psql, 2, 8
plotFingerprint, 2, 8
nanoQC, 2, 8
PYTHONPATH={INDIC_NLP}, 2, 8
50, 2, 8
filename=`basename, 2, 8
snippy, 2, 8
INPUT={input.ubam}, 2, 8
FASTQ=/dev/stdout, 2, 8
INTERLEAVE=true, 2, 8
NON_PF=true, 2, 8
MergeBamAlignment, 2, 8
SortSam, 2, 8
SetNmMdAndUqTags, 2, 8
GenomicsDBImport, 2, 8
GatherVcfsCloud, 2, 8
IndexFeatureFile, 2, 8
bamcov, 2, 8
cairosvg, 2, 8
binary=giashard, 2, 8
binary=~/go/bin/giashard, 2, 8
mix_files=$(mktemp, 2, 8
$mix_files, 2, 8
nolines_txt=$($CAT, 2, 8
total_nolines=$(echo, 2, 8
Check, 2, 8
fastq_screen, 2, 8
bedops, 2, 8
^:,, 2
preseq, 2, 8
tracy, 2, 8
nanoq, 2, 8
vulcan, 2, 8
faSize, 2, 8
TEMPDIR=$(mktemp, 2, 8
aMGSIM, 2, 8
fcoolpup.py, 2, 8
blastx, 2, 8
=1, 2, 8
impute2, 2, 8
src/groundtruth.sh, 2, 8
src/plot_groundtruth.sh, 2, 8
src/previous_sctensor.sh, 2, 8
src/sctensor.sh, 2, 8
src/roc_auc_bin_f.sh, 2, 8
src/plot_roc_auc_f.sh, 2, 8
src/plot_prc_aucpr_mcc.sh, 2, 8
src/plot_tr.sh, 2, 8
${{OUTDIR}}/${{SAMPLE}}/${{SAMPLE}}_${{DIRECTION}}.fastq, 2, 8
:::, 2, 8
hisat2_index, 2, 8
cd-hit-est, 2, 8
blat, 2, 8
gemma, 2, 8
in1={input.fq1}, 2, 8
out1={output.fq1P}, 2, 8
ref=data/00adapters/truseq.fa.gz, 2, 8
longstitch, 2, 8
bbcountunique.sh, 2, 8
cut_up_fasta.py, 2, 8
concoct_coverage_table.py, 2, 8
merge_cutup_clustering.py, 2, 8
extract_fasta_bins.py, 2, 8
mapDamage, 2, 8
bracken, 2, 8
$vcf_text, 2, 8
metaphlan_hclust_heatmap.py, 2, 8
scripts/gtfParser, 2, 8
kmerresistance, 2, 8
srst2, 2, 8
ariba, 2, 8
t_coffee, 2, 8
hmmbuild, 2, 8
;, 2, 8
$var.bin., 2, 8
concoct_bins.stats;, 2, 8
metabat_bins.stats;, 2, 8
maxbin_bins.stats;, 2, 8
refined_bins.stats;, 2, 8
concoct.checkm, 2, 8
metabat.checkm, 2, 8
maxbin.checkm, 2, 8
refined.checkm, 2, 8
reassembled_bins.stats;, 2, 8
reassembled.checkm, 2, 8
g), 2, 8
abundance.stats, 2, 8
)_*.xml, 2, 8
samples.txt, 2, 8
update_database, 2, 8
metaWRAP, 2, 8
memote, 2, 8
paths, 2, 8
dependencies, 2, 8
extract_barcodes_path, 2, 8
settings, 2, 8
30nt),, 2
pangolin, 2, 8
cas_data, 2, 8
plink2, 2, 8
read_analysis.py, 2, 8
simulator.py, 2, 8
bin/singleCellPipe, 2, 8
/){{print}}else{{chomp;print, 2, 8
PREFIX=`echo, 2, 8
nnUNet_plan_and_preprocess, 2, 8
nnUNet_train, 2, 8
nnUNet_predict, 2, 8
fslmerge, 2, 8
ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads}, 2, 8
c3d, 2, 8
MERIDA_ILP, 2, 8
tmpdir=qc/fastqc/{wildcards.patient}-{wildcards.sample_type}.tmp, 2, 8
analyticsFile=$(grep, 2, 8
qcExitCode=$?, 2, 8
get_methods_from_irap, 2, 8
decoratedFile={output.decoexpression}, 2, 8
decoratedFile=`echo, 2, 8
ae_dir=$(perl, 2, 8
mirbase_dir=$(perl, 2, 8
expPath=$(pwd), 2, 8
organism={params.organism}, 2, 8
arrayDesignFile=$(get_arraydesign_file, 2, 8
geneNameFile=${{expPath}}/mature.accession.tsv.aux, 2, 8
$geneNameFile, 2, 8
geneNameFile=$(get_geneNameFile_given_organism, 2, 8
organism=$(get_organism_from_condensed_sdrf, 2, 8
gff_file=$(, 2, 8
./interproscan.sh, 2, 8
e, 2, 8
logs/rseqc/rseqc_junction_annotation, 2, 8
workflow/scripts/expression_analysis/extractFromBAM_RegionBed_WPS_Cov.py, 2, 8
set.seed(seed={wildcards.seed});, 2, 8
set.current(processors={resources.procs});, 2, 8
workflowname, 2, 8
blank).+, 2, 8
nextclade, 2, 8
ANNOTATIONS_FILE={input.annot}, 2, 8
TagBamWithReadSequenceExtended, 2, 8
SUMMARY={output.summary}, 2, 8
BASE_QUALITY={params.base_qual}, 2, 8
NUM_BASES_BELOW_QUALITY={params.bases_below_qual}, 2, 8
BASE_RANGE={params.base_range}, 2, 8
BARCODED_READ=1, 2, 8
OUTPUT_SUMMARY={output.summary}, 2, 8
MISMATCHES={params.mismatches}, 2, 8
NUM_BASES={params.num_bases}, 2, 8
data/{wildcards.sample}/logs, 2, 8
INPUT={input.bam}, 2, 8
EukRep, 2, 8
EMBL_dat_to_Trinotate_sqlite_resourceDB.pl, 2, 8
LOAD_swissprot_blastp, 2, 8
LOAD_pfam, 2, 8
LOAD_swissprot_blastx, 2, 8
TransDecoder.LongOrfs, 2, 8
TransDecoder.Predict, 2, 8
ILLUMINACLIP:{config[trimmomatic][ILLUMINACLIP]}, 2, 8
LEADING:{config[trimmomatic][LEADING]}, 2, 8
TRAILING:{config[trimmomatic][TRAILING]}, 2, 8
results/{config[PROJECT]}/runs/{config[RUN]}/, 2, 8
+config_path+, 2, 8
gb, 2, 8
+scripts_dir+/jaspar2motif.py, 2, 8
t/;, 2, 8
brew, 2, 8
tmpdir=qc/fastqc/.{wildcards.sample_id}.tmp, 2, 8
burn={config[ldhat.burn]}, 2, 8
coal_sizes=$(echo, 2, 8
xvf, 2, 8
`#-B, 2, 8
`#-j, 2, 8
`#-z, 2, 8
`#-E, 2, 8
`#-c, 2, 8
out/FinalOutput/out.clean, 2, 8
./src/454/bin/sffinfo, 2, 8
guppy_basecaller, 2, 8
humann_databases, 2, 8
shell:gatk, 2, 8
read_fast5_basecaller.py, 2, 8
glsearch36, 2, 8
!seen[$1,$2]++, 2
ALIGNER={params.aligner}, 2, 8
metaquast.py, 2, 8
scripts/rcbbc, 2, 8
workflow/scripts/fasta_to_nexus.py, 2, 8
exome={params[1]}, 2, 8
bed={params[3]}, 2, 8
filter_string={params[4]}, 2, 8
debug={params[5]}, 2, 8
variantcalling={params[1]}, 2, 8
expansion={params[0]}, 2, 8
ExpansionHunter, 2, 8
alsgenescanner={params[3]}, 2, 8
SV={params[2]}, 2, 8
alsgenescanner={params[0]}, 2, 8
alignment_report={params.alignmentreport}, 2, 8
sequencing_report={params.sequencingreport}, 2, 8
calls_report={params.callsreport}, 2, 8
expansion={params[1]}, 2, 8
sort-bed, 2, 8
./gffread/gffread, 2, 8
transcripts.fasta, 2, 8
transcripts.gff3, 2, 8
gappa, 2, 8
/usr/bin/time, 2, 8
metaspades.py, 2, 8
pid=$!, 2, 8
/dev/null;do, 2, 8
ps, 2, 8
vistasoft_path}));, 2, 8
jsonInfo=jsondecode(fileread({input.params_file}));, 2, 8
BIDS_dir},, 2
preprocessed_reoriented,, 2
../{log}, 2, 8
fasta_generate_regions.py), 2, 8
freebayes-parallel, 2, 8
fasta_generate_regions.py, 2, 8
virsorter, 2, 8
tools/filter_checkv.py, 2, 8
configureStrelkaSomaticWorkflow.py, 2, 8
INPUT={input.vcf}, 2, 8
OUTPUT={output.vcf}, 2, 8
NEW_SAMPLE_NAME={params.sample}\, 2, 8
merge_kallisto.R, 2, 8
zpca-tpm, 2, 8
alfa, 2, 8
bbsplit.sh, 2, 8
options, 2, 8
gtf=--gtf, 2, 8
output=--outfileName, 2, 8
zless, 2, 8
cnvkit.py, 2, 8
scripts/KrakenTools/combine_kreports.py, 2, 8
reads_1.fastq, 2, 8
in={input}, 2, 8
out={output}, 2, 8
in1={input.read1}, 2, 8
in2={input.read2}, 2, 8
strainphlan, 2, 8
scripts/preprocessing_summary.py, 2, 8
fslmaths, 2, 8
reg_resample, 2, 8
parts=(${{tmp//@/, 2, 8
sum(samples.origin, 2, 8
RUN_TRIMMING, 2, 8
TRIM_5_ONLY, 2, 8
align_trim, 2, 8
medaka, 2, 8
longshot, 2, 8
Choose, 2, 8
Kmer, 2, 8
abyss-pe, 2, 8
]/s/[^ATGCatgc]/N/g, 2, 8
humann2_databases, 2, 8
mpa2_table-v2.7.7.txt, 2, 8
humann2_renorm_table, 2, 8
gedi, 2, 8
RiboReport/scripts/concatGFF.py, 2, 8
sc=$(, 2, 8
sp=$(, 2, 8
add_to_dbs, 2, 8
align_fa, 2, 8
results/AMOEBAE_Data, 2, 8
results, 2, 8
find_redun_seqs, 2, 8
csv_to_fasta, 2, 8
tckmap, 2, 8
alphainput=({input.alphainput}), 2, 8
len=${{#alphainput[@]}}, 2, 8
betainput=({input.betainput}), 2, 8
len=${{#column[@]}}, 2, 8
pcoainput=({input.pcoainput}), 2, 8
len=${{#pcoainput[@]}}, 2, 8
hhblits, 2, 8
$(for, 2, 8
done), 2, 8
trap, 2, 8
out_dir=$(dirname, 2, 8
import_versions=$out_dir/import_versions.tsv, 2, 8
db=$(echo, 2, 8
version=$(echo, 2, 8
abs=$(readlink, 2, 8
$TMPDIR/import_versions, 2, 8
in_dir=$(dirname, 2, 8
inStrain, 2, 8
pbsv, 2, 8
gatk3, 2, 8
45, 2, 8
QUAL, 2, 8
TMP_DIR={params.tmp}, 2, 8
SORT_ORDER=coordinate, 2, 8
ASSUME_SORTED=true, 2, 8
I=/dev/stdin, 2, 8
SO=coordinate, 2, 8
rose-dt, 2, 8
rose-dt-plot.py, 2, 8
251831106, 2, 8
ref, 2, 8
NC_012920.1, 2, 8
ann_solo, 2, 8
\t{BISMARK}, 2, 8
/biodata/irg/grp_stich/Hv-DRR-pop/bin/bismark_v0.20.1/Bismark/bam2nuc, 2, 8
/biodata/irg/grp_stich/Hv-DRR-pop/bin/bismark_v0.20.1/Bismark/coverage2cytosine, 2, 8
1_trimmed_reads/cat, 2, 8
=n;, 2, 8
.join(, 2, 8
[fpython, 2, 8
iu-gen-configs, 1, 8
iu-filter-quality-minoche, 1, 8
infile_$proj_name.tx, 1, 8
STAR_init_map1_logfile.log, 1, 8
lima, 1, 8
\tcp, 1, 8
\tCodes/generate_bootstrap_alignments.py, 1, 8
Codes/extract_two_copy_genes.py, 1, 8
\trm, 1, 8
Codes/count_sequence_patterns.py, 1, 8
Codes/make_fate_network.py, 1, 8
Codes/cluster_fates.R, 1, 8
ALL_TCG_GENES=`cat, 1, 8
CHECK_PRESENCE=`grep, 1, 8
Codes/cluster_bootstraps.py, 1, 8
Codes/measure_recurrence_prevalence.py, 1, 8
Codes/find_recurrent_quartets.sh, 1, 8
Codes/measure_recurrence_magnitude.sh, 1, 8
check.out, 1, 8
fastx_renamer, 1, 8
fastx_reverse_complement, 1, 8
scripts/cmseq.sh, 1, 8
https://www.gnu.org/licenses/, 1, 8
kneaddata_database, 1, 8
kneaddata, 1, 8
mkfifo, 1, 8
/dev/stdin, 1, 8
${{TMPDIR}}/sorted.bam, 1, 8
${{TMPDIR}}/sorted.bed, 1, 8
${{TMPDIR}}/minus.bed, 1, 8
${{TMPDIR}}/plus.bed, 1, 8
${{TMPDIR}}/overlaps.bed, 1, 8
${{TMPDIR}}/subtracted.bed, 1, 8
gff2bed, 1, 8
prerapsearch, 1, 8
download_eggnog_data.py, 1, 8
$TMPDIR/fasta/tm.map, 1, 8
files=$(cat, 1, 8
genome_id=$(echo, 1, 8
new_id=$(grep, 1, 8
$TMPDIR/fasta/jgi.map, 1, 8
$TMPDIR/fasta/refseq.map, 1, 8
$TMPDIR/fasta/taxonmap.1, 1, 8
$TMPDIR/fasta/taxonmap.2, 1, 8
summary, 1, 8
/usr/local/bin/HiC-Pro_3.1.0/bin/utils/digest_genome.py, 1, 8
LC_ALL=C;, 1, 8
crypt4gh, 1, 8
pizzly, 1, 8
envs/ecc_caller/generate_bam_file.sh, 1, 8
envs/ecc_caller/call_ecc_regions.sh, 1, 8
envs/ecc_caller/assign_confidence.sh, 1, 8
$FILE.new, 1, 8
$1==track), 1, 8
wigToBigWig, 1, 8
plotProfile, 1, 8
\xe2\x80\x93regionsLabel, 1, 8
\t-g, 1, 8
\t-w, 1, 8
/,, 1
WC=`wc, 1, 8
N_LINES=`echo, 1, 8
odir=01qc/{wildcards.sample}_fastqc, 1, 8
bam2wig.py, 1, 8
img=$(readlink, 1, 8
IMAGEPATH, 1, 8
:${{img}}:, 1, 8
https://ndownloader.figshare.com/files/2194841, 1, 8
pattern=$(echo, 1, 8
url=ftp://ftp.sra.ebi.ac.uk/vol1/fastq, 1, 8
sample={wildcards.sample}, 1, 8
parallel_jobs=$((, 1, 8
bit-summarize-assembly, 1, 8
eukcc, 1, 8
working_dir=$(pwd), 1, 8
${{CONDA_PREFIX}}/etc/conda/activate.d/set_env_vars.sh, 1, 8
GTDBTK_DATA_PATH={params.gtdbtk_db_dir}, 1, 8
${{working_dir}}/{log}, 1, 8
={params.min_unk}, 1, 8
amrfinder_update, 1, 8
download-antismash-databases, 1, 8
antismash, 1, 8
run]}/6hrPlevPt/, 1, 8
M={output.metrics}, 1, 8
ascp, 1, 8
genomeCoverageBed, 1, 8
AssemblePairs.py, 1, 8
CollapseSeq.py, 1, 8
SplitSeq.py, 1, 8
ratio=$(grep, 1, 8
velocyto, 1, 8
prepare_receptor4.py, 1, 8
obabel, 1, 8
fcd, 1, 8
59, 1, 8
15, 1, 8
working, 1, 8
estimate_degree, 1, 8
estimate_degree_vs_true), 1, 8
germlinew, 1, 8
gzvcf2plink, 1, 8
maskSegments, 1, 8
ibd2degree, 1, 8
muscle, 1, 8
clustalo, 1, 8
unassigned, 1, 8
img, 1, 8
pandoc, 1, 8
html, 1, 8
link, 1, 8
/head, 1, 8
body, 1, 8
/body, 1, 8
/html, 1, 8
data/genome.fa, 1, 8
shred, 1, 8
dag.svg;, 1, 8
rulegraph.svg, 1, 8
tiddit, 1, 8
genefuse, 1, 8
$ANNOTSV/bin/AnnotSV, 1, 8
samplot, 1, 8
mergeBed, 1, 8
outdir=`echo, 1, 8
list.samples, 1, 8
pedsim, 1, 8
ibis, 1, 8
.*//, 1, 8
qapa, 1, 8
biotype_1020, 1, 8
display_label_1074, 1, 8
cctyper, 1, 8
filter_blast_m8.py, 1, 8
mcl, 1, 8
vcfutils.pl, 1, 8
./Parsnp-Linux64-v1.2/parsnp, 1, 8
harvesttools-Linux64-v1.2/harvesttools, 1, 8
log/index_lra.err, 1, 8
log/{wildcards.sample}_lra_map.err, 1, 8
log/{wildcards.sample}_sv_call.err, 1, 8
log/{wildcards.sample}_depth.err, 1, 8
log/{wildcards.sample}_sort_vcf.err, 1, 8
log/{wildcards.sample}_index_vcf.err, 1, 8
log/{wildcards.sample}_pmd_hpv.err, 1, 8
log/{wildcards.sample}_pmd.err, 1, 8
log/index_lra_hpv.err, 1, 8
log/{wildcards.sample}_lra_map_hpv.err, 1, 8
log/{wildcards.sample}_sv_call_hpv.err, 1, 8
log/{wildcards.sample}_depth_hpv.err, 1, 8
log/{wildcards.sample}_sort_vcf_hpv.err, 1, 8
log/{wildcards.sample}_index_vcf_hpv.err, 1, 8
log/{wildcards.sample}_basic.err, 1, 8
log/{wildcards.sample}_model.err, 1, 8
log/{wildcards.sample}_basic_bam_sort1.err, 1, 8
log/{wildcards.sample}_basic_bam_index1.err, 1, 8
log/{wildcards.sample}_basic_bam_sort3.err, 1, 8
log/{wildcards.sample}_basic_bam_index3.err, 1, 8
log/{wildcards.sample}_model_based_bam_sort1.err, 1, 8
log/{wildcards.sample}_model_based_bam_index1.err, 1, 8
log/{wildcards.sample}_model_based_bam_sort3.err, 1, 8
log/{wildcards.sample}_model_based_bam_index3.err, 1, 8
log/{wildcards.sample}_basic_hpv.err, 1, 8
log/{wildcards.sample}_model_hpv.err, 1, 8
log/{wildcards.sample}_basic_bam_sort1_hpv.err, 1, 8
log/{wildcards.sample}_basic_bam_index1_hpv.err, 1, 8
log/{wildcards.sample}_basic_bam_sort3_hpv.err, 1, 8
log/{wildcards.sample}_basic_bam_index3_hpv.err, 1, 8
log/{wildcards.sample}_model_based_bam_sort1_hpv.err, 1, 8
log/{wildcards.sample}_model_based_bam_index1_hpv.err, 1, 8
log/{wildcards.sample}_model_based_bam_sort3_hpv.err, 1, 8
log/{wildcards.sample}_model_based_bam_index3_hpv.err, 1, 8
frm, 1, 8
ver=$(python, 1, 8
&1), 1, 8
path1=$(echo, 1, 8
FQ1=`echo, 1, 8
FQ2=`echo, 1, 8
out=`echo, 1, 8
Scripts/init_sample.sh, 1, 8
Scripts/init_sample_SE.sh, 1, 8
Scripts/init_sample_dmx.sh, 1, 8
Scripts/init_sample_dmx_SE.sh, 1, 8
0;i--){{k=substr(seq,i,1);rc=rc, 1
+str(config[dada2_taxonomy][db]), 1, 8
+str(config[dada2_taxonomy][add_sps][add]), 1, 8
+str(config[dada2_merge][minOverlap]), 1, 8
+str(config[UNPAIRED_DATA_PIPELINE]), 1, 8
=NF;i++){{header=headert$i}};print, 1, 8
=NF;, 1, 8
p, 1, 8
=p;, 1, 8
=NR;, 1, 8
1){{tax=$2;for(i=3;i, 1, 8
=NF;i++){{tax=tax;$i}};h[$1]=tax;}}next;}}, 1, 8
mapp=, 1, 8
degapseq, 1, 8
1){{h[$1]=$2;}}next}}{{if(FNR, 1, 8
1){{print, 1, 8
Morphology_main.py, 1, 8
barrnap, 1, 8
analyze_blastPlus_topHit_coverage.pl, 1, 8
gtf2bed.pl, 1, 8
/c8000xd3/rnaseq-heath/bin/samtools, 1, 8
~/anaconda2/envs/py35/bin/seqtk, 1, 8
miRNA, 1, 8
/exon/, 1, 8
Name, 1, 8
/gene_id/, 1, 8
RPB, 1, 8
0.1, 1, 8
AC, 1, 8
extractSplitReads_BwaMem, 1, 8
~/harddisk/BIO_TOOl/lumpy-sv/scripts/extractSplitReads_BwaMem, 1, 8
DNA-HD753-50ng_S8_L001.splitters.unsorted.bam, 1, 8
lumpyexpress, 1, 8
0.7, 1, 8
raven, 1, 8
multi_to_single_fast5, 1, 8
deepsignal, 1, 8
racon_wrapper, 1, 8
dipdiff.py, 1, 8
VcfFilter, 1, 8
VcfSort, 1, 8
/home/caspar/miniconda3/bin/truvari, 1, 8
scripts/count-circrna.py, 1, 8
scripts/parse-pileup.py, 1, 8
scripts/infer-apa.py, 1, 8
URL=$(python3, 1, 8
e,, 1
print(url), 1, 8
exit(e)), 1, 8
$DIRNAME/my-crawler-beans.cxml, 1, 8
RUNTIME=0, 1, 8
RUNTIME=$((RUNTIME+5)), 1, 8
CAT=$([[, 1, 8
giashard_bin=$([[, 1, 8
initial_nolines=$(zcat, 1, 8
output={output}, 1, 8
filter_command=cat, 1, 8
para_nolines=$(cat, 1, 8
^p-1s-1$, 1, 8
output={params.tmp_translations_file}, 1, 8
filter_command=python3, 1, 8
$output, 1, 8
n_after=$(zcat, 1, 8
header=src_urlttrg_urltsrc_docttrg_doc, 1, 8
header=src_urlttrg_urltsrc_textttrg_texttsrc_translated, 1, 8
text_fields=$(head, 1, 8
value=/dev/null, 1, 8
first=0, 1, 8
sort_flags=$(cat, 1, 8
models/smc/bootstrap_input/{params.population}.{params.distind}_rep, 1, 8
bmtagger.sh, 1, 8
chrM, 1, 8
log/{wildcards.patient}_medalt_patient.err, 1, 8
log/{wildcards.patient}_cyto.err, 1, 8
log/{wildcards.patient}_node_cyto.err, 1, 8
log/{wildcards.patient}_header_node_cyto.err, 1, 8
src/ensemble_prediction_pipeline/ensemble.sh, 1, 8
/opt/deepvariant/bin/make_examples, 1, 8
/opt/deepvariant/bin/call_variants, 1, 8
/opt/deepvariant/bin/postprocess_variants, 1, 8
fq, 1, 8
fasta, 1, 8
fastq, 1, 8
gz), 1, 8
sam, 1, 8
cram), 1, 8
yak, 1, 8
hifiasm, 1, 8
$2_hap1\, 1, 8
mapped/{wildcards.sample}.filtered.bam, 1, 8
I={input.aln_a}, 1, 8
O={output.aln_clean}, 1, 8
M={output.aln_clean_txt}, 1, 8
./, 1, 8
shell:\t, 1, 8
wtdbg2.pl, 1, 8
miniasm, 1, 8
lftp, 1, 8
CrossMap.py, 1, 8
URL=http://hgdownload.soe.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz, 1, 8
SNPsplit_genome_preparation, 1, 8
exitcode=$?, 1, 8
biotype, 1, 8
ref/PlasmoDB-52_{wildcards.genome}.2.gff.gz, 1, 8
coco, 1, 8
O={output.bam_dedup}, 1, 8
alignmentSieve, 1, 8
log/{wildcards.sample}_freddie_split.err, 1, 8
log/{wildcards.sample}_freddie_segment.err, 1, 8
log/{wildcards.sample}_freddie_cluster.err, 1, 8
log/{wildcards.sample}_freddie_isoforms.err, 1, 8
log/{wildcards.sample}_gffread2.err, 1, 8
log/{wildcards.sample}_freddie_split_hpv.err, 1, 8
log/{wildcards.sample}_freddie_segment_hpv.err, 1, 8
log/{wildcards.sample}_freddie_cluster_hpv.err, 1, 8
log/{wildcards.sample}_freddie_isoforms_hpv.err, 1, 8
log/{wildcards.sample}_gffread2_hpv.err, 1, 8
bonito, 1, 8
log/{wildcards.sample}_basecall.err, 1, 8
log/{wildcards.sample}_stringtie.err, 1, 8
log/{wildcards.sample}_gffread.err, 1, 8
log/{wildcards.sample}_stringtie_hpv.err, 1, 8
log/{wildcards.sample}_gffread_hpv.err, 1, 8
unset, 1, 8
input_accessions={input.baseline_accessions}, 1, 8
tools/bestMash.py, 1, 8
ref=$(grep, 1, 8
tools/parse_dnadiff.py, 1, 8
counts=$(ls, 1, 8
gunc, 1, 8
chrom=$(basename, 1, 8
out=$outdir/$chrom.vcf.gz, 1, 8
$f, 1, 8
output_file, 1, 8
params=list(out_prefix, 1, 8
modality, 1, 8
feature, 1, 8
input, 1, 8
integrated, 1, 8
output, 1, 8
bedToBam, 1, 8
workflow/report/replacement_notice.txt, 1, 8
corMMapMerSize=10, 1, 8
corOverlapper=minimap, 1, 8
corConcurrency={params.concurrency}, 1, 8
cormhapConcurrency={params.concurrency}, 1, 8
cormmapConcurrency={params.concurrency}, 1, 8
obtmmapConcurrency={params.concurrency}, 1, 8
utgmmapConcurrency={params.concurrency}, 1, 8
redConcurrency={params.concurrency}, 1, 8
ovbConcurrency={params.concurrency}, 1, 8
ovsConcurrency={params.concurrency}, 1, 8
oeaConcurrency={params.concurrency}, 1, 8
PAIR=`dirname, 1, 8
WDIR={EXPT_DIR}/$PAIR, 1, 8
SRC=${{PAIR:0:2}}, 1, 8
TGT=${{PAIR:3:2}}, 1, 8
50:, 1, 8
tgt_file={input[1]}/`basename, 1, 8
align_file={output}/`basename, 1, 8
$align_file, 1, 8
split_file={output[0]}/`basename, 1, 8
$txt_file, 1, 8
P, 1, 8
$/d, 1, 8
$split_file;, 1, 8
$split_file, 1, 8
snippy-core, 1, 8
snp-sites, 1, 8
exitcode=$?;, 1, 8
GenotypeGVCFs, 1, 8
FastTree, 1, 8
https://api.anaconda.org/package/bioconda/{wildcards.package}, 1, 8
%ht%aNt%aI, 1, 8
recipes/*), 1, 8
bioconda-utils, 1, 8
recipes, 1, 8
../{output}, 1, 8
neato, 1, 8
./{input.bam}, 1, 8
./{params.out_prefix}, 1, 8
./{output.mbias}, 1, 8
OT=$(cut, 1, 8
OB=$(cut, 1, 8
scripts/mosdepth_to_x_coverage.py, 1, 8
tantan, 1, 8
DP, 1, 8
70, 1, 8
Kleb.variants.vcf.gz, 1, 8
={params.maxFragmentSize}, 1, 8
scale-regions, 1, 8
bedClip, 1, 8
condition, 1, 8
%, 1, 8
plotEnrichment, 1, 8
genomes/sizes.genome, 1, 8
tracks/annotation-woGenes.gtf;, 1, 8
tracks/annotation-woGenes.gtf, 1, 8
tracks/annotation.bed, 1, 8
tracks/annotation.bed6;, 1, 8
tracks/annotationScore.bed6;, 1, 8
logs/python_script.log, 1, 8
CreateSequenceDictionary, 1, 8
REFERENCE={input.genome_fa}, 1, 8
OUTPUT={output.dict}, 1, 8
salmon_idx_from_not_gencode, 1, 8
kb, 1, 8
data/NanoQ/PCNQ_read.fastq.gz, 1, 8
report/NanoQ/report.txt, 1, 8
graphmap, 1, 8
scripts/Chunk_dataframe.sh, 1, 8
CPC2/bin/CPC2.py, 1, 8
transeq, 1, 8
scripts/tmhmm.sh, 1, 8
scripts/parallel_gmap.sh, 1, 8
REPORT=assembly_report.txt, 1, 8
convert, 1, 8
/dev/null;, 1, 8
results/SIMresults/aggregatepsd.txt, 1, 8
results/SIMresults/aggregatedoseresponse.txt, 1, 8
FrameBot, 1, 8
raxmlHPC, 1, 8
{params.ilastik_loc}, 1, 8
fchromosight, 1, 8
ftail, 1, 8
f-d, 1, 8
fawk, 1, 8
v1.10.0/bio/cooltools/genome/gc, 1, 8
gaas_fasta_splitter.pl, 1, 8
transposonPSI.pl, 1, 8
gaas_fasta_removeSeqFromIDlist.pl, 1, 8
ProtExcluder.pl, 1, 8
tophat2, 1, 8
output/surfmorph/labels/participants.tsv, 1, 8
cellranger-atac, 1, 8
src/cellcellsimulate.sh, 1, 8
src/{wildcards.othermethod}.sh, 1, 8
src/plot_tr_eachcci.sh, 1, 8
src/preprocess_{wildcards.sample}.sh, 1, 8
src/labelpermutation.sh, 1, 8
src/labelpermutation2.sh, 1, 8
src/halpern.sh, 1, 8
src/cabelloaguilar.sh, 1, 8
src/report.sh, 1, 8
merged.fna, 1, 8
af, 1, 8
f(gdown, 1, 8
ISEXCEL={params.isExcel}, 1, 8
1{{print($5,$2)}}, 1
breseq, 1, 8
../../{input.r1}, 1, 8
../../{log}, 1, 8
all_freebayes_genomes.fa, 1, 8
pdflatex, 1, 8
ciftify_clean_img, 1, 8
trimmed, 1, 8
ktUpdateTaxonomy.sh, 1, 8
kraken2-inspect, 1, 8
krakefaction, 1, 8
logs/salmon_path, 1, 8
config.dat, 1, 8
scripts/extract_RGI_fasta.py, 1, 8
scripts/read_count_bam.pl, 1, 8
seed.fasta, 1, 8
TMPNME=$(set, 1, 8
/dev/urandom, 1, 8
out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/scaffolds.1000.bam, 1, 8
metabat, 1, 8
rev);, 1, 8
out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/contigs_10K.fna, 1, 8
out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/clustering_merged.csv, 1, 8
minimumsize=50000, 1, 8
actualsize=$(wc, 1, 8
$file), 1, 8
./src/scripts/BUSCO.sh, 1, 8
out/human/{wildcards.sample}/{wildcards.sample}.mito.sai, 1, 8
out/human/{wildcards.sample}/{wildcards.sample}.mito.bam, 1, 8
out/human/{wildcards.sample}/{wildcards.sample}.auto.sai, 1, 8
out/human/{wildcards.sample}/{wildcards.sample}.auto.bam, 1, 8
out/human/{wildcards.sample}/{wildcards.sample}.auto.idxstats, 1, 8
contDeam.pl, 1, 8
schmutzi.pl, 1, 8
/apps/schmutzi/20171024/alleleFreqMT/eurasian/freqs/, 1, 8
log2fasta, 1, 8
callHaplogroups.py, 1, 8
angsd, 1, 8
./src/scripts/haplogrep, 1, 8
blast2rma, 1, 8
out/taxonomic_classifications/metaphlan/{wildcards.sample}/merged_abundance_table.txt, 1, 8
clade, 1, 8
count=$(zgrep, 1, 8
merge=$(zgrep, 1, 8
dedup=$(zgrep, 1, 8
mito=$(samtools, 1, 8
auto=$(samtools, 1, 8
interproscan.sh, 1, 8
assign_genome_properties.pl, 1, 8
RNAfold, 1, 8
ShortStack, 1, 8
A=$(cat, 1, 8
a=$(cat, 1, 8
ITSx, 1, 8
pairtools, 1, 8
pairix, 1, 8
refgenome, 1, 8
classifier, 1, 8
shell:#has, 1, 8
merger, 1, 8
/usr/local/bin/manta/bin/configManta.py, 1, 8
whamg, 1, 8
OLD_HEADER=$(bcftools, 1, 8
CONTIGS_HEADER=$(grep, 1, 8
ID=, 1, 8
}}), 1, 8
vcf_text=$(bgzip, 1, 8
FILEDATE=$(grep, 1, 8
$vcf_text), 1, 8
sum=$(grep, 1, 8
^ID), 1, 8
kraken-biom, 1, 8
NR, 1, 8
fcurl, 1, 8
resfinder.py, 1, 8
./helper_scripts/download_known_PETases.py, 1, 8
./helper_scripts/run_hmm_search_iteratively.py, 1, 8
focal=$(echo, 1, 8
mapping=$(echo, 1, 8
$(find, 1, 8
GTDBTk.stats, 1, 8
binID=$(echo, 1, 8
smetana.all, 1, 8
less, 1, 8
media.txt, 1, 8
ll, 1, 8
media.txt;, 1, 8
sampleMedia.stats, 1, 8
gemID=$(echo, 1, 8
id=$(echo, 1, 8
roary, 1, 8
create_pan_genome_plots.R, 1, 8
carve, 1, 8
$(echo, 1, 8
smetana, 1, 8
motus, 1, 8
PLEK, 1, 8
nslices=`fslval, 1, 8
cohorts, 1, 8
trimgalore., 1, 8
config[paths][dependencies][medestrand_path], 1, 8
sample_array=({input.all_stats}), 1, 8
sample_array=({input.all_amp_cov}), 1, 8
amp_dep_array=({input.amp_dep_plots}), 1, 8
cov_array=({input.cov_plots}), 1, 8
all_plots=(${{amp_dep_array[@]}}, 1, 8
1), 1, 8
uniq), 1, 8
demixed_array=({input.all_demixed}), 1, 8
bcl-convert, 1, 8
prinseq++, 1, 8
sample_array=({input.consensus_files}), 1, 8
sample_array=({input.masked_consensus_files}), 1, 8
bam_array=({input.sample_bams}), 1, 8
newName=$(echo, 1, 8
/){{print, 1, 8
newName;}}, 1, 8
evaluate, 1, 8
spoa, 1, 8
ts, 1, 8
NR==2, 1, 8
AF=1, 1, 8
results/{wildcards.file}.out.vcf.gz, 1, 8
slim, 1, 8
$_$_, 1, 8
,++$j,\, 1
/;print, 1, 8
={params.num}, 1, 8
/){{$id=$_}}else{{@t=split(/_/,$id);$s=$_;$d=$t[5];if, 1
/;$_=substr($_,1);@t=split(/_/);$d=$t[1]+$L-$t[1]%$L;print, 1
DB=`echo, 1, 8
last-train, 1, 8
last-split, 1, 8
antsRegistration, 1, 8
MultiplyImages, 1, 8
AverageAffineTransformNoRigid, 1, 8
fbowtie2-build, 1, 8
jellyfish, 1, 8
fbowtie2, 1, 8
sam2pairwise, 1, 8
$each;, 1, 8
L, 1, 8
Lnoflip), 1, 8
cmake, 1, 8
polca.sh, 1, 8
smoove, 1, 8
percentile_ranks=(, 1, 8
accession, 1, 8
_, 1, 8
arraydesign, 1, 8
generate_differential_tracks, 1, 8
annotationFile=$(find_properties_file_gsea, 1, 8
pvalColNum=$(get_contrast_colnum, 1, 8
log2foldchangeColNum=$(get_contrast_colnum, 1, 8
plotTitle=, 1, 8
Top, 1, 8
Fisher-exact,, 1
0.1), 1, 8
generate_baseline_tracks, 1, 8
metrictype=tpm, 1, 8
metrictype=fpkm, 1, 8
deseq2version=none, 1, 8
transcriptFile=$(, 1, 8
decoratedFile={params.decotranscripts}, 1, 8
deseq2version=`cat, 1, 8
3.32.0, 1, 8
target=, 1, 8
arrayDataType=$(perl, 1, 8
target=../../affymetrix-differential-analytics-methods.tsv, 1, 8
target=../../onecolour-microarray-differential-analytics-methods.tsv, 1, 8
target=../../twocolour-microarray-differential-analytics-methods.tsv, 1, 8
target=../../onecolour-mirna-microarray-differential-analytics-methods.tsv, 1, 8
target=../../twocolour-mirna-microarray-differential-analytics-methods.tsv, 1, 8
decorate_if_exists_norm, 1, 8
copy_experiment_from_analysis_to_atlas_exps, 1, 8
get_magetab_for_experiment, 1, 8
rename_files_baseline, 1, 8
rename_files_differential, 1, 8
prot_exp_type=experimentType=proteomics_baseline, 1, 8
organism=$(perl, 1, 8
DIR=$line, 1, 8
organism_check=$(echo, 1, 8
$organism_check, 1, 8
organisms.txt, 1, 8
organism=$organism_check, 1, 8
log/merge_ccs.err, 1, 8
log/merge_subread.err, 1, 8
log/cluter.err, 1, 8
log/polish.err, 1, 8
log/gunzip.err, 1, 8
log/gunzip2.err, 1, 8
log/cluter_report.err, 1, 8
log/sqanti.err, 1, 8
log/sort.err, 1, 8
log/collapsed.err, 1, 8
log/fastq_tofasta2.err, 1, 8
log/count.err, 1, 8
log/filter.err, 1, 8
log/fastq_tofasta3.err, 1, 8
log/sqanti_r2.err, 1, 8
log/sort2.err, 1, 8
log/kallisto_index.err, 1, 8
log/{wildcards.sample}_ccs.err, 1, 8
log/{wildcards.sample}_cluter.err, 1, 8
log/{wildcards.sample}_polish.err, 1, 8
log/{wildcards.sample}_gunzip.err, 1, 8
log/{wildcards.sample}_gunzip2.err, 1, 8
log/{wildcards.sample}_cluter_report.err, 1, 8
log/{wildcards.sample}_sqanti.err, 1, 8
log/{wildcards.sample}_sort.err, 1, 8
log/{wildcards.sample}_collapsed.err, 1, 8
log/{wildcards.sample}_fastq_tofasta2.err, 1, 8
log/{wildcards.sample}_count.err, 1, 8
log/{wildcards.sample}_filter.err, 1, 8
log/{wildcards.sample}_fastq_tofasta3.err, 1, 8
log/{wildcards.sample}_sqanti_r2.err, 1, 8
log/{wildcards.sample}_sort2.err, 1, 8
log/{wildcards.sample}_sqanti_r2_filter.err, 1, 8
family_interproscan={input.family_interproscan}, 1, 8
interproscan_id={output.interproscan_id}, 1, 8
${{interproscan_id}}, 1, 8
./paircoil2, 1, 8
log/{wildcards.sample}_link_bam.err, 1, 8
log/{wildcards.sample}_link_bai.err, 1, 8
log/{wildcards.sample}_link_loup.err, 1, 8
log/{wildcards.sample}_link_summary.err, 1, 8
log/{wildcards.sample}_link_count.err, 1, 8
log/{wildcards.sample}_link_reanalysis_summary.err, 1, 8
log/{wildcards.sample}_link_reanalysis_loup.err, 1, 8
tsv-filter, 1, 8
tsv-select, 1, 8
nextstrain, 1, 8
./bin/notify-on-deploy, 1, 8
xz, 1, 8
usearch, 1, 8
centrifuge, 1, 8
clipping_profile.py, 1, 8
rgzip, 1, 8
NUMBERBATCH_PATH=, 1, 8
pjoin(IRTNN,, 1
get.seqs(accnos={input.accnos},, 1
get.seqs(accnos=current,, 1
get.dists(accnos=current,, 1
cluster(column={input.dist},, 1
cluster.fit(reflist={input.reflist},, 1
list.seqs(list={input.list}), 1, 8
run-bwamem, 1, 8
fname=${{R1%.R1.fastq}}, 1, 8
R2=$fname.R2.fastq, 1, 8
fname=${{bam%.bam}}, 1, 8
sinto, 1, 8
scripts/trim_bcs.sh, 1, 8
R_LIBS=;, 1, 8
run_busco, 1, 8
qc/busco;, 1, 8
Minimum, 1, 8
samclip, 1, 8
nreads=$(samtools, 1, 8
rate=$(echo, 1, 8
REFERENCE={input}, 1, 8
ConvertToRefFlat, 1, 8
SEQUENCE_DICTIONARY={input.seq_dict}, 1, 8
FASTQ={input.fastq1}, 1, 8
FASTQ2={input.fastq2}, 1, 8
SAMPLE_NAME={wildcards.sample}, 1, 8
DISCARD_READ=false, 1, 8
TAG_NAME=XC, 1, 8
DISCARD_READ=true, 1, 8
TAG_NAME=XM, 1, 8
FilterBAM, 1, 8
TAG_REJECT=XQ, 1, 8
TrimStartingSequence, 1, 8
SEQUENCE={params.adapter_sequence}, 1, 8
PolyATrimmer, 1, 8
FASTQ={output}, 1, 8
ALIGNED_BAM={input.aligned}, 1, 8
UNMAPPED_BAM={input.unaligned}, 1, 8
REFERENCE_SEQUENCE={input.reference}, 1, 8
INCLUDE_SECONDARY_ALIGNMENTS=false, 1, 8
PAIRED_RUN=false, 1, 8
TagReadWithGeneExon, 1, 8
TAG=GE, 1, 8
BAMTagHistogram, 1, 8
TAG=XC, 1, 8
READ_QUALITY={params.read_quality}, 1, 8
GatherMolecularBarcodeDistributionByGene, 1, 8
NUM_CORE_BARCODES={params.ncells}, 1, 8
EDIT_DISTANCE={params.edit_distance}, 1, 8
READ_MQ={params.read_mq}, 1, 8
MIN_BC_READ_THRESHOLD={params.min_umi_reads}, 1, 8
RARE_UMI_FILTER_THRESHOLD={params.rare_umi_filter}, 1, 8
shell:rm, 1, 8
erp, 1, 8
erp_properties, 1, 8
dspm, 1, 8
lcmv, 1, 8
))), 1, 8
obo_to_tab.pl, 1, 8
print.pl, 1, 8
PFAM_dat_parser.pl, 1, 8
&2;, 1, 8
hicup, 1, 8
bam2pairs, 1, 8
merge-pairs.sh, 1, 8
hicFindTADs, 1, 8
ILLUMINACLIP:{params.trim_dir}/adapters/TruSeq3-PE-2.fa:2:{params.minqual}:10:3:true, 1, 8
config[PROJECT]+, 1, 8
MAXINFO:{config[trimmomatic][MAXINFO]}, 1, 8
config[DATABASE][name]+/+config[DATABASE][name], 1, 8
p__, 1, 8
c__, 1, 8
o__, 1, 8
f__, 1, 8
g__, 1, 8
s__, 1, 8
column, 1, 8
results/{wildcards.PROJECT}/runs/{wildcards.RUN}/05-dwca/, 1, 8
anvi-gen-contigs-database, 1, 8
anvi-profile, 1, 8
anvi-merge, 1, 8
anvi-import-collection, 1, 8
anvi-interactive, 1, 8
\t./scripts/trim_reads.sh, 1, 8
salmon_results=os.path.join(RESULTS_FOLDER,, 1
out_folder, 1, 8
filename=$(basename, 1, 8
sample_name=${{filename/.fastq}}, 1, 8
prepare_counts-rna.r, 1, 8
prepare_counts.r, 1, 8
find_imbalance-rna.r, 1, 8
find_imbalance.r, 1, 8
0)&&(F2R1[0:1], 1, 8
9)&&($4, 1, 8
9), 1, 8
2)&&(F2R1[0:1], 1, 8
2), 1, 8
daa={output.daa}, 1, 8
date), 1, 8
vcf-consensus, 1, 8
scripts_dir+/center_and_widen.py, 1, 8
scripts_dir+/center_and_widen_bed.py, 1, 8
meirlop, 1, 8
$(awk, 1, 8
scanMotifGenomeWide.pl, 1, 8
scripts_dir+/fix_bed.bash, 1, 8
scripts_dir+/statistics.py, 1, 8
scripts_dir+/metrics.py, 1, 8
scripts_dir+/prc.py, 1, 8
tac, 1, 8
TMP_DIR=./tmp, 1, 8
log/ping12.err, 1, 8
log/ping3.err, 1, 8
overlap={config[cut_overlap]}, 1, 8
chunk={config[cut_size]}, 1, 8
bigchunk=$(echo, 1, 8
smalloverlap=$(echo, 1, 8
n_batch=$(ls, 1, 8
error.txt, 1, 8
dist=$(echo, 1, 8
individuals=$(cat, 1, 8
N0=$(, 1, 8
coal_sizes=$(, 1, 8
length(temp)+1;, 1, 8
coal_sizes=${{coal_sizes%?}}, 1, 8
coal_sizes=$N0,$coal_sizes, 1
coal_times=$(, 1, 8
n=$(zcat, 1, 8
n=$((2*$n)), 1, 8
nsim={config[ldhot.nsim]}, 1, 8
bammarkduplicates, 1, 8
isONclust2, 1, 8
basename, 1, 8
humann, 1, 8
pdftoppm, 1, 8
ppx, 1, 8
taxonomy:559292, 1, 8
&format=fasta, 1, 8
thermorawfileparser, 1, 8
comet, 1, 8
mokapot, 1, 8
./medaka_polish.sh, 1, 8
pgap.py, 1, 8
gatk-framework, 1, 8
./make-acc-taxid-mapping.py, 1, 8
INPUT={input.bam_files}, 1, 8
OUTPUT={output.sorted_bam_files}, 1, 8
INPUT={input.sorted_bam_files}, 1, 8
FASTQ={output.fq1}, 1, 8
SECOND_END_FASTQ={output.fq2}, 1, 8
file, 1, 8
./{input.bigBedToBed}, 1, 8
trimal, 1, 8
shell:cat, 1, 8
shell:scripts/pipeline2.0/MIPstats.py, 1, 8
SNPsplit, 1, 8
GENOME.GTF, 1, 8
output/temp/cutadapt/logs/{params.pre}.cutadapt.log, 1, 8
quast.py, 1, 8
HRIBO/scripts/xtail_classic.R, 1, 8
HRIBO/scripts/riborex.R, 1, 8
HRIBO/scripts/prepare_deltate_input.py, 1, 8
DTEG.R, 1, 8
bowtie-build, 1, 8
scripts/SrrMunch2.sh, 1, 8
scripts/import-paired.sh, 1, 8
scripts/join_pairs.sh, 1, 8
scripts/derep.sh, 1, 8
scripts/de-novo.sh, 1, 8
scripts/q2_export.sh, 1, 8
scripts/split_scATAC_bam_by_cluster.py, 1, 8
01split_bam/{wildcards.sample}/{wildcards.sample}_{wildcards.cluster_id}.bam, 1, 8
mtxs=, 1, 8
mtxs+=, 1, 8
csvs=, 1, 8
csvs+=, 1, 8
metaPlotR/annot_m6a.sorted.bed, 1, 8
parallel-fastq-dump, 1, 8
workflow/scripts/concat_fasta.py, 1, 8
workflow/scripts/CDs_from_MetaEuk.py, 1, 8
prank, 1, 8
mpirun, 1, 8
xargs);, 1, 8
docker-compose, 1, 8
SECONDS=0, 1, 8
duration=$SECONDS, 1, 8
d={NEO4J_IMPORTDIR}/{NODEDIR}/{params.meta_id}, 1, 8
d={NEO4J_IMPORTDIR}/{RELDIR}/{params.meta_id}, 1, 8
gene_list={input.path_gene_list}, 1, 8
use_list={params[0]}, 1, 8
alignment={params[1]}, 1, 8
variantcalling={params[3]}, 1, 8
SV={params[4]}, 1, 8
MEI={params[5]}, 1, 8
STR={params[6]}, 1, 8
genotype={params[7]}, 1, 8
expansion={params[8]}, 1, 8
debug={params[9]}, 1, 8
$MEI, 1, 8
$STR, 1, 8
$genotypeSTR, 1, 8
$expansion, 1, 8
format={params[1]}, 1, 8
paired={params[0]}, 1, 8
use_bed={params[1]}, 1, 8
debug={params[3]}, 1, 8
exome={params[0]}, 1, 8
debug={params[4]}, 1, 8
virus={params[0]}, 1, 8
bacteria={params[1]}, 1, 8
microbes={params[2]}, 1, 8
$bacteria, 1, 8
$microbes, 1, 8
virus={params[0], 1, 8
bacteria={params[0]}, 1, 8
microbes={params[0]}, 1, 8
$sequencing_report, 1, 8
$calls_report, 1, 8
MEI={params[0]}, 1, 8
variantcalling={params[2]}, 1, 8
STR={params[3]}, 1, 8
genotype={params[4]}, 1, 8
SV={params[5]}, 1, 8
MEI={params[6]}, 1, 8
alsgenescanner={params[1]}, 1, 8
/tmp/gencodePA_tmp.fa, 1, 8
/tmp/gencodeProtSeq.fa, 1, 8
genePredToGtf, 1, 8
ref/gencode_comp_ano_trim.tsv, 1, 8
ref/polyAtlas_gencodechrom_hg38_sorted.bed, 1, 8
ref/hg19_gencode_genome.fa, 1, 8
crossmap, 1, 8
bigWigToWig, 1, 8
wig2bed, 1, 8
snp_tmp/snps.bed, 1, 8
snp_tmp/good_snps.bed, 1, 8
ref/snps/hg38.snps.all.sorted.bed.gz, 1, 8
id={wildcards.id}, 1, 8
sample={wildcards.id}, 1, 8
./util/gtf_genome_to_cdna_fasta.pl, 1, 8
./util/gtf_to_alignment_gff3.pl, 1, 8
./util/cdna_alignment_orf_to_genome_orf.pl, 1, 8
transcripts.fasta.transdecoder.gff3, 1, 8
../data/seqs/transdecoder_results/all_tissues.combined_transdecoderCDS.gff3, 1, 8
agat_sp_add_start_and_stop.pl, 1, 8
id={wildcards.sampleID}, 1, 8
stem=${{gtf::-4}}, 1, 8
fasta=${{stem}}.fa, 1, 8
gdaldem, 1, 8
f.properties.DESIG_ENG, 1, 8
py.test, 1, 8
qc2tsv, 1, 8
croo, 1, 8
preprocessed_{wildcards.run}_{wildcards.task};, 1, 8
quit;;, 1, 8
1000, 1, 8
rsync://hgdownload.cse.ucsc.edu/goldenPath/{config[genome]}/chromosomes/, 1, 8
tmp_sicer=$(mktemp, 1, 8
$(pwd), 1, 8
https://storage.googleapis.com/google-code-archive-downloads/v2/, 1, 8
code.google.com/phantompeakqualtools/ccQualityControl.v.1.1.tar.gz, 1, 8
awk:, 1, 8
dcraw, 1, 8
matlab, 1, 8
addpath(genpath({params.matlabPyrTools_path}));, 1, 8
freeman_windows({wildcards.scaling},, 1
GraphAligner, 1, 8
NanoCaller, 1, 8
tools/DeepVirFinder/dvf.py, 1, 8
0.9, 1, 8
0.01)print$1}}, 1, 8
tools/select_seqs_by_IDs.py, 1, 8
VIBRANT_run.py, 1, 8
checkv, 1, 8
tools/demovir.R, 1, 8
scripts/gtdbtk-to-lineages-csv.py, 1, 8
scripts/find-oddities.py, 1, 8
scripts/find-oddities-examine.py, 1, 8
metaphlan2.py, 1, 8
gtf2bed12, 1, 8
calculate-tin.py, 1, 8
motevo, 1, 8
http://hgdownload.soe.ucsc.edu/goldenPath/wuhCor1/UShER_SARS-CoV-2/, 1, 8
matUtils, 1, 8
bbmerge.sh, 1, 8
ecctadpole=t, 1, 8
prefilter=10, 1, 8
loose=t, 1, 8
outu={output.R1}, 1, 8
clumpify.sh, 1, 8
refstats={output.stats}, 1, 8
maxindel={params.maxindel}, 1, 8
minhits={params.minhits}, 1, 8
local=t, 1, 8
readlength.sh, 1, 8
kaiju, 1, 8
addTaxonNames, 1, 8
gene_catalog/diamond/*.tsv, 1, 8
get_SJs_from_gtf, 1, 8
TranscriptClean, 1, 8
talon_label_reads, 1, 8
talon_initialize_database, 1, 8
talon, 1, 8
talon_filter_transcripts, 1, 8
talon_abundance, 1, 8
talon_create_GTF, 1, 8
declare, 1, 8
numb=$(awk, 1, 8
${{line}});, 1, 8
calc+=$((${{numb}}));, 1, 8
words=$(echo, 1, 8
avg_len=$((${{calc}}, 1, 8
prepDE.py, 1, 8
sqanti3_qc.py, 1, 8
scripts/toconsensus.py, 1, 8
spingo, 1, 8
pistis, 1, 8
fasta-splitter, 1, 8
scripts/tolca.py, 1, 8
queryf=$(basename, 1, 8
alnf=$(basename, 1, 8
processors={threads},, 1
OUTPUT_FILE=`readlink, 1, 8
PHENOTYPE_FILE_CSV=`readlink, 1, 8
PHENOTYPE_FILE_TSV=`echo, 1, 8
gs://genetics-portal-raw/uk_biobank_sumstats/neale_v2/output/neale_v2_sumstats/*.neale2.gwas.imputed_v3.both_sexes.tsv.gz, 1, 8
gs://{params.output_dir}/, 1, 8
tools/map2ref.sh, 1, 8
tools/parse_bwa-cov.py, 1, 8
tools/parse_bwa-expcov.py, 1, 8
tools/parse_bwa-counts.py, 1, 8
BamClipOverlap, 1, 8
config[canu_args], 1, 8
genomeSize={wildcards.genome_size}, 1, 8
useGrid={grid}, 1, 8
opts, 1, 8
merge_wrapper.py, 1, 8
polya_database=--polya_db, 1, 8
outfile=--outfileNamePrefix, 1, 8
breakpoints=--breakpoints, 1, 8
outfile=--outfileName, 1, 8
featurecounts=--table, 1, 8
samplesheet=--samplesheet, 1, 8
annotation=--gtf, 1, 8
dexseq=--dexseq.table, 1, 8
width_min={params.width_min},, 1
options=, 1, 8
ddrage, 1, 8
./{input.rbt_bin}, 1, 8
ALIGNED_COUNT=$(zcat, 1, 8
UNALIGNED_COUNT=$(cat, 1, 8
UNALIGNED_COUNT=$((, 1, 8
csvtk, 1, 8
fasterq-dump.2.11.0, 1, 8
reads_2.fastq, 1, 8
sketch.sh, 1, 8
name0={wildcards.sample}, 1, 8
comparesketch.sh, 1, 8
format=3, 1, 8
alltoall, 1, 8
scripts/plot_sketch_comparison_heatmap.py, 1, 8
scripts/plot_bbcountunique.py, 1, 8
out1={output.read1}, 1, 8
out2={output.read2}, 1, 8
minlength={params.minlength}, 1, 8
maxlength={params.maxlength}, 1, 8
tossbrokenreads, 1, 8
sample2markers.py, 1, 8
extract_markers.py, 1, 8
msigdb_v5.2_files_to_download_locally/msigdb_v5.2_GMTs/, 1, 8
ipython3, 1, 8
mri_convert, 1, 8
dname=$(dirname, 1, 8
https://raw.githubusercontent.com/yukiteruono/pbsim2/master/data/P6C4.model, 1, 8
tmp={wildcards.read_length}, 1, 8
source={wildcards.read_length}, 1, 8
subsample_frac=${wildcards.coverage}, 1, 8
sample={wildcards.genome_size}, 1, 8
fname_cram=resources/experimental_data/SARS-CoV-2-2-strain-mix/$sample/$sample.cram, 1, 8
fname_expected_variants=resources/experimental_data/SARS-CoV-2-2-strain-mix/$sample/$sample_expected_variants.csv, 1, 8
fname_reference=resources/experimental_data/SARS-CoV-2-2-strain-mix/reference.fasta, 1, 8
fname_insert_bed=resources/experimental_data/SARS-CoV-2-2-strain-mix/nCoV-2019.insert.bed, 1, 8
flash, 1, 8
tmp={wildcards.seq_mode_param}, 1, 8
source=${{parts[0]}}, 1, 8
subsample_frac=${{parts[1]}}, 1, 8
89.6/, 1, 8
89.6, 1, 8
HXB2/, 1, 8
HXB2, 1, 8
JRCSF/, 1, 8
JRCSF, 1, 8
NL43/, 1, 8
NL43, 1, 8
YU2/, 1, 8
YU2, 1, 8
tmpfile={output.dname_work}/tmp.bam, 1, 8
workflow/plantRNAconcat.pl, 1, 8
vep_fp=`which, 1, 8
vep_path=$(dirname, 1, 8
vcf2maf.pl, 1, 8
artic_vcf_merge, 1, 8
artic_make_depth_mask, 1, 8
artic_plot_amplicon_depth, 1, 8
artic_mask, 1, 8
artic_fasta_header, 1, 8
ruanjue@gmail.com, 1, 8
reads.fa, 1, 8
prefix, 1, 8
[reads.fa, 1, 8
Long, 1, 8
Prefix, 1, 8
Number, 1, 8
Presets,, 1
1G), 1, 8
number, 1, 8
Approximate, 1, 8
depth, 1, 8
5000, 1, 8
k-mer, 1, 8
p-homopolymer-compressed, 1, 8
Subsampling, 1, 8
rnaspades.py, 1, 8
out1={output[0]}, 1, 8
out2={output[1]}, 1, 8
OD_bwa_index/{wildcards.sample}, 1, 8
config[base_path]+kraken2_config[kraken2_path]+kraken2, 1, 8
concat_input_reads.fq.gz, 1, 8
humann2, 1, 8
:, 1, 8
f{{wildcards.rfile}}, 1, 8
f{{wildcards.cell_line}}, 1, 8
f{{wildcards.drug}}, 1, 8
screen.seqs(fasta=current,, 1
predict.py, 1, 8
SPECtre.py, 1, 8
DataParser.py, 1, 8
DeepRibo.py, 1, 8
get_redun_hits, 1, 8
results/Ref_seqs_1, 1, 8
results/Ref_seqs_1/0_ref_seqs.csv, 1, 8
results/Ref_seqs_1_auto_predictions.csv, 1, 8
setup_fwd_srch, 1, 8
run_fwd_srch, 1, 8
sum_fwd_srch, 1, 8
setup_rev_srch, 1, 8
run_rev_srch, 1, 8
sum_rev_srch, 1, 8
interp_srchs, 1, 8
plot, 1, 8
images/example_workflow_diagram.png, 1, 8
shapeit, 1, 8
rfmix, 1, 8
TAXON_INDICES=($(seq, 1, 8
TAXON_LEVELS=(kingdom, 1, 8
ZIP_FILES=$(echo, 1, 8
FORWARD=$(echo, 1, 8
REVERSE=$(echo, 1, 8
SINGLE=$(echo, 1, 8
models/smc_estimate_bootstrap_input/{params.population}_{params.distind}_rep, 1, 8
models/smc_split_bootstrap_input/{params.pop_pair}_12.{params.distind1}_rep, 1, 8
models/smc_split_bootstrap_input/{params.pop_pair}_21.{params.distind1}_rep, 1, 8
out1={output.file1}, 1, 8
out2={output.file2}, 1, 8
gchist={output.gchist}, 1, 8
reads=5, 1, 8
alphasigni=({output.alphasigni}), 1, 8
coroutput=({output.coroutput}), 1, 8
column=({CONDITION}), 1, 8
site=({output.site}), 1, 8
leninput=${{#betainput[@]}}, 1, 8
x=0, 1, 8
$leninput;, 1, 8
x=$leninput, 1, 8
output=({output.pcoaoutput}), 1, 8
conditions=({output.ancom}), 1, 8
column=({params.column}), 1, 8
outpairwisedist=({output.output_pairwise_distance}), 1, 8
len=${{#betainput[@]}}, 1, 8
alphadiv=({input.d4}), 1, 8
output=({output.alphavolatility}), 1, 8
len=${{#alphadiv[@]}}, 1, 8
pcoaoutput=({output.pcoaoutput}), 1, 8
heatmap=({HEATMAP}), 1, 8
len=${{#heatmap[@]}}, 1, 8
feature_heatmap=({output.feature_heatmap}), 1, 8
important_feature_table_top=({output.important_feature_table_top}), 1, 8
intersect.out, 1, 8
subtract.out, 1, 8
.format(METAXCAN_HASH), 1, 8
gunzip), 1, 8
tmp, 1, 8
faToTwoBit, 1, 8
computeGCBias, 1, 8
initial_data_quality_cmd=fastqc, 1, 8
HEADCROP:{config[trimmomatic][HEADCROP]}, 1, 8
SLIDINGWINDOW:{config[trimmomatic][SLIDINGWINDOW]}, 1, 8
AVGQUAL:{config[trimmomatic][AVGQUAL]}, 1, 8
MINLEN:{config[trimmomatic][MINLEN]}, 1, 8
CROP:{config[trimmomatic][CROP]}, 1, 8
join_cmd=join_paired_ends.py, 1, 8
join_quality_cmd=fastqc, 1, 8
cluster_otus_cmd=pick_otus.py, 1, 8
pick_representatives_cmd=pick_rep_set.py, 1, 8
check_chimeric_seqs_cmd=parallel_identify_chimeric_seqs.py, 1, 8
classify_cmd=parallel_assign_taxonomy_rdp.py, 1, 8
make_otu_cmd=make_otu_table.py, 1, 8
convert_otu_table_cmd=biom, 1, 8
cut_expr=109-112,113-117,129,130,134, 1
cut_expr=94-102,113,114,116, 1
cols=$({{, 1, 8
i=0, 1, 8
let, 1, 8
prefix=, 1, 8
prefix=chr, 1, 8
write-chunk(), 1, 8
input=$1, 1, 8
output=$TMPDIR/out.d/$(basename, 1, 8
printf({wildcards.genome_build}t%st%dt%dt-1t%st%st[,, 1
x, 1, 8
$i, 1, 8
printf(,%s,, 1
printf(%s,, 1
printf(]\, 1, 8
https://kircherlab.bihealth.org/download/CADD/v1.6/{wildcards.genome_build}/whole_genome_SNVs_inclAnno.tsv.gz, 1, 8
https://kircherlab.bihealth.org/download/CADD/v1.6/{wildcards.genome_build}/whole_genome_SNVs_inclAnno.tsv.gz.tbi, 1, 8
_out={output}, 1, 8
out=$PWD/${{_out%.h2.db}}, 1, 8
varfish-annotator, 1, 8
varfish-server-background-db-{config[release_name]}-grch37, 1, 8
varfish-server-background-db-{config[release_name]}-grch38, 1, 8
chr=, 1, 8
chr=chr, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/legacy/exac_browser/ExAC.r1.sites.vep.vcf.gz, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/legacy/exac_browser/ExAC.r1.sites.vep.vcf.gz.tbi, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/legacy/exacv1_downloads/release0.3.1/cnv/$(basename, 1, 8
http://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/tsv/hgnc_complete_set.txt, 1, 8
http://ftp.ncbi.nlm.nih.gov/genomes/archive/old_refseq/H_sapiens/ARCHIVE/ANNOTATION_RELEASE.105/GFF/ref_GRCh37.p13_top_level.gff3.gz, 1, 8
clinvar_tsv, 1, 8
main, 1, 8
BEGIN, 1, 8
$3, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/liftover_grch38/vcf/exomes/gnomad.exomes.r2.1.1.sites.{wildcards.chrom}.liftover_grch38.vcf.bgz, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/liftover_grch38/vcf/exomes/gnomad.exomes.r2.1.1.sites.{wildcards.chrom}.liftover_grch38.vcf.bgz.tbi, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/release/3.1.1/vcf/genomes/gnomad.genomes.v3.1.1.sites.chr{wildcards.chrom}.vcf.bgz, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/release/3.1.1/vcf/genomes/gnomad.genomes.v3.1.1.sites.chr{wildcards.chrom}.vcf.bgz.tbi, 1, 8
https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/constraint/gnomad.v2.1.1.lof_metrics.by_gene.txt.bgz, 1, 8
1.0, 1, 8
6.0, 1, 8
inkscape, 1, 8
data, 1, 8
defaults, 1, 8
[cohort], 1, 8
nucmer, 1, 8
trf, 1, 8
svim, 1, 8
scripts/Assemblytics, 1, 8
syri, 1, 8
sample_files_ins, 1, 8
rsem-calculate-expression, 1, 8
rename, 1, 8
filename(s), 1, 8
DIR, 1, 8
If, 1, 8
INT, 1, 8
genome_folder, 1, 8
mates1, 1, 8
mates2, 1, 8
singles, 1, 8
}, 1, 8
bismark2bedGraph, 1, 8
sizes.genome, 1, 8
LC_COLLATE=C, 1, 8
[^, 1, 8
hicstuff, 1, 8
instagraal, 1, 8
fq_lines=$(, 1, 8
n_reads=$((fq_lines, 1, 8
genome_len=$(, 1, 8
fq={output}, 1, 8
trim=${{fq%_[12].fastq.gz}}, 1, 8
numLines=$(fastq-dump, 1, 8
fname=${{trim}}_1.fastq, 1, 8
ILLUMINACLIP:{params.adapter}:2:30:10, 1, 8
\t-threads, 1, 8
\t-{params.phred}, 1, 8
\t{input.single}, 1, 8
\t{output.single}, 1, 8
\tILLUMINACLIP:{params.adapter}:2:30:10, 1, 8
\t{params.trimmomatic_params}, 1, 8
\t2, 1, 8
rad_haplotyper.pl, 1, 8
islandpath, 1, 8
scripts/phispy/PhiSpy.py, 1, 8
DownloadLog.txt, 1, 8
DownloadLog1.txt, 1, 8
Rlog.txt, 1, 8
htsfile, 1, 8
rgrep, 1, 8
ILLUMINACLIP:{params.adapters}:2:30:10, 1, 8
https://github.com/tseemann/shovill/issues/59, 1, 8
shovill, 1, 8
tblastn, 1, 8
mashtree, 1, 8
mlst, 1, 8
30, 1, 8
=45, 1, 8
MQ, 1, 8
=30, 1, 8
FORMAT/DP, 1, 8
=10, 1, 8
=50, 1, 8
ADR[0:1], 1, 8
=1), 1, 8
PolyAAnalysis.jl/scripts/annotate_polyA.jl, 1, 8
CREATE_INDEX=false, 1, 8
gmap_build, 1, 8
gsnap, 1, 8
I={input.sam}, 1, 8
length(starts);, 1, 8
varscan, 1, 8
t0/0, 1, 8
H={output.histo}, 1, 8
REF_FLAT={input.annot}, 1, 8
RIBOSOMAL_INTERVALS={input.ref_rrna}, 1, 8
STRAND_SPECIFICITY=NONE, 1, 8
CHART_OUTPUT={output.histo}, 1, 8
comm, 1, 8
INPUT=/dev/stdin, 1, 8
METRICS_FILE={output.dupstats}, 1, 8
ASSUME_SORT_ORDER=coordinate, 1, 8
COMPRESSION_LEVEL=1, 1, 8
QUIET=false, 1, 8
size=$(stat, 1, 8
342, 1, 8
num_sig_variants_rep_A=$(grep, 1, 8
f=$(basename, 1, 8
dnadiff, 1, 8
METRICS_FILE={output.metrics}, 1, 8
SOAPnuke, 1, 8
MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000, 1, 8
REMOVE_DUPLICATES=TRUE, 1, 8
OUTPUT={output.L183a}, 1, 8
METRICS_FILE={output.L183b}, 1, 8
dos2unix, 1, 8
1.bed, 1, 8
2.bed, 1, 8
3.bed, 1, 8
4.bed, 1, 8
frags.bed, 1, 8
fragments.bed, 1, 8
atropos, 1, 8
{SCRIPTS}/vcf2phylip.py, 1, 8
{SCRIPTS}/vcf2geno.py, 1, 8
raxmlHPC-PTHREADS, 1, 8
raxml-ng, 1, 8
INDIR=$(dirname, 1, 8
init, 1, 8
LOAD_rnammer, 1, 8
report, 1, 8
rwc, 1, 8
sizes.txt, 1, 8
clustering/$i.txt;, 1, 8
biopet-validatefastq, 1, 8
