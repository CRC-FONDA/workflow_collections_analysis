"bwa-mem2 {input.genome} {input.read_one} {input.read_two} | samtools view -Sb - > {output}"
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"
"bwa-mem2 {input.genome} {input.read_one} {input.read_two} | samtools view -Sb - > {output}"
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"
\tshell: "samtools idxstat {input} > {output}"
"samtools view -hf 4 {input} | samtools view -Sb - > {output}"
"samtools sort -O bam -o {output} {input}"
"samtools view -hbuS -o {output} {input}"
samtools view -bh - | samtools sort - -o {params.temp_bam}
samtools index {params.temp_bam}
samtools_stats,
samtools faidx {input.ref} {params.name} > {output.fasta}
| samtools sort -m {resources.mem}G \\
samtools merge -b {input.alns} {output.aln}
samtools sort -m {resources.mem}G -@ {threads} --write-index \\
"envs/samtools.yaml"
"samtools fasta -o {output} {input}"
bwa mem -t {threads} {params.scaffold} {input.fwd} {input.rev} | samtools view -bS - | \\
samtools sort -@ {threads} -o {params.alignedsorted} -
samtools index {params.alignedsorted}
samtools flagstat {params.alignedsorted} > {output.flagstat}
| samtools view -bS - | samtools sort -@ {threads} -o {params.alignedsorted} -
samtools index {params.alignedsorted}
samtools flagstat {params.alignedsorted} > {output.flagstat}
| samtools view -bS - | samtools sort -@ {threads} -o {params.alignedsorted} -
samtools index {params.alignedsorted}
samtools flagstat {params.alignedsorted} > {output.flagstat}
"""Map population with bowtie2, sort with samtools, compress to cram"""
| samtools sort \\
samtools view \\
"samtools view {input} | awk \'$12 == \\"NH:i:1\\"\' | grep \\"YB:Z\\" > {output}"
"samtools sort -@ {threads} -o {output.bam} {output.sam} ;"
"samtools merge {output} {input} ; "
"samtools sort {input.alignment} > ${{TMPDIR}}/sorted.bam ; "
"samtools sort -@ {threads} -o {output.bam} {output.sam} ;"
\t\t'samtools sort -O bam {input.alignment_file} > {output}'
\t\t'samtools index {input.alignment_file} > {output}'
-1 {input.R1} -2 {input.R2} 2>{log} | samtools view -h -b - | samtools sort - -o {params.tmp_out}
-1 {input.R1} -2 {input.R2} | samtools view -h -b - | samtools sort - -o {params.tmp_out} 2> {log}
st_sort = "results/bowtie2/{sample_id}/{sample_id}.samtools_sort.fungi.log",
--un-conc-gz {params.un_conc_path} 2> {log.bt2} | samtools sort -n -O BAM - >{params.temp_bam} 2>{log.st_sort}
samtools view -F 4 -f 64 {input[0]} | cut -f3 | sort -u > {output[0]}
samtools = "results/bowtie2/{sample_id}/{sample_id}.samtools.host.log"
exec &> {log.samtools}
2>{log.bt2} | samtools sort -n -O BAM - > {params.temp_bam} 2>{log.samtools}
expand("outputs/samtools/{statistics}/{fname}.{statistics}",
"outputs/samtools/stats/{fname}.stats"
"logs/samtools_stats_{fname}.log"
samtools stats \\
"outputs/samtools/flagstat/{fname}.flagstat"
"logs/samtools_flagstat_{fname}.log"
samtools flagstat \\
"outputs/samtools/filtered/{fname}.filtered.sam"
space_join(config["samtools_view"]["params"])
"logs/samtools_view_{fname}.log"
samtools view \\
gapped_sam="outputs/samtools/filtered/gapped_fastq.filtered.sam"
"outputs/samtools/filtered/{fname}.filtered.sam"
"""samtools sort -T {params} -n -o {output} {input}"""
flagstats_out = (ALIGN_DIR + "{run_id}/" + "{run_id}.samtools_flagstats.txt"),
"samtools index {input} && samtools flagstat -O tsv {input} > {output.flagstats_out}"
"samtools sort -o {output.mapped} {params.sam} ; "
"samtools index {output.mapped}"
"samtools index {output.mapped_filtered}"
bowtie2  --very-sensitive -p {threads} -x data/mydatalocal/atacseq/bowtie2/all -1 {input.R1} -2 {input.R2} |  samtools view -q 2 -bS  -  |  samtools sort - -o {output.bam}
samtools index -b {output.bamnet}
"samtools index {output.bam}; "
\'module load samtools \
"module load samtools \
"module load samtools \
"module load legacy gcc/4.8.2 python/2.7.6 samtools/1.1 boost/1.55.0 eigen/3.2.1 cufflinks/2.2.1 \
\'samtools view -@ \'+CORES+\' -bS {input} > {output} \')
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.1000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.10000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.500000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.1000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.10000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.500000_window.bed", sample=config["samples"]),
samtools = expand("logs/ref_index/{ref}.samtools_faidx.log", ref=config["reference_genome"]),
samtools faidx {input} 2> {log.samtools}
name =      "samtools_flagstat",
"envs/samtools.yaml",
"samtools flagstat {input.bam} > {output.flagstat}"
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T /tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
| samtools sort -T /tmp/{wildcards.sample} -O BAM \\
samtools index {output.bam}
samtools=samtools
"{input.samtools} sort -@ {threads} -o {output.recal_sorted} {input.final_recal_bam} &> {log.out_SortBam}"
\t\t\tshell("bwa sampe {input.ref_genome_file} {input.reads_in[0]}.sai {input.reads_in[1]}.sai {input.reads_in[0]}  {input.reads_in[1]} | samtools view -Shb | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -o {output.bam_out} - ")
\t\t\tshell("bwa samse {input.ref_genome_file} {input.reads_in[0]}.sai {input.reads_in[0]} | samtools view -Shb | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -o {output.bam_out} - ")
\t\tshell("samtools index {output.bam_out}")
\t\t#"samtools view {params.quality} {input.bam_in} | grep -E {params.uniqueness} | samtools view -bS -T {ref_genome} - | samtools sort -o {output.bam_out} - "
\t\tshell("samtools view {params.quality} {input.bam_in} | grep -E {params.uniqueness} | samtools view -bS -T {ref_genome_file} - | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -n - | samtools fixmate -m - - | samtools sort - | samtools markdup -r - {output.bam_out}")
\t\tshell("samtools index {output.bam_out}")
\t\tshell("samtools idxstats {input.bam_in} > {input.bam_in}.idxstats")
\t\tshell("samtools flagstat {input.bam_in} > {input.bam_in}.flagstat")
\t\tshell("""samtools depth -a {input.bam_in} | awk \'{{sum+=$3; sumsq+=$3*$3}} END {{ print "average_depth\\t",sum/NR; print "std_depth\\t",sqrt(sumsq/NR - (sum/NR)**2)}}\' > {input.bam_in}.dpthStats""")
"envs/samtools.yaml"
"samtools bam2fq -1 {output[0]} -2 {output[1]} "
"<(samtools view -b -s{params.seed}.2 {params.url} chr{wildcards.chrom})"
"samtools flagstat {input} > {output}"
lambda wildcards: ((config["samtools_view"]["se"] if is_single_end(**wildcards)
else config["samtools_view"]["pe"]))
samtools view {params} -@ {threads} {input} > {output}
| samtools view -Sbh -o {output} 2> {log}
| samtools view -Sbh -o {output} &> {log}
| samtools view -Sbh -o {output} > {log}
samtools sort {params} -@ {threads} -o {output} {input}
samtools sort {params} -@ {threads} -o {output} {input}
samtools index -@ {threads} {params} {input} {output}
sam_command = "samtools view {input}/accepted_hits.bam"
shell: "samtools index {input}/accepted_hits.bam && mv -f {input}/accepted_hits.bam.bai  {output}"
shell: "samtools depth {input}/accepted_hits.bam > {output}"
shell("samtools --version | head -2 >> Summary/software_versions.txt")
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"qc/samtools-stats/{sample}-{unit}.txt",
"logs/samtools-stats/{sample}-{unit}.log",
"0.72.0/bio/samtools/stats"
"qc/samtools-stats/{u.sample}-{u.unit}.txt",
sort="samtools",
"logs/samtools/index/{prefix}.log",
"0.72.0/bio/samtools/index"
samtools sort \\
samtools index {output.bam}
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.59.2/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
"(hisat2 --threads {threads} -x {params.idx} {params.extra} -1 {input.r1} -2 {input.r2} | samtools view -Sbh -o {output}) 2> {log}"
"0.73.0/bio/samtools/index"
samtoolsreferenceindex = config["reference_path"] + ".fai",
"| samtools view -Sb - "
"samtools sort -T $(mktemp --dry-run) -O bam {input} > {output} 2> {log}"
shell: "samtools index {input} > {log} 2>&1"
samtools faidx {input}
samtools view -S -b {input} > {output}
samtools sort {input} -o {output}
samtools index {output}
"samtools sort -@ {threads} -o {output}"
samtools view -@ {threads} -uS - | \\
samtools sort -@ {threads} - \\
samtools index -@ {threads} {params.out_dir}/coverage.bam > {log} 2>&1
wrapper: "0.61.0/bio/samtools/faidx"
"0.64.0/bio/samtools/index"
\t\t"unset TMPDIR; module load samtools; samtools index {input}"
\t\t"unset TMPDIR; module load samtools; samtools index {input}"
shiver_samtools_index=expand(OUTPUT_DIR_SHIVER_RAW + "/{samples}.bam.bai",samples=SAMPLES),
log: expand(LOG_DIR_SHIVER_RAW + "/{{samples}}_samtools_index.log")
shiver_samtools_index=expand(OUTPUT_DIR_SHIVER_RAW + "/{samples}.bam.bai",samples=SAMPLES),
\t\t"envs/yaml/samtools.yaml"
\t\t"envs/yaml/samtools.yaml"
"bwa mem {input} | samtools view -Sb - > {output}"
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"
"samtools mpileup -g -f {input.fa} {input.bam} | "
"samtools index {input}"
"(./bwa-0.7.17/bwa mem -t {threads} {params.ref_base} {input.r1} {input.r2} | samtools view -Sb - > {output}) 2> {log}"
"samtools sort -O bam {input} > {output}"
sort="samtools",
"0.27.1/bio/samtools/index"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.27.1/bio/samtools/index"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
catfishq -r {out}mbc/basic/{wildcards.sample}/ | seqtk seq -A - | lra align -ONT -t 16 {input.REF} - -p s | samtools addreplacerg -r \\"@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\" - | samtools sort -@ 16 -T {wildcards.sample} -O BAM -o {output.BAM} - && samtools index -@ 16 {output.BAM} 2>log/{wildcards.sample}_lra_map.err
samtools view -b {input} | samtools sort > {output[0]} 2>log/{wildcards.sample}_minimap_sort_hpv.err
samtools index {output} 2>log/{wildcards.sample}_minimap_index_hpv.err
samtools view -b {input} | samtools sort > {output[0]} 2>log/{wildcards.sample}_minimap_sort.err
samtools index {output} 2>log/{wildcards.sample}_minimap_index.err
catfishq -r {out}mbc_hpv/basic/{wildcards.sample}/ | seqtk seq -A - | lra align -ONT -t 16 {input.REF} - -p s | samtools addreplacerg -r \\"@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\" - | samtools sort -@ 16 -T {wildcards.sample} -O BAM -o {output.BAM} - && samtools index -@ 16 {output.BAM} 2>log/{wildcards.sample}_lra_map_hpv.err
samtools sort {out}mbc/basic/{wildcards.sample}/mappings.bam > {out}mbc/basic/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_basic_bam_sort1.err
samtools index {out}mbc/basic/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_basic_bam_index1.err
samtools sort {out}mbc/basic/{wildcards.sample}/mod_mappings.5mC.bam > {out}mbc/basic/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_basic_bam_sort3.err
samtools index {out}mbc/basic/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_basic_bam_index3.err
samtools sort {out}mbc/model_based/{wildcards.sample}/mappings.bam > {out}mbc/model_based/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_model_based_bam_sort1.err
samtools index {out}mbc/model_based/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_model_based_bam_index1.err
samtools sort {out}mbc/model_based/{wildcards.sample}/mod_mappings.5mC.bam > {out}mbc/model_based/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_model_based_bam_sort3.err
samtools index {out}mbc/model_based/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_model_based_bam_index3.err
samtools sort {out}mbc_hpv/basic/{wildcards.sample}/mappings.bam > {out}mbc_hpv/basic/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_basic_bam_sort1_hpv.err
samtools index {out}mbc_hpv/basic/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_basic_bam_index1_hpv.err
samtools sort {out}mbc_hpv/basic/{wildcards.sample}/mod_mappings.5mC.bam > {out}mbc_hpv/basic/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_basic_bam_sort3_hpv.err
samtools index {out}mbc_hpv/basic/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_basic_bam_index3_hpv.err
samtools sort {out}mbc_hpv/model_based/{wildcards.sample}/mappings.bam > {out}mbc_hpv/model_based/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_model_based_bam_sort1_hpv.err
samtools index {out}mbc_hpv/model_based/{wildcards.sample}/mappings_sorted.bam 2>log/{wildcards.sample}_model_based_bam_index1_hpv.err
samtools sort {out}mbc_hpv/model_based/{wildcards.sample}/mod_mappings.5mC.bam > {out}mbc_hpv/model_based/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_model_based_bam_sort3_hpv.err
samtools index {out}mbc_hpv/model_based/{wildcards.sample}/mod_mappings.5mC_sorted.bam 2>log/{wildcards.sample}_model_based_bam_index3_hpv.err
-U {input[0]} | samtools view -@ {threads} -Sb -F 4 | samtools sort -@ {threads} -o {output.bams}; \\
samtools index {output.bams}")
-1 {input[0]} -2 {input[1]} | samtools view -@ {threads} -Sb -F 4 | samtools sort -@ {threads} -o {output.bams}; \\
samtools index {output.bams}")
--outFileNamePrefix {params.prefix} | samtools sort -@ {threads} -O bam -o {output.bams} 2> {log}")
--outFileNamePrefix {params.prefix} | samtools sort -@ {threads} -O bam -o {output.bams} 2> {log}")
-U {input[0]} | samtools view -@ {threads} -Sb -F 4 | samtools sort -@ {threads} -o {output.bams}; \\
samtools index {output.bams}")
-1 {input[0]} -2 {input[1]} | samtools view -@ {threads} -Sb -F 4 | samtools sort -@ {threads} -o {output.bams}; \\
samtools index {output.bams}")
--outFileNamePrefix {params.prefix} | samtools sort -@ {threads} -O bam -o {output.bams} 2> {log}")
--outFileNamePrefix {params.prefix} | samtools sort -@ {threads} -O bam -o {output.bams} 2> {log}")
"qc/samtools-stats/{sample}-{unit}.txt",
"logs/samtools-stats/{sample}-{unit}.log",
"0.59.2/bio/samtools/stats"
"qc/samtools-stats/{u.sample}-{u.unit}.txt",
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
f"{WRAPPER_PREFIX}/v0.2/samtools/sort_and_index"
\t\tsamtools view -Sb - \\
\t\tmodule add samtools/1.10
\t\tsamtools sort \\
\t\tmodule add samtools/1.10
\t\tsamtools index \\
\t\tsamtools sort -m 2G -@ 5 -T {output}.tmp -o {output} {input} 2> {log}
\t\tsamtools index {input}
"0.73.0/bio/samtools/index"
\t\t\t}}\' | sed "s/\\(.*\\) \\(.*\\)\\ \\(.*\\)/\\\\1:\\\\2-\\\\3/g" |  xargs samtools faidx {input[2]} \\
\t\t\tgrep -vf {sample}/{wildcards.sequence}.tigs.toremove {input[1]} | cut -f1 | xargs samtools faidx {input[2]} >> {output[0]}
\tshell: "sort -k2,2gr {input[1]} | awk \'{{if ($2 > {wildcards.contig_cutoff}) print $1}}\' | xargs samtools faidx {input[0]} > {output}"
\t\tcut -f1 {input[1]} | xargs -n 1 -I foo sh -c \'touch {output[0]}/foo; samtools faidx {input[0]} foo > {output[1]}/foo.fa\'
\t\t"bwa index {input[0]}; bwa mem -t {threads} {input} | samtools sort --threads {threads} > {output}"
\t\t\tsamtools faidx {input[0]} foo > {sample}/3.circularization/1.candidate_genomes/foo.fa
\t\t(samtools idxstats {input[0]} | grep {wildcards.tig} | awk \'{{if ($2 > 50000) print $1, ":", $2-50000, "-", $2; else print $1, ":", 1, "-", $2 }}\' | tr -d \' \';
\t\t samtools idxstats {input[0]} | grep {wildcards.tig} | awk \'{{if ($2 > 50000) print $1, ":", 1, "-", 50000; else print $1, ":", 1, "-", $2 }}\' | tr -d \' \') |
\t\txargs -I foo sh -c \'samtools view -h {input[0]} foo | samtools fastq - || true\' | paste - - - - | sort | uniq | tr \'\\t\' \'\
\t\t\ttrim_cmd = \'samtools faidx \' + input[1] + \' \' + trim + " > " + params.outfa + "\
\t\t\t\textend_cmd = \'samtools faidx \' + input[3] + \' \' + extend + " | grep -v \'>\'" + " >> " + params.outfa + "\
\t\t\ttrim_cmd = \'samtools faidx \' + input[1] + \' \' + trim + " > " + params.outfa + "\
\t\tcut -f1 | xargs samtools faidx {input[0]}; ls {sample}/3.circularization/3.circular_sequences/* | grep .fa$ | xargs cat) |
\t\t"minimap2 -t {threads} -ax map-ont {input} | samtools sort --threads {threads} > {output}"
\t\t"samtools index {input}"
\tshell: "samtools faidx {input}"
"{input.splice_sites} -1 {input.forward} -2 {input.reverse} | samtools view "
"samtools sort -o {output} {input}"
"samtools index {input}"
index=rules.samtools_index.output
index=rules.samtools_index.output,
index=rules.samtools_index.output,
index=rules.samtools_index.output,
index=rules.samtools_index.output,
index=rules.samtools_index.output
"/c8000xd3/rnaseq-heath/bin/samtools idxstats {input.bam} > {output}"
"../envs/samtools.yaml"
"""samtools sort -o {output.bam} {input.bam}
samtools index {output.bam}"""
"samtools view -Shb - > {output}) 2> {log}"
"samtools merge -@ {threads} {params} {output} {input.lane1} {input.lane2} {input.lane3} {input.lane4}"
SAMPLE_OUTPUT_DIR+"/logs/samtools/sort_sam/{sample}.log"
"samtools sort {params} -@ {threads} -O bam {input} > {output}"
"samtools index {input}"
"samtools index {input}"
"samtools view -b -F 1294 {input}> {output}"
"samtools view -h {input} | "
"samtools view -Sb - > {output}"
samtools sort {input.unsorted_discordants_bam} -o {output.discordants_bam}
samtools index {output.discordants_bam}
samtools sort {input.unsorted_splitread_bam} -o {output.splitread_bam}
samtools index {output.splitread_bam}
sort="samtools",             # Can be \'none\', \'samtools\' or \'picard\'.
sort_extra=""            # Extra args for samtools/picard.
"0.73.0/bio/samtools/index"
"0.73.0/bio/samtools/index"
"../env/samtools.yml"
samtools view {input.bam} --region-file {input.region} | cut -f 1 | sort | uniq > {output}
minimap2 -ax map-ont -t {threads} {input.fa} {input.fq} | samtools sort -@ 4 -m 4G > {output.bam}
samtools index -@ 4 {output.bam}
"minimap2 -ax sr {input.assembly_fasta} <(cat {input.unclassified_reads} {input.classified_reads}) | samtools view | cut -f 1,3 | gzip > {output}"
shell(\'samtools fastq --reference {input.reference_human} {input.cram_human} | grep "@M0" | sed "s/@//" | gzip > {output.list_human}\')
shell(\'samtools fastq --reference {input.reference_bacterial_1} {input.cram_bacterial_1} | zgrep "@M0" | sed "s/@//" | gzip > {output.list_bacterial_1}\')
shell(\'samtools fastq --reference {input.reference_bacterial_2} {input.cram_bacterial_2} | zgrep "@M0" | sed "s/@//" | gzip > {output.list_bacterial_2}\')
shell(\'samtools fastq --reference {input.reference_bacterial_3} {input.cram_bacterial_3} | zgrep "@M0" | sed "s/@//" | gzip > {output.list_bacterial_3}\')
shell(\'samtools fastq --reference {input.reference_bacterial_4} {input.cram_bacterial_4} | zgrep "@M0" | sed "s/@//" | gzip > {output.list_bacterial_4}\')
shell(\'samtools fastq --reference {input.reference_bacterial_5} {input.cram_bacterial_5} | zgrep "@M0" | sed "s/@//" | gzip > {output.list_bacterial_5}\')
shell(\'samtools fastq --reference {input.reference_fungal} {input.cram_fungal} | zgrep "@M0" | sed "s/@//" | gzip > {output.list_fungal}\')
"samtools merge {output.bam_merge} {input.bam} "
bowtie2 --no-unal -p {threads} -1 {input.fastq_1} -2 {input.fastq_2}  --un-conc-gz {wildcards.outdir}/cleaned/{wildcards.sample_id}_%.fastq.gz --no-discordant --end-to-end -x {params.prefix} 2> {log} | samtools view -b > {output.bam}
bowtie2 --no-unal -p {threads} -1 {input.fastq_1} -2 {input.fastq_2}  --un-conc-gz {wildcards.outdir}/unmapped/circrna/{wildcards.sample_id}_%.fastq.gz --no-discordant --end-to-end -x {params.prefix} 2> {log} | samtools view -b > {output.bam}
samtools sort --threads {threads} {input.bam} > {output.bam}
samtools index  {output.bam}
samtools mpileup -l {input.positions} --reference {input.genome} {input.bam}  | awk \'$5~/[ACGTacgt]/{{print}}\' > {output.pileup}
"gunzip -c {input} > {output[0]}; samtools faidx {output[0]}"
"samtools depth -r{wildcards.chr} -Q{params.qual} -m {params.maxd} {input.bam} 2>> {log}"
"samtools depth -Q {params.qual} -m {params.maxd} -r {wildcards.chr} -a {input[0]} "
"samtools depth -Q {params.qual} -m {params.maxd} -r {wildcards.chr} -a {input[0]}"
"minimap2 -t {threads} -ax splice -k14 -uf --secondary=no {input.index} {input.fastq} | samtools view -Sb | samtools sort - -o {output.bam}"
"samtools flagstat {input} > {output}"
\t\t"envs/samtools.yaml"
\t\t" samtools faidx {input.fasta} 2> {log} "
"logs/samtools/{ref}_faidx.log"
"v1.1.0/bio/samtools/faidx"
sorting="samtools",  # Can be \'none\', \'samtools\' or \'picard\'
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.52.0/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
sort="samtools",
"0.52.0/bio/samtools/index"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"0.73.0/bio/samtools/index"
"(hisat2 --threads {threads} -x {params.idx} {params.extra} -1 {input.r1} -2 {input.r2} | samtools view -Sbh -o {output}) 2> {log}"
"0.73.0/bio/samtools/index"
shell("samtools faidx {output.ref}")
shell("samtools faidx {input} {params.chr} > {params.newfasta}")
conda: "envs/samtools.yaml"
shell: "samtools view -S -b {input} > {output}"
conda: "envs/samtools.yaml"
shell: "samtools index {input}"
conda: "envs/samtools.yaml"
shell: "samtools sort -O BAM {input} > {output}"
conda: "envs/samtools.yaml"
shell: "samtools stats {input} > {output}"
shell: "samtools view -h {input} > {output}"
conda: "envs/samtools.yaml"
shell: "samtools sort -O BAM {input} > {output}"
conda: "envs/samtools.yaml"
shell: "samtools stats {input} > {output}"
shell: "samtools view -h {input} > {output}"
conda: "envs/samtools.yaml"
shell: "samtools view -h {input[0]} chrM > {output}"
conda: "envs/samtools.yaml"
shell: "samtools sort -O BAM {input} > {output}"
conda: "envs/samtools.yaml"
shell: "samtools stats {input} > {output}"
shell: "samtools view -h {input} > {output}"
shell: "samtools view -h http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/HGDP/data/{wildcards.population}/{wildcards.individual}/alignment/{wildcards.individual}.alt_bwamem_GRCh38DH.20181023.{wildcards.population}.cram chrM > BERGSTROEM2020/{wildcards.population}/{wildcards.individual}_mt.sam"
shell("samtools view -h "+FTP_1000G[wildcards.individual]+" chrM > "
conda: "envs/samtools.yaml"
shell: "samtools faidx {input}"
conda: "envs/samtools.yaml"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
\t\tminimap2 -a -x {params.minimap_x} -t {threads} {input.assembly} {input.fw} {input.rv} | samtools sort -l 0 --threads {threads} | bedtools genomecov -d -ibam stdin | awk \'{{t += $3}} END {{print t/NR}}\' 1>{output} 2>{log}
\t\tminimap2 -a -x {params.minimap_x} -t {threads} {input.assembly} {input.reads} | samtools sort -l 0 --threads {threads} | bedtools genomecov -d -ibam stdin | awk \'{{t += $3}} END {{print t/NR}}\' 1>{output} 2>{log}
f"samples/{sample}/logs/samtools/index/whatshap/{sample}.{ref}.{{movie}}.log",
"envs/samtools.yaml"
"(samtools index -@ 3 {input}) > {log} 2>&1"
f"samples/{sample}/logs/samtools/merge/{sample}.{ref}.haplotag.log",
"envs/samtools.yaml"
"(samtools merge -@ 7 {output} {input}) > {log} 2>&1"
f"samples/{sample}/logs/samtools/index/whatshap/{sample}.{ref}.log",
"envs/samtools.yaml"
"(samtools index -@ 3 {input}) > {log} 2>&1"
samtools fasta -@ {threads} -o {output.fasta} {input.reads}
bowtie2  --very-sensitive -p 1 -k 10  -x data/mydatalocal/bowtie2/all -1 {input.r1}  -2 {input.r2} | samtools view -q 2 -bS  -  |  samtools sort - -o {output.aln}
samtools index -b {output.aln}
samtools index -b {output.aln_clean}
samtools view -@ {params.threads} -Sbh {params.bam} | samtools sort -@ {params.threads} > {output}; samtools index {output}; rm {params.bam}
"envs/samtools.yaml"
"samtools bam2fq -1 {output[0]} -2 {output[1]} "
"<(samtools view -b -s{params.seed}.2 {params.url} chr{wildcards.chrom})"
sort="samtools",
"0.27.1/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.27.1/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
| samtools sort - \\
samtools index {output.bam}
vcf = "030.samtools/snps.vcf",
vcf = "030.samtools/snps.vcf"
samtools view -@ {threads} -uS - | \\
samtools sort -@ {threads} - \\
samtools index -@ {threads} {params.out_dir}/coverage.bam > {log} 2>&1
\t\t\t{input.read1} 2> {log}| {samtools} sort \\
\t\t\t{input.read2} 2> {log} | {samtools} sort \\
\t\t"logs/samtools/bamindex/{sample}.log"
\t\t"0.74.0/bio/samtools/index"
\t\t"logs/samtools/bamindex/{sample}.log"
\t\t"0.74.0/bio/samtools/index"
\t\t"Creating samtools fai index for the reference genome..!!"
\t\t"logs/samtools/reference_index.log"
\t\t"0.74.0/bio/samtools/faidx"
\t\t| samtools view -Sb - > {output[0]}
samtools flagstat {input} > {output} 2> {log}
\t\tsamtools view -h {input} | samblaster --removeDups \\
\t\t| samtools view -Sb -F 4 - \\
\t\t| samtools sort -m 2G -@ 5 -T {input}.tmp -o {output[0]}
\t\tsamtools index {output[0]}
samtools flagstat {input} > {output} 2> {log}
| samtools sort -@ 4 > {output.bam}
samtools index {output.bam}
samtools merge -@ 4 - {input.bam} \\
| samtools sort -@ 4 -n \\
| samtools fixmate -m -@ 4 - - \\
| samtools sort -@ 4 \\
| samtools markdup -@ 4 -f {output.md} - {output.bam}
samtools index -@ 4 {output.bam}
samtools stats -@ 4 {output.bam} > {output.stats}
| samtools sort -@ 4 > {output.bam}
samtools index {output.bam}
| samtools sort -@ 4 > {output.bam}
samtools index {output.bam}
" | samtools sort -@ {params.threads} -o {output.bam} -"
" && samtools index {output.bam}"
" && samtools index {output.bam_dedup}"
"samtools view -@ {resources.cpus_per_node}"
" > {output.prefilt_bam} && samtools index {output.prefilt_bam} && "
"samtools sort -@ {resources.cpus_per_node} -o {output.filt_sort_bam}"
" {output.filt_bam} && samtools index {output.filt_sort_bam}"
"samtools merge -@{resources.cpus_per_node}"
"samtools index -@{resources.cpus_per_node} {output.merged_bam}"
samtools view -q {params.mq} -b {input} | samtools sort > {output[0]} 2>log/{wildcards.sample}_minimap_sort.err
samtools index {output[0]} 2>log/{wildcards.sample}_minimap_index.err
samtools view -q {params.mq} -b {input} | samtools sort > {output[0]} 2>log/{wildcards.sample}_minimap_sort_hpv.err
samtools index {output[0]} 2>log/{wildcards.sample}_minimap_index_hpv.err
module load samtools
bwa-mem2 mem -t {resources.cpus} {input.assembly} {input.reads} | samblaster -r | samtools view -b - > {output}
"module load samtools && samtools sort -m 2G -@ {resources.cpus} -O bam {input} > {output}"
"module load samtools && samtools index -@ {resources.cpus} {input}"
check=rules.samtools_index.output, # not used in the command, but it\'s here so snakemake knows to run the rule after the indexing
bam=rules.samtools_sort.output
bam = rules.samtools_sort.output,
bam_bai = rules.samtools_index.output # not used in the command, but it\'s here so snakemake knows to run the rule after the indexing
module load freebayes samtools vcflib/gcc/64/0.00.2019.07.10
\t\tminimap2 -x asm5 -t {threads} --MD -a {input.ref} {input.assembly} 2>{log} | samtools sort -o {output} - >>{log} 2>&1
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.bam}.flagstat
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.fla}
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.fla}
\t\tbwa mem -t 4 {params.idx} {input.R1} {input.R2} | samtools sort -@4 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.bam}.flagstat
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.fla}
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.fla}
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.bam}.flagstat
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.fla}
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tsamtools index {output.bam}
\t\tsamtools flagstat {output.bam} > {output.bam}.flagstat
conda: "./envs/samtools.yaml"
samtools view -@ {threads} -b -u -q 30 {input} | \\
samtools sort -@ {threads} -n -o {output} -
conda: "./envs/samtools.yaml"
samtools fixmate -@ {threads} -r -m {input} - 2> {log} | \\
samtools sort -@ {threads} -o {output.fixmate_bam} - 2> {log}
samtools index -@ {threads} {output.fixmate_bam} 2> {log}
conda: "./envs/samtools.yaml"
samtools markdup -@ {threads} -r -s {input} - 2> {log} | \\
samtools sort -@ {threads} -o {output.dedup_bam} - 2> {log}
samtools index -@ {threads} {output.dedup_bam} 2> {log}
samtools view -@ {threads} -b -f 3 -F 4 {output.dedup_bam} {params} | \\
samtools sort -@ {threads} -o {output.final_bam} - 2> {log}
samtools index -@ {threads} {output.final_bam} 2> {log}
conda: "./envs/samtools.yaml"
samtools flagstat {input} > {output} 2> {log}
conda: "./envs/samtools.yaml"
samtools flagstat {input} > {output} 2> {log}
conda: "./envs/samtools.yaml"
samtools idxstats {input} | cut -f 1,3 > {output}
sort="samtools",
"0.27.1/bio/samtools/index"
"samtools merge -@ {threads} {output.bam} {input.bam}"
\'samtools index {input.bam}; \'
\'bedtools intersect -abam {input.bam} -b {input.peaks} -u | samtools view -f2 | \'
\' samtools view -f2 {input.bam}| \'
"samtools sort -@ {threads} -o {output.bam_sorted} {output.bam} &&"
"samtools index {output.bam_sorted} && "
\'ls *.bam | while read line; do samtools index $line; done\'
\'samtools merge -@ {threads} -o results/encode/download/encode_merged.bam `ls *.bam`; \'
\'samtools index results/encode/download/encode_merged.bam; \'
\'bedtools intersect -abam {input.bam} -b {input.peaks} -u | samtools view -f2 | \'
\' samtools view -f2 {input.bam}| \'
\'samtools merge -o {output} -@ {threads} {input}\'
\'samtools index {input}\'
'samtools merge {input.fragments} -o {output.bam}; '
'samtools index {output.bam}'
'samtools merge {input.fragments} -o {output.bam}; '
'samtools index {output.bam}'
\'bedtools intersect -abam {input.bam} -b {input.peaks} -u | samtools view -f2 | \'
\' samtools view -f2 {input.bam}| \'
-1 {input.Trim_read1} -2 {input.Trim_read2} 2> {log.bowtie2} | samtools view -bS - > {output[0]}
samtools index {output.sortedBam}
samtools flagstat {input.sortedbam} &>> {log.flagstat}
Prop_paired=config[\'samtools_proper_paired\'],
Mapq10=config[\'samtools_mapq\'],
samtools view -bu {params.Prop_paired} {input.sortedbam} | samtools view -b {params.Mapq10} - | samtools sort - -o {output[0]} &>> {log}
samtools flagstat {output.NoDupsBam} &>> {log}
samtools index {output.NoDupsBam}
samtools index {output[0]}
-1 {input.Trim_read1} -2 {input.Trim_read2} 2> {log.Spike_bowtie2} | samtools view -Sb - > {output[0]}
samtools index {output[1]}
samtools flagstat {input.S_sorted_bam} &>> {log.S_flagstat}
samtools view -1 - > {output}
samtools view -f 12 -F 256 2> {log.other}| \\
samtools sort -T {temp_dir} -@ {threads} -n 2> {log.other} | \\
samtools view -bS 2> {log.other} | \\
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
\t\tsamtools depth -a {input} > {output.cov}\t
\t\tsamtools idxstats {input.bam} > {output}
\t\tsamtools view -b {input.bam}|genomeCoverageBed -ibam stdin|grep -v \'genome\'| perl scripts/coverage_counter.pl > {output}\t
\t\tsamtools view -bT {params.target} {input} > {output.bam}
\t\tsamtools sort -o {output.sorted} {output.bam}
\t\tsamtools index {output.sorted} {output.bai}
samtools_path = config['paths']['samtools_path']
'{params.samtools_path} faidx {input}'
| samtools view -b - \\
config['samtools_sort']['threads']
samtools_path = config['paths']['samtools_path'],
mem = config['samtools_sort']['mem']
{params.samtools_path} sort \\
-T {input}.samtools_sort.tmp \\
config['samtools_index']['threads']
samtools_path = config['paths']['samtools_path']
{params.samtools_path} index \\
{rules.samtools_faidx.output},
{rules.samtools_faidx.output},
samtoolsfaidx = "results/GCA_000009885.1_ASM988v1_genomic.fna.fai"
samtools faidx {input.genome}
bwa mem -t {threads} {input.genome} {input.read1} {input.read2} | samtools view -u -F 4 -q 30 -@ {threads} | samtools sort -O BAM -o {output.alignedBAM} -@ {threads}
samtoolsfaidx = rules.samtools_faidx.output.samtoolsfaidx
config[\'modules\'][\'samtools\'],
samtools sort \\
samtools index -@ {threads} {output.outbam}
samtools idxstats {output.outbam} > {output.idxstat}
config[\'modules\'][\'samtools\']
samtools view \\
samtools index {output.bam}
samtools idxstats {output.bam} > {output.idxstat}
config[\'modules\'][\'samtools\']
samtools view -b -@ {threads} -F 1024 -o {output.dedup_bam} {input.bam}
samtools index {output.dedup_bam}
config[\'modules\'][\'samtools\']
samtools index {output.bam}
samtools idxstats {output.bam} > {output.idxstat}
config[\'modules\'][\'samtools\']
config[\'modules\'][\'samtools\'],
samtools sort -@ {threads} -n -o {output.bam} {input}
config[\'modules\'][\'samtools\']
samtools view -H {input} | perl -ne \'if(/^@SQ.*?SN:(\\w+)\\s+LN:(\\d+)/){{print $1,"\\\\t",$2,"\\\
Run samtools view to remove supplementary alignments (no bit set in SAM flag 2304 / -F 2304).
config[\'modules\'][\'samtools\']
samtools view -@ {threads} -F 2304 -b -o {output} {input}
\t\t"envs/samtools.yaml"
\t\t\'samtools flagstat \'
\t\t\'samtools view -@ {threads} -bS - | \'
\t\t\'samtools sort -@ {threads} -o {output} -\'
\t\t\'samtools view \'
\t\t\'samtools sort \'
sort="samtools",
"0.27.1/bio/samtools/index"
"../envs/samtools.yaml"
"../envs/samtools.yaml"
"samtools index -@ {threads} maplink/{params.prefix}"
config["samtools"],
samtools faidx {input.genome_fa}
"bwa mem {input} | samtools view -Sb - > {output}"
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"
"samtools index {input}"
"samtools stats {input} | grep ^SN | cut -f 2- > {output}"
"samtools sort {input} -o {output}"
"samtools index {input}"
"samtools stats {input} | grep ^SN | cut -f 2- > {output}"
"samtools index {input}"
"samtools stats {input} | grep ^SN | cut -f 2- > {output}"
"samtools sort {input} -o {output}"
"samtools index {input}"
"samtools stats {input} | grep ^SN | cut -f 2- > {output}"
shell: "samtools index {input}"
"samtools faidx {input}"
| samtools view -Sb -F 4 - \\
| samtools sort -m 2G -@ 5 -T {output[0]}.tmp -o {output[0]}
samtools index {output[0]}
| samtools view -Sb -F 4 - \\
| samtools sort -m 2G -@ 5 -T {output[0]}.tmp -o {output[0]}
samtools index {output[0]}
| samtools view -Sb -F 4 - \\
| samtools sort -m 2G -@ 5 -T {output[0]}.tmp -o {output[0]}
samtools index {output[0]}
| samtools view -Sb -F 4 - \\
| samtools sort -m 2G -@ 5 -T {output[0]}.tmp -o {output[0]}
samtools index {output[0]}
samtools flagstat {input} > {output} 2> {log}
shell("sambamba view -f bam -t 5 --subsampling-seed=3 -s {rate} {inbam} | samtools sort -m 2G -@ 5 -T {outbam}.tmp > {outbam} 2> {log}".format(rate = down_rate, inbam = input[0], outbam = output[0], log = log))
shell("samtools index {outbam}".format(outbam = output[0]))
samtools sort -n -m 2G -@ {threads} -T {wildcards.sample} \\
(samtools view \\
samtools sort \\
-v norm_factor=$(samtools view -c {input.bam} | \\
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
\t\tsamtools view -Sb - \\
\t\tmodule add samtools/1.10
\t\tsamtools sort \\
\t\tmodule add samtools/1.10
\t\tsamtools index \\
\'{sn}/host_removal/{sn}_samtools_fastq.log\'
samtools view -b {input} | samtools sort -n -@{threads} > {output.bam} 2> {log}
samtools fastq -1 {output.r1} -2 {output.r2} -s {output.s} {output.bam} 2>> {log}
\'samtools view -bS | samtools sort -@{threads} -o {output}) 2> {log}\'
\'samtools view -F4 -o {output.mapped_bam} {input}; \'
\'samtools index {output.mapped_bam}; \'
\'samtools sort -o {output.sorted_trimmed_mapped_bam} \'
\'{sn}/mapped_clean_reads/{sn}_samtools_fastq.log\'
samtools sort -n {input} -o {output.bam} 2> {log}
samtools fastq -1 {output.r1} -2 {output.r2} -s {output.s} {output.bam} 2>> {log}
\'(samtools mpileup -aa -A -d {params.mpileup_depth} -Q0 {input} | \'
\'samtools faidx {input}\'
\'(samtools mpileup -aa -A -d 0 --reference {input.reference} -B \'
"samtools index {input}"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
\'samtools faidx {input}\'
OUTPUT_DIR + "/logs/samtools/sorted/{sample}.log"
"(samtools view -h {input} | scripts/read_count_bam.pl | samtools view -Su -q30 - | samtools sort -O BAM -o {output} -) 2>> {log}"
OUTPUT_DIR + "/logs/samtools_index/{sample}.log"
"v0.75.0/bio/samtools/index"
samtools idxstats $(ls {input.bam} | head -n 1) | grep -v "*" | cut -f1 >> {output}
samtools idxstats {input.bam} | grep -v "*" | cut -f3 >> {output}
samtools view -b -o {output} > {log} 2>&1
samtools index {output}
expand("Analysis/samtools/{seqid}.flagstat", seqid=file_dict.keys()),
"Analysis/samtools/{seqid}.flagstat"
"samtools flagstat {input} > {output}"
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.1000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.10000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.500000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.1000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.10000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.500000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.1000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.10000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.100000_window.bed", sample=config["samples"]),
expand("{sample}/analysis/coverage/samtools_depth/{sample}.depth.500000_window.bed", sample=config["samples"]),
"0.42.0/bio/samtools/stats"
module load samtools
"seqtk", "bowtie2", "samtools", "metabat", "gcc"
samtools view -@ {threads} -Sbq 30 out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/scaffolds.1000.sam > out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/scaffolds.1000.bam
samtools sort -@ {threads} out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/scaffolds.1000.bam > {output.bam}
samtools index -@ {threads} {output.bam}
"samtools", "python3/3.7.0", "concoct/1.1.0-py37", "gcc", "compat"
samtools index {input.bam}
"bwa", "samtools", "gcc"
bwa samse {input.ref} out/human/{wildcards.sample}/{wildcards.sample}.mito.sai {input.reads} | samtools view -q 30 -bSh > out/human/{wildcards.sample}/{wildcards.sample}.mito.bam
samtools sort -@ {threads} out/human/{wildcards.sample}/{wildcards.sample}.mito.bam -o {output.mito}
samtools index {output.mito}
"bwa", "samtools", "gcc"
bwa samse {input.ref} out/human/{wildcards.sample}/{wildcards.sample}.auto.sai {input.reads} | samtools view -q 30 -bSh > out/human/{wildcards.sample}/{wildcards.sample}.auto.bam
samtools sort out/human/{wildcards.sample}/{wildcards.sample}.auto.bam -o {output.human_reads}
samtools index {output.human_reads}
"mapdamage", "samtools", "python3", "R/3.5.1", "gcc"
samtools index {output.rescaled_mito}
samtools index {output.rescaled_auto}
"python2", "samtools", "R/3.5.1", "gcc" ## Note for Myriam #"miniconda/4.8.3"
samtools index {input.bam}
samtools view {input.bam} | python2 src/scripts/skoglund_xy.py > {output.skglnd_sex}
samtools idxstats {input.bam} > out/human/{wildcards.sample}/{wildcards.sample}.auto.idxstats
"schmutzi", "gcc", "samtools"
samtools calmd -b {input.human_mito} {input.rCRS} > {output.md_bam}
samtools index {output.md_bam}
"samtools", "gcc", "yhaplo", "bcftools"
"samtools", "bcftools", "gcc"
"samtools", "R"
mito=$(samtools view -c -F 260 {input.mito} )
auto=$(samtools view -c -F 260 {input.auto} )
\t\tmodules[\'samtoolsVer\']
\t\tsamtools view -b {input} > {output}
\t\tmodules[\'samtoolsVer\']
\t\tsamtools view -@ 4 -bq 5 {input} > {output}
\t\tmodules[\'samtoolsVer\']
\t\tsamtools view -@ 4 -bF 0x400 {input} > {output.bam} &&
\t\tsamtools index {output.bam} {output.index}
\t\tmodules[\'samtoolsVer\']
\t\tsamtools idxstats {input.bam} | \\
\t\tmodules[\'samtoolsVer\']
\t\tsamtools sort -@ {threads} -o {output.bam} {input}
\t\tsamtools index {output.bam}\t
\t\tmodules[\'samtoolsVer\']
\t\tsamtools sort -n {input} -o {output}
\t\tspikeCount=$(samtools view -c {input.spike})
"{samtools} view -S -b {input.alignment_sam} > {output.alignment_bam}"
"{samtools} sort -o {output.sorted_alignment_bam} {input.alignment_bam}"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
" | samtools sort -O bam -m {params.memory} -@ {params.sort_threads} -o {output.bam} -) 2>{log} ;"
" samtools index {output.bam} 2>{log} "
" samtools index {output.filtered_bam} ; ) 2>{log} "
conda: "envs/samtools.yml"
samtools faidx {input}
bwa mem -t {threads} {input.ref_nuc_cds} {input.nuc_noncoding} | samtools sort -o {output} -
samtools view -h {input} | samtools stats | grep \'^SN\' | cut -f 2- > {output}
bwa mem -t {threads} {input.ref_nuc_cds} {input.nuc_coding} | samtools sort -o {output} -
samtools view -h {input} | samtools stats | grep \'^SN\' | cut -f 2- > {output}
"envs/samtools.yaml"
samtools view -b -h -@ {threads} -T {input[0]} -o {output.bam_file} {input.cram_file}
samtools index -@ {threads} {output.bam_file}
"envs/samtools.yaml"
python2 /usr/local/bin/manta/libexec/convertInversion.py /usr/local/bin/samtools {input[0]} {params.manta_run_dir}/results/variants/diploidSV.vcf.gz | bcftools reheader -s <(echo "{params.sample}") > {params.manta_run_dir}/results/variants/diploidSV.vcf
"envs/samtools.yaml"
"envs/samtools.yaml"
"0.66.0/bio/samtools/faidx"
samtoolsver=config[\'bin\'][\'SAMTOOLSVER\'],
module load {params.samtoolsver};
bowtie2 -p {threads} --dovetail --phred33  --very-sensitive -x {params.reference}  -1 {input.file1} -2 {input.file2}  | samtools view -bS - |  samtools sort -@{threads} -o {output.outbam1};
samtools index {output.outbam1};
samtools flagstat {output.outbam1} > {output.flagstat1};
samtoolsver=config[\'bin\'][\'SAMTOOLSVER\'],
commoncmd="module load {params.samtoolsver}; "
cmd1="samtools view -bh -@{threads} {input.bam} "+ " ".join(params.chrs)+" -o {output.outbam1}; samtools index {output.outbam1}; samtools flagstat {output.outbam1} > {output.outstats1}; "
cmd2="samtools view -bh -@{threads} {input.bam} {params.spikeinchrs} -o {output.outbam2}; samtools index {output.outbam2}; samtools flagstat {output.outbam2} > {output.outstats2}; "
cmd3="samtools view -h {output.outbam1} | LC_ALL=C awk -f {params.kseqbin}/filter_below.awk | samtools view -Sb - >{output.outbam3}; samtools index {output.outbam3}; samtools flagstat {output.outbam3} > {output.outstats3} "
samtoolsver=config[\'bin\'][\'SAMTOOLSVER\'],
commoncmd="module load {params.samtoolsver};module load {params.rver};"
cmd="samtools view -b -f 66 -o /lscratch/$SLURM_JOBID/bam1.f66.bam {input.bam}; \\
samtools index /lscratch/$SLURM_JOBID/bam1.f66.bam; \\
samtoolsver=config[\'bin\'][\'SAMTOOLSVER\'],
samtoolsver=config[\'bin\'][\'SAMTOOLSVER\'],
module load {params.samtoolsver}
samtoolsver=config[\'bin\'][\'SAMTOOLSVER\'],
module load {params.samtoolsver}
bwa mem {input.megares_db} {params.output_prefix_tmp}/{wildcards.sample}_r1_pe_trimmed.fq {params.output_prefix_tmp}/{wildcards.sample}_r2_pe_trimmed.fq 2>> {log} | samtools sort -n -O sam > {params.output_prefix_tmp}/{wildcards.sample}.sam 2>>{log}
\'conda_env/samtools_installed\',
\'conda_env/samtools_installed\'
conda: \'conda_env/samtools.yml\'
conda: \'conda_env/samtools.yml\'
conda: \'conda_env/samtools.yml\'
\'samtools view -buS -f 2 -F 4 -@32 {input} | \'
\'samtools fixmate -m - - | \'
\'samtools sort -@32 -o {output.bam} && samtools index {output.bam} \'
conda: \'conda_env/samtools.yml\'
\'samtools merge {output.bam} {input} && \'
\'samtools index -@ {threads} {output.bam} && \'
\'samtools stats -@ {threads} {output.bam} > {output.bam_stat} \'
conda: \'conda_env/samtools.yml\'
\'samtools view -b -f 2 -F 2828 --threads {threads} {input} > {output.bam} && \'
\'samtools index -@ {threads} {output.bam} && \'
\'samtools stats -@ {threads} {output.bam} > {output.bam_stat} \'
conda: \'conda_env/samtools.yml\'
\'samtools flagstat {input} > {output}\'
conda: \'conda_env/samtools.yml\'
conda: \'conda_env/samtools.yml\'
\'samtools view -b -F 0x900 {input.bam} {wildcards.chromosome} | samtools sort -T /tmp/ -n - | bedtools pairtobed -abam stdin -b {input.signature} -bedpe > {output}\'
conda: \'conda_env/samtools.yml\'
samtools index \\
samtools sort \\
samtools index \\
samtools mpileup \\
samtools depth \\
"minimap2 -t {threads} -K 1G -a -x map-ont {params.reference} {input.fasta}|samtools sort -@ {threads} -O bam -o {output.bam};"
"samtools index {output.bam};"
"samtools depth {input} |awk -v OFS=$\'\\t\' \'$3>1 {{print $1,$2,$2+1;}}\'|"
"samtools view -h -f 0x4 {input}|samtools fasta |bgzip>{output}"
"minimap2 -a -x map-ont {params.reference} {input} |samtools sort -o {output.bam};"
"samtools index {output.bam}"
"samtools view -h -F 0x100  {input.bam} |bedtools bamtobed|"
\t\t"unset TMPDIR; module load samtools; samtools index {input}"
\t\t"unset TMPDIR; module load samtools; samtools index {input}"
samtools index {output}
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
samtools view tmpge.bam |perl -F"\\\\t" -ane \'print "$F[0]\\\\t$1\\\
samtools view {input}|perl -ne \'print "$2\\\\t$3\\\\t$1\\\
minimap2 -v1 -t {threads} -2 -ax splice --MD -ub {input.ref_genome} {input.fq} | samtools sort - -@{threads} -T {params.tmp} -o {output.bam}
samtools index -@{threads} {output.bam}
python pipelines/simreads.py {input.barcode} {input.feature} {input.matrix} {params.num} {params.umilength} {params.cdnaseq} | samtools view -bS > {output}
samtools view {input.bam} | perl -ne \'print ">",++$j,"\\\
perl pipelines/fa2sam.pl {input.sim} {input.barcode} {params.readlen} {params.cdnalength} | samtools view -bS > {output}
samtools view {input.bam} | perl pipelines/gtruth.pl {input.sim}.fa {params.adapterlength} {params.barcodelength} {params.umilength} {input.gene} > {output.barcode}
"minimap2 -ax map-ont -t {threads} {input.ref} {input.reads} | samtools sort -T {wildcards.sample} > {output}"
"samtools index {input}"
"minimap2 -ax map-ont -t {threads} {input.ref} {input.reads} | samtools sort -T {wildcards.sample} > {output}"
"samtools index {input}"
"samtools view -F 4 {input.bam} | python3 {config[strique]} count {input.index} {config[strique_pore_model]} {input.config} --out {output} --t {threads}"
\'samtools view -bS - > {output}\'
\'samtools view {input} | sam2pairwise > {output}\'
"samtools view {input} | awk \'{{print $12}}\' > {output}"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
samtools view -Shb -o {output}
samtools flagstat {input} > {output}
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
module load samtools
bwa-mem2 mem -t {resources.cpus} {input.assembly} {input.reads} | samblaster -r | samtools view -b - > {output}
\tinput: get_ref, get_data_as_input, samtools
\t\t"bowtie2 --norc -a -p {threads} -I 1 -X 700 --no-mixed --no-discordant -x {input[0]} -1 {params.mate1} -2 {params.mate2} 2> {log} | {samtools} view -S -b -o {output} -"
\tinput: get_ref, get_data_as_input, samtools
\t\t"bowtie2 --norc -p {threads} -I 1 -X 700 --no-mixed --no-discordant -x {input[0]} -1 {params.mate1} -2 {params.mate2} 2> {log} | {samtools} view -S -b -o {output} -"
\tinput: get_ref, get_data_as_input, samtools
\t\t"bowtie2 --norc -k 1 -p {threads} -I 1 -X 700 --no-mixed --no-discordant -x {input[0]} -1 {params.mate1} -2 {params.mate2} 2> {log} | {samtools} view -S -b -o {output} -"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
samtools merge {output[0]} {input[0]} 2>log/merge_ccs.err
samtools merge {output[1]} {input[1]} 2>log/merge_subread.err
samtools sort {output[0]} -o {output[1]} 2>log/sort.err
samtools sort {output[1]} -o {output[2]} 2>log/sort2.err
samtools sort {output[0]} -o {output[1]} 2>log/{wildcards.sample}_sort.err
samtools sort {output[1]} -o {output[2]} 2>log/{wildcards.sample}_sort2.err
\t\tmodule load samtools/1.9
samtools sort -m 2G -@ {threads} -O bam -o {output} -
samtools view -b -h -f 3 -F 4 -F 8 -F 256 -F 1024 -F 2048 -q {params.min_mapq} {input.bam} | \\
samtools sort -m 2G -@ {threads} -O bam -o {output.pruned} -
samtools index {output.pruned}
sort="samtools",
"0.27.1/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.27.1/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
sort="samtools",
"0.27.1/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.27.1/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
cat {output.temp_dir}/{wildcards.sample}.alignment.sam | samtools view -f 12 -F 256 -b \\
cat {output.temp_dir}/{wildcards.sample}.alignment.sam | samtools view -f 2 -F 256 -b \\
samtools sort -T {output.temp_dir}/{wildcards.sample}.unmapped \\
samtools sort -T {output.temp_dir}/{wildcards.sample}.mapped \\
"qc/samtools_stats/{sample}.txt"
"0.17.0/bio/samtools/stats"
module = get_modules(["samtools", "winnowmap"]),
\t\t"samtools faidx {input}"
\t\tbwa mem -C -t{config[threads]} {input.contig} {input.linked_reads} | samtools sort -tBX -o {output} -@{config[threads]}
samtools view -Sbh --threads {threads} - > {output}
benchmark: "benchmarks/samtools_f4_{dataset}.txt"
samtools view -b -f 4 {input} > {output}
benchmark: "benchmarks/samtools_fastq_unmapped_{dataset}.txt"
samtools fastq -N -1 {output.r1} -2 {output.r2} {input}
samtools view -Sbh --threads {threads} - > {output}
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.59.2/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
"../envs/samtools_env.yaml"
"samtools index {input} {output}"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"samtools flagstat {input[0]} > {output}"
"samtools idxstats {input[0]} > {output}"
shell: "samtools index {input}"
shell("samtools merge -p -@ 8 {output} {input}")
samtools_threads = "9", samtools_memory = "4G",
samtools index {output}"""
samtools_threads = "9", samtools_memory = "1G"
samtools sort -@ {params.samtools_threads} -m {params.samtools_memory} -O bam -T $TMPDIR/{wildcards.lane} -o {output}
samtools index {output}"""
| samtools sort -@ {threads} -O bam - \\
samtools index -@ {threads} "{output}/"$i"/"$fname".bam"
"samtools flagstat {input} > {output}"
"samtools faidx {input} &> {log}"
"samclip --ref {input.fai} | samtools sort --threads {params.cpus} "
"samtools index {input} &> {log}"
"samtools index "
"samtools index "
\t\t"0.35.1/bio/samtools/sort"
\t\t"0.35.1/bio/samtools/index"\t\t
nreads=$(samtools view -c {input})
sambamba view -f bam -t 5 --subsampling-seed=42 -s $rate {input} | samtools sort -m 4G -@ 8 -T - > {output} 2> {log}
"0.35.1/bio/samtools/merge"
"0.35.1/bio/samtools/index"
\t\t| samtools view -q 2 -bs - | samtools sort - -o {output}
\t\tsamtools index -b {input.bam}
\t\tsamtools idxstats {input} > {output}
\tsamtools index -b {input}
\tsamtools idxstats {input} > {output}
"0.73.0/bio/samtools/index"
bwa mem -t {params.threads} {params.extra} {input.reference} {input.r1} {input.r2} | samtools sort -o {output} - >> {log} 2>&1
\t{FASTA_REFERENCE} {input.fastq} 2> {log.out} | samtools view -bS > {output}
\tsamtools sort -@{params.cpu} -o {output} {input}
\tsamtools index -@{params.cpu} {input}
"samtools view -bS | "
"samtools sort -@{threads} -o {output.bam} 2> {log}"
"samtools view -bS | "
"samtools sort -@{threads} -o {output.bam} 2> {log}"
"samtools view -bS {input.sam} | "
"samtools sort -@{threads} -o {output.bam} 2> {log}"
"envs/samtools.yaml"
"samtools bam2fq -1 {output[0]} -2 {output[1]} "
"<(samtools view -b -s{params.seed}.2 {params.url} chr{wildcards.chrom})"
\t\t{KRAKEN} --use-names --db {params.krakenDB} <(samtools view -b -f 4 {input} | samtools fasta) | gzip > {output}
\t\tpaste <(zcat {input.kraken}) <(samtools view -f 4 {input.bam} | grep -o -P \'(?<=CB:Z:).*(?=UB:Z:)\') <(samtools view -f 4 {input.bam} | grep -o -P \'(?<=UB:Z:).*\') | gzip > {output}
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"bwa mem -t {threads} {input} | samtools view -Sb - > {output}"
"samtools sort -o {output} {input}"
"samtools mpileup -g -f {input.fa} {input.bam} | "
"samtools faidx {input}"
"samtools faidx {input}"
"samtools faidx {input}"
"samtools faidx {input}"
| xargs samtools faidx {input.pep} \\
| xargs samtools faidx {input.pep} \\
"minimap2 -t {threads} -ax splice -k14 --secondary=no {input.index} {input.fastq} | samtools view -Sb | samtools sort - -o {output.bam}"
"samtools flagstat {input} > {output}"
"%s/samtools.yaml" %CONDAENV
"samtools index {input}"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
\t\t"fastqc --version; STAR --version; samtools --version; multiqc --version; "
\t\tos.path.join(outputdir, "logs", "samtools_index_{sample}.log")
\t\tos.path.join(outputdir, "benchmarks", "samtools_index_{sample}.txt")
\t\t"echo \'samtools version:\
\' > {log}; samtools --version >> {log}; "
\t\t"samtools index {input.bam}"
\t\t"samtools faidx {input}"
\t\t"samtools index {input.bam}"
\t\t"samtools view -f 128 -b -o {output} {input}"
\t\t"fastqc --version; STAR --version; samtools --version; multiqc --version; "
\t\tos.path.join(outputdir, "logs", "samtools_index_{sample}.log")
\t\tos.path.join(outputdir, "benchmarks", "samtools_index_{sample}.txt")
\t\t"echo \'samtools version:\
\' > {log}; samtools --version >> {log}; "
\t\t"samtools index {input.bam}"
"samtools sort -m 10G -n -T %s {input} | "
"samtools fastq -F 0xB00 -1 {output.forward} -2 {output.reverse} -"
samtools depth {input.tum} {input.norm} -b {input.bed} -q 10 -Q 10 |\\
"samtools index -@ {threads} {input} {output}"
"bwa mem {input} | samtools view -Sb - > {output}"
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"
"samtools mpileup -g -f {input.fa} {input.bam} | "
samtools view -1 - > {output.out}
"benchmarks/processbam/{prefix}.samtools_index.json"
"0.27.1/bio/samtools/index"
samtools sort -@ {threads} -O BAM -o {output} {input}
samtools index {input}
samtools index {input}
samtools view -H {input} > {output.bam_header}
samtools view -f 99 {input} | cat {output.bam_header} - | samtools view -Sb - > {output.bam_C1}
samtools view -f 147 {input} | cat {output.bam_header} - | samtools view -Sb - > {output.bam_C2}
samtools view -f 83 {input} | cat {output.bam_header} - | samtools view -Sb - > {output.bam_W1}
samtools view -f 163 {input} | cat {output.bam_header} - | samtools view -Sb - > {output.bam_W2}
samtools merge {output.bam_C} {input.bam_C1} {input.bam_C2}
samtools merge {output.bam_W} {input.bam_W1} {input.bam_W2}
samtools index {input.bam_C}
samtools index {input.bam_W}
"envs/samtools.yaml"
os.path.join(config["local_log"], "samtools_sort_{sample}.log")
"(samtools sort {input.bam} > {output.bam}) &> {log}"
"envs/samtools.yaml"
os.path.join(config["local_log"], "samtools_index_{sample}.log")
"(samtools index {input.bam} > {output.bai}) &> {log}"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
sort="samtools",
"logs/samtools/index/{prefix}.log",
"0.60.7/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt",
"logs/samtools-stats/{sample}-{unit}.log",
"0.60.7/bio/samtools/stats"
"qc/samtools-stats/{u.sample}-{u.unit}.txt",
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
samtools view -f 12 -F 256 -b \\
samtools sort -T {output.temp_dir}/{wildcards.sample} \\
"bwa mem {input} | samtools view -Sb - > {output}"
"samtools sort -T sorted_reads/{wildcards.sample} "
"samtools index {input}"'
\t\t\t-U {input.read1} | samtools view -Sb - > $mytmp/{wildcards.name}.bam
\t\tsamtools --version
\t\tsamtools sort -@ {threads} -m 10G -T $mytmp/{wildcards.name} -O BAM -o $mytmp/{wildcards.name}_sorted.bam $mytmp/{wildcards.name}.bam
\t\tsamtools view -@ {threads} -h -q 30 -F 0x904 -b $mytmp/{wildcards.name}_sorted.bam > $mytmp/{wildcards.name}_sorted_filtered.bam
\t\tsamtools index {output}
\t\t"samtools merge {output} {input} && samtools index {output}"
\t\t"fastqc --version; STAR --version; samtools --version; multiqc --version; "
\t\toutputdir + "logs/samtools_index_{sample}.log"
\t\toutputdir + "benchmarks/samtools_index_{sample}.txt"
\t\t"echo \'samtools version:\
\' > {log}; samtools --version >> {log}; "
\t\t"samtools index {input.bam}"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.52.0/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
sort="samtools",
"0.52.0/bio/samtools/index"
zcat {input.sam} | samtools view -b -o {output} - &> {log}
samtools sort -o {output.sorted_bam} -T {params.TMP} {input.bam} &> {log}
samtools merge {output.merged_bam} {input} &> {log}
samtools index {output.merged_bam} {output.merged_bam_index}
message: "Indexing {input.mt_n_fasta} with samtools faidx"
log: log_dir + "/{ref_genome_mt}_{ref_genome_n}.samtools_index.log"
samtools faidx {input.mt_n_fasta} &> {log}
shell("samtools calmd -b \\
shell("samtools sort -o {output.merged_bam_left_realigned_clipped_newMD} \\
samtools depth \\
shell("samtools view {merged_bam} > {tmp_dir}/{tmp_sam}".format(merged_bam=input.merged_bam,
\t\t"fastqc --version; STAR --version; samtools --version; multiqc --version; "
\t\tos.path.join(outputdir, "logs", "samtools_index_{sample}.log")
\t\tos.path.join(outputdir, "benchmarks", "samtools_index_{sample}.txt")
\t\t"echo \'samtools version:\
\' > {log}; samtools --version >> {log}; "
\t\t"samtools index {input.bam}"
\t\tos.path.join(outputdir, "logs", "samtools_index_clip5_{sample}.log")
\t\tos.path.join(outputdir, "benchmarks", "samtools_index_clip5_{sample}.txt")
\t\t"echo \'samtools version:\
\' > {log}; samtools --version >> {log}; "
\t\t"samtools index {input.bam}"
\t\tos.path.join(outputdir, "logs", "samtools_index_clip5_R2_{sample}.log")
\t\tos.path.join(outputdir, "benchmarks", "samtools_index_clip5_R2_{sample}.txt")
\t\t"echo \'samtools version:\
\' > {log}; samtools --version >> {log}; "
\t\t"samtools index {input.bam}"
\t\t"samtools index {input.bam}"
\t\t"samtools view -f 128 -b -o {output} {input}"
\t\t"samtools view -H {input.bam} | perl -lpe \'s/SN:([0-9]+|[XY]|MT)\\\\b/SN:chr$1/\' > {input.bam}_header.ucsc.sam; "
\t\t"samtools reheader {input.bam}_header.ucsc.sam {input.bam} > {output}"
\t\t"samtools view -H {input.bam} | perl -lpe \'s/SN:([0-9]+|[XY]|MT)\\\\b/SN:chr$1/\' > {input.bam}_header.ucsc.sam; "
\t\t"samtools reheader {input.bam}_header.ucsc.sam {input.bam} > {output}"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
\'samtools faidx {input}\'\t
samtools index {input} 2> {log}
samtools flagstat {input} > {output} 2> {log}
shell("sambamba view -f bam -t 5 --subsampling-seed=3 -s {rate} {inbam} | samtools sort -m 2G -@ 5 -T {outbam}.tmp > {outbam} 2> {log}".format(rate = down_rate, inbam = input[0], outbam = output[0], log = log))
shell("samtools index {outbam}".format(outbam = output[0]))
shell: "samtools merge -c {output} {input}"
samtools view -u -F {params.samflag} -r {params.plate} {input.bam} | scripts/pipeline2.0/FilterBAM.py -q --qual_number 5 --qual_cutoff=15 -p > {output}
bwa mem -L 80 -M -C {input.fasta} <( samtools view -F {params.samflag} {input.bam} | awk \'BEGIN{{ OFS="\\\
shell: "samtools index {input} {output}"
shell: "( for i in {input.bams}; do echo $( basename $i ) $(samtools view $i Y | wc -l) $(samtools view -F 4 $i | wc -l); done )> {output}"
samtools view -r {params.plate} -F 1 {input.bam} | awk \'BEGIN{{ OFS="\\\
echo $i $( ( samtools view -F 513 $bam | awk \'BEGIN{{ FS="\\\\t" }}{{ split($12,a,":"); if (($6 !~ /S/) && (a[1] == "NM") && (a[3] <= 10)) {{ print $3 }} }}\'; samtools view -f 2 -F 512 $bam | awk \'BEGIN{{ FS="\\\\t"; OFS="\\\\t" }}{{ split($12,a,":"); if (($6 !~ /S/) && (a[1] == "NM") && (a[3] <= 10)) {{ print $1,$3 }} }}\' | sort | uniq -c | awk \'{{ if ($1 == 2) print $3 }}\' ) | sort | uniq -c | awk \'{{ print $1":"$2 }}\' );
"samtools sort -T {output}.samtools.tmp -@ {threads} -o {output} &> {log}"
"samtools sort -T {output}.samtools.tmp -@ {threads} -o {output}"
"samtools sort -n -@ {threads} -T {input}.samtools.tmp -o {output} {input} &> {log}"
\t\t"bwa sampe -P {input.REF} {input.sai1} {input.sai2} {input.fq1} {input.fq2} 2> {log} | samtools view -bS - > {output}"
\t\t"samtools flagstat {input} > {output}"
\t\t"bwa mem -M -t {threads} {input.REF} {input.fq1} {input.fq2} 2> {log} | samtools view -bS - > {output}"
\t\t"samtools flagstat {input} > {output}"
\t\t"samtools view -bS {input} > {output}"
\t\t"samtools flagstat {input} > {output}"
\t\t"samtools view -q 20 -h {input.bam} > {output}"
\t\t"samtools sort {input} > {output}"
\t\t"samtools addreplacerg -r \'{params.RG}\' -o {output} {input}"
\t\tsamtools faidx {input.fa}; \\
\t\t"samtools faidx {input}"
"samtools/1.10"
"samtools/1.10"
"samtools index {input}"
"0.73.0/bio/samtools/index"
2> {log} | samtools view -bS - > {output.host}
Commands to generate a coverage table using `samtools coverage` for input into maxbin2
samtools coverage {input.bams} | \\
2> {log} | samtools view -bS - > {output.aln}
2> {log} | samtools view -bS - > {output.aln}
samtools sort -o {output.bam} -@ {threads} {input.aln} 2> {log}
samtools index -b -@ {threads} {output.bam} 2>> {log}
samtools index 01split_bam/{wildcards.sample}/{wildcards.sample}_{wildcards.cluster_id}.bam
samtools merge -@ 2 -r {output} {params.bam}
samtools index {input}
samtools sort -n -m 2G -@ {threads} -T {wildcards.cluster_id} \\
samtools sort -n -m 2G -@ {threads} -T {wildcards.sample}_{wildcards.cluster_id} \\
\t\t\tsamtools view -Sbh mapped_reads/mapspliceRaw/{wildcards.sample}/alignments.sam | samtools sort - > mapped_reads/mapspliceRaw/{wildcards.sample}/{wildcards.sample}.vs_{wildcards.ref_genome}.mapspliceRaw.sort.bam;
\t\t\tsamtools index {output.raw_bam};
\t\t\tsamtools sort -n {input.raw_bam} | samtools fixmate -m - - | samtools sort - | samtools markdup {params.dup_flg} - - | samtools view -bh {params.quality} > {output.multi_bam} ;
\t\t\tsamtools index {output.multi_bam}
\t\t\tsamtools view {input.multi_bam} | grep -w "IH:i:1" | cat <( samtools view -H {input.multi_bam} ) - | samtools view -Sbh > {output.uniq_bam};
\t\t\tsamtools index {output.uniq_bam}
\t\t\tsamtools sort -n {input.multi_bam} | samtools view | grep -v "IH:i:[01]" > {output.rando_bam}.multi.unsampled
\t\t\tcat <( samtools view -h {input.uniq_bam} ) {output.rando_bam}.multi.sampled | samtools view -Sbh | samtools sort - > {output.rando_bam};
\t\t\tsamtools index {output.rando_bam}
\t\t\tcat <(samtools view -H {input.in_bam}) <(samtools view {input.in_bam}| awk \'($6 ~ /N/)\' | less) | samtools view -hbS > {output.out_bam}.tmp;
\t\t\tsamtools index {output.out_bam}.tmp;
\t\t\tcat {output.out_bam}.tmp.sam |  sed -e \'s/\\tN\\t/\\t*\\t/g\' | samtools view -hbS > {output.out_bam};
\t\t\tsamtools index {output.out_bam};
\t\tshell(""" which samtools """)
\t\tshell("samtools idxstats {input.bam_in} > {input.bam_in}.idxstats")
\t\tshell(""" samtools view -hb {input.bam_in} {params.location} | bedtools genomecov -split -bga -ibam - -g {fai} > {output.bg_out} """)
\t\t\tsamtools view -Sbh mapped_reads/mapspliceRaw/{wildcards.sample}/alignments.sam | samtools sort - > mapped_reads/mapspliceRaw/{wildcards.sample}/{wildcards.sample}.vs_{wildcards.ref_genome}.mapspliceRaw.sort.bam;
\t\t\tsamtools index {output.raw_bam};
\t\t\tsamtools sort -n {input.raw_bam} | samtools fixmate -m - - | samtools sort - | samtools markdup {params.dup_flg} - - | samtools view -bh {params.quality} > {output.multi_bam} ;
\t\t\tsamtools index {output.multi_bam}
\t\t\tsamtools view {input.multi_bam} | grep -w "IH:i:1" | cat <( samtools view -H {input.multi_bam} ) - | samtools view -Sbh > {output.uniq_bam};
\t\t\tsamtools index {output.uniq_bam}
\t\t\tsamtools sort -n {input.multi_bam} | samtools view | grep -v "IH:i:[01]" > {output.rando_bam}.multi.unsampled
\t\t\tcat <( samtools view -h {input.uniq_bam} ) {output.rando_bam}.multi.sampled | samtools view -Sbh | samtools sort - > {output.rando_bam};
\t\t\tsamtools index {output.rando_bam}
\t\t\tcat <(samtools view -H {input.in_bam}) <(samtools view {input.in_bam}| awk \'($6 ~ /N/)\' | less) | samtools view -hbS > {output.out_bam}.tmp;
\t\t\tsamtools index {output.out_bam}.tmp;
\t\t\tcat {output.out_bam}.tmp.sam |  sed -e \'s/\\tN\\t/\\t*\\t/g\' | samtools view -hbS > {output.out_bam};
\t\t\tsamtools index {output.out_bam};
\t\tshell(""" which samtools """)
\t\tshell("samtools idxstats {input.bam_in} > {input.bam_in}.idxstats")
\t\tshell(""" samtools view -hb {input.bam_in} {params.location} | bedtools genomecov -split -bga -ibam - -g {fai} > {output.bg_out} """)
\t\tshell("bwa samse {input.ref_genome_file} {input.reads_in}.sai {input.reads_in} | samtools view -Shb | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -o {output.bam_out} - ")
\t\tshell("samtools index {output.bam_out}")
\t\tshell("samtools idxstats {input.bam_in} > {input.bam_in}.idxstats")
\t\tshell("samtools flagstat {input.bam_in} > {input.bam_in}.flagstat")
\t\tshell("""samtools depth -a {input.bam_in} | awk \'{{sum+=$3; sumsq+=$3*$3}} END {{ print "average_depth\\t",sum/NR; print "std_depth\\t",sqrt(sumsq/NR - (sum/NR)**2)}}\' > {input.bam_in}.dpthStats""")
shell("module load samtools && samtools merge -@ 16 {output} {input}")
check=rules.samtools_index.output,
bam=rules.samtools_sort.output
samtools view -bS -o {output}
samtools sort {input} -o {output}
samtools index {input}
bwa mem -p -t {threads} {input.ref_assembly} {input.reads} | samtools sort -o {output} -
samtools view -h {input} | samtools stats | grep \'^SN\' | cut -f 2- > {output}
samtools view -b -f 4 {input} > {output}
samtools fastq -N -0 {output} {input}
bwa mem -p -t {threads} {input.ref_assembly} {input.reads} | samtools sort -o {output} -
samtools view -h {input} | samtools stats | grep \'^SN\' | cut -f 2- > {output}
samtools view -b -f 4 {input} > {output}
samtools fastq -N -0 {output} {input}
paladin align -C -t {threads} {input.ref_assembly} {input.reads} | samtools sort -o {output} -
samtools view -h {input} | samtools stats | grep \'^SN\' | cut -f 2- > {output}
samtools view -b -f 4 {input} > {output}
samtools fastq -N -0 {output} {input}
paladin align -C -t {threads} {input.ref_assembly} {input.reads} | samtools sort -o {output} -
samtools view -b -f 4 {input} > {output}
samtools view -h {input} | samtools stats | grep \'^SN\' | cut -f 2- > {output}
samtools fastq -N -0 {output} {input}
"samtools sort {output.bam} -o {output.sorted_bam} && "
"samtools index {output.sorted_bam}"
"samtools sort {output.bam} -o {output.sorted_bam} && "
"samtools index {output.sorted_bam} && "
"samtools view -hb -f 128 {output.sorted_bam} > {output.r2} && "
"samtools index {output.r2}"
"samtools mpileup -B -f {params.fasta} {input.bam} > {output.mpileup}"
"samtools sort {output.bam} -o {output.sorted_bam} && "
"samtools index {output.sorted_bam}"
"samtools sort {output.bam} -o {output.sorted_bam} && "
"samtools index {output.sorted_bam} && "
"samtools view -hb -f 128 {output.sorted_bam} > {output.r2} && "
"samtools index {output.r2}"
"samtools mpileup -B -f {params.fasta} {input.bam} > {output.mpileup}"
"(samtools view "
"| samtools sort "
bwa mem {input.ref} {input.fastq} | samtools view -u | samtools sort -o {output}
samtools index {input.bam}
\t\t"fastqc --version; samtools --version; multiqc --version; "
conda: os.path.join(config[\'envs_dir\'], "samtools.yaml")
shell: "samtools sort -o {output} {input}"
conda: os.path.join(workflow.basedir, config[\'envs_dir\'], "samtools.yaml")
(samtools merge --threads {threads} {output} {input}) &> {log}
conda: os.path.join(workflow.basedir, config[\'envs_dir\'], "samtools.yaml")
(samtools merge --threads {threads} {output} {input}) &> {log}
conda: os.path.join(workflow.basedir, config[\'envs_dir\'], "samtools.yaml")
(samtools merge --threads {threads} {output} {input}) &> {log}
conda: os.path.join(workflow.basedir, config[\'envs_dir\'], "samtools.yaml")
shell: "samtools sort -@ {threads} -o {output} {input}"
conda: os.path.join(workflow.basedir, config[\'envs_dir\'], "samtools.yaml")
shell: "samtools sort -@ {threads} -o {output} {input}"
expand('alignment/{sample}-samtools/accepted_hits.sam', sample = SAMPLES),
hisat2 {config[HISAT_CUSTOM_OPTIONS]} --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[HISAT2_INDEX]} -1 {input.fastq1} -2 {input.fastq2} | {params.samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {output.bam_file} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {output.bam_file}
hisat2 {config[HISAT_CUSTOM_OPTIONS]} --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[HISAT2_INDEX]} -U {input[0]} | {params.samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {output.bam_file} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {output.bam_file}
hisat2 {config[HISAT_CUSTOM_OPTIONS]} {params.rg_hisat2} --no-softclip --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[HISAT2_INDEX]} -1 {input.fastq1} -2 {input.fastq2} | {params.samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {params.hisat2_bam} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {params.hisat2_bam}
samtools view -@ {config[NUMBER_CPU]} -bhf 4 {params.hisat2_bam} | samtools bam2fq - > {params.unaligned_reads}
bwa mem {config[BWA_CUSTOM_OPTIONS]} {params.rg_bwa} -t {config[NUMBER_CPU]} {config[BWA_INDEX]} {params.unaligned_reads} | {params.bwa_samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {params.bwa_bam} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {params.bwa_bam}
samtools view -H {params.hisat2_bam} > {params.header}
samtools merge -c -@ {config[NUMBER_CPU]} -f -h {params.header} {output.bam_file} {params.hisat2_bam} {params.bwa_bam}
samtools index -@ {config[NUMBER_CPU]} {output.bam_file}
hisat2 {config[HISAT_CUSTOM_OPTIONS]} {params.rg_hisat2} --no-softclip --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[HISAT2_INDEX]} -1 {input.fastq1} -2 {input.fastq2} | {params.samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {params.hisat2_bam} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {params.hisat2_bam}
samtools view -@ {config[NUMBER_CPU]} -bhf 4 {params.hisat2_bam} | samtools bam2fq - > {params.unaligned_reads}
bwa mem {config[BWA_CUSTOM_OPTIONS]} {params.rg_bwa} -t {config[NUMBER_CPU]} {config[BWA_INDEX]} {params.unaligned_reads} | {params.bwa_samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {params.bwa_bam} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {params.bwa_bam}
samtools view -H {params.hisat2_bam} > {params.header}
samtools merge -c -@ {config[NUMBER_CPU]} -f -h {params.header} {output.bam_file} {params.hisat2_bam} {params.bwa_bam}
samtools index -@ {config[NUMBER_CPU]} {output.bam_file}
"envs/samtools.yaml"
samtools view -Sb {input.input_file} > {output.bam_file}
samtools index -@ {config[NUMBER_CPU]} {output.bam_file}
"envs/samtools.yaml"
samtools view -b -h -@ {config[NUMBER_CPU]} -T {input[0]} -o {output.delly_bam} {input.input_file}
samtools index -@ {config[NUMBER_CPU]} {output.delly_bam}
"envs/samtools.yaml"
samtools view -@ {config[NUMBER_CPU]} -hf 4 {input[0]} | samtools bam2fq -s {params.out_dir}{params.sample}/singleton_reads.fastq -@ {config[NUMBER_CPU]} - > {params.out_dir}{params.sample}/unaligned_reads.fastq
hisat2 --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[VIRUS_INDEX]} -U {input[0]} | samtools view -@ {config[NUMBER_CPU]} -hSb - | samtools sort -@ {config[NUMBER_CPU]} -T {params.out_dir}{params.sample}tempvirus.file -o {params.out_dir}{params.sample}/{params.sample}_output_virus.bam -
samtools index -@ {config[NUMBER_CPU]} {params.out_dir}{params.sample}/{params.sample}_output_virus.bam ; samtools idxstats {params.out_dir}{params.sample}/{params.sample}_output_virus.bam > {output.virus_stats}
hisat2 --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[BACTERIA_INDEX]} -U {input[0]} | samtools view -@ {config[NUMBER_CPU]} -hSb - | samtools sort -@ {config[NUMBER_CPU]} -T {params.out_dir}{params.sample}tempbacteria.file -o {params.out_dir}{params.sample}/{params.sample}_output_bacteria.bam -
samtools index -@ {config[NUMBER_CPU]} {params.out_dir}{params.sample}/{params.sample}_output_bacteria.bam ; samtools idxstats {params.out_dir}{params.sample}/{params.sample}_output_bacteria.bam > {output.bacteria_stats}
hisat2 --no-spliced-alignment -p {config[NUMBER_CPU]} -x {config[CUSTOM_MICROBES_INDEX]} -U {input[0]} | samtools view -@ {config[NUMBER_CPU]} -hSb - | samtools sort -@ {config[NUMBER_CPU]} -T {params.out_dir}{params.sample}tempmicrobes.file -o {params.out_dir}{params.sample}/{params.sample}_output_microbes.bam -
samtools index -@ {config[NUMBER_CPU]} {params.out_dir}{params.sample}/{params.sample}_output_microbes.bam ; samtools idxstats {params.out_dir}{params.sample}/{params.sample}_output_microbes.bam > {output.microbes_stats}
samtools flagstat -@ {config[NUMBER_CPU]} {input[0]} > {output.flagstat}
samtools stats -@ {config[NUMBER_CPU]} {input[0]} > {output.stats}
module load {samtools_version}
samtools faidx ref/gencode_genome.fa
module load {samtools_version}
samtools sort -o {output[0]} --threads 7 {input[0]}
samtools index -b {output}
module load {samtools_version}
\t\tsamtools sort -o {output.bam} {input.sam}
\t\tsamtools index {output.bam}
samtools_stderr="results/logs/{sample}.samtools_sort_{assembler}.stderr"
| samtools sort \\
-o {output.bam} 2>{log.samtools_stderr}
stderr="results/logs/{sample}.samtools_flagstat_{assembler}.stderr"
"results/benchmarks/{sample}.samtools_flagstat_{assembler}.tsv"
samtools flagstat \\
stderr="results/logs/{sample}.samtools_stats_{assembler}.stderr"
"results/benchmarks/{sample}.samtools_stats_{assembler}.tsv"
samtools stats \\
samtools faidx {input.fa}
faidx=rules.samtools_faidx_filtered_assembly.output.faidx
samtools view -u -L {input.contigs_bed} {input.bam} \\
| samtools sort --threads {threads} \\
-m fastqc -m quast -m samtools \\
output: \'qc/bam_raw/samtools_stats/{sample}.txt\'
log: \'logs/bam_raw/samtools_stats/{sample}.log\'
wrapper: \'0.36.0/bio/samtools/stats\'
\'qc/bam_raw/samtools_stats/{sample}.txt\',
\'samtools view -bh -q30 {input} > {output}.filtered 2> {log} &&\'
\' samtools sort {output}.filtered -o {output}  &> {log} &&\'
wrapper: '0.36.0/bio/samtools/index'
"../env/samtools.yaml"
samtools faidx {input.reference}
"../env/samtools.yaml"
"samtools merge - {input.alignmentCalmd} | samtools sort -@ {threads} > {output.mergedBam}"
"../env/samtools.yaml"
"samtools index {input.mergedBam}"
"../env/samtools.yaml"
"samtools calmd -b {input.mergedBam} {input.reference} -@ {threads} > {output.alignmentCalmd}"
"../env/samtools.yaml"
"samtools index {input.alignmentCalmd}"
"../env/samtools.yaml"
"samtools index {input.maskedBam}"
"../env/samtools.yaml"
samtools faidx {input.reference}
"../env/samtools.yaml"
"samtools merge - {input.alignmentCalmd} | samtools sort -@ {threads} > {output.mergedBam}"
"../env/samtools.yaml"
"samtools index {input.mergedBam}"
"../env/samtools.yaml"
"""samtools calmd -b {input.mergedBam} {input.reference}  -@ {threads}  > {output.alignmentCalmd}"""
"../env/samtools.yaml"
"samtools index {input.alignmentCalmd}"
"../env/samtools.yaml"
"samtools index {input.maskedBam}"
"../env/samtools-1.3.1.yaml"
"samtools mpileup --reference {input.ref} "
"../env/samtools-1.3.1.yaml"
"samtools mpileup --reference {input.ref} "
samtools sort \\
samtools index {input.bam}
shell("""samtools view {bam} | cut -f9 | sed \'s/-//g\' | sort -k1,1n -S 80% --parallel {threads} | uniq -c | awk \'BEGIN{{OFS="\\t"}}{{print $2, $1}}\' > {output}""")
shell("""join -1 1 -2 2 -t $\'\\t\' -e 0 -a 1 -a 2 --nocheck-order {output} <(samtools view {bam} | cut -f9 | sed \'s/-//g\' | sort -k1,1n -S 80% --parallel {threads} | uniq -c | awk \'BEGIN{{OFS="\\t"}}{{print $1, $2}}\') > qual_ctrl/fragment_length_distributions/.frag_length.temp; mv qual_ctrl/fragment_length_distributions/.frag_length.temp {output}""")
<(samtools view -c {input_exp}) \\
<(samtools view -c {input_si}) \\
<(samtools view -c {ip_exp}) \\
<(samtools view -c {ip_si}) | \\
(samtools sort -n -T .get_fragments_{wildcards.sample}_{wildcards.species} -@ {threads} {input.bam} | \\
(awk -v norm_factor=$(samtools view -c {input.bam_experimental} | \\
<(samtools view -c {input.bam_spikein}) <(echo "*") \\
<(samtools view -c {input.input_bam_experimental}) <(echo "/") \\
<(samtools view -c {input.input_bam_spikein}) <(echo "/1000000") | bc -l) \\
samtools view -@ {threads} -uS - | \\
samtools sort -@ {threads} - \\
samtools index -@ {threads} {params.out_dir}/coverage.bam > {log} 2>&1
\t\t"&& bwa mem {input.ref} {input.r1} {input.r2} | samtools view -Sbh > {output}) 2> {log}"
\t\t"samtools sort {input} -o {output} 2> {log}"
\t\t"samtools index {input} 2> {log}"
"samtools view -Sbh > {output} 2> {log}"
"samtools view -Sbh > {output} 2> {log}"
"samtools view -Sbh > {output} 2> {log}"
"minimap2 -ax map-ont -t 8 {input.ref} {input.fasta} | samtools sort -o {output} -T reads.tmp; samtools index {output}"
Sort genome bamfile using samtools
"docker://quay.io/biocontainers/samtools:1.9--h10a08f8_12"
os.path.join(workflow.basedir, "envs", "samtools.yaml")
"(samtools sort \\
Index genome bamfile using samtools
"docker://quay.io/biocontainers/samtools:1.3.1--h1b8c3c0_8"
os.path.join(workflow.basedir, "envs", "samtools.yaml")
"(samtools index \\
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"{params.nice} samtools coverage {input.bam} > {output}"
"{params.nice} samtools idxstats {input.bam} > {output}"
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
"docker://quay.io/biocontainers/samtools:1.14--hb421002_0"
samtools view -Sb {input.sam} | samtools sort -@ {threads} -o {output.bam}
samtools index {output.bam}
Create alignment statistics with samtools.
"docker://quay.io/biocontainers/samtools:1.14--hb421002_0"
samtools stats \\
samtools view -q {params.min_mq} -F 2304 -b {input.bam} \\
| samtools sort -@ {threads} -o {output.bam_filtered}
samtools index {output.bam_filtered}
samtools_subread_dir = OUTDIR / "QC_statistics",
{params.samtools_subread_dir} \\
samtools sort -@ {threads} {input} | \\
samtools view -@ {threads} | \\
shell: "samtools flagstat {input} > {output}"
shell: "samtools view -Sb {input} -o {output}"
shell: "samtools sort -O bam -T $(mktemp) -o {output} {input}"
shell("samtools index {input}")
shell("samtools index {input}")
shell("samtools merge {output} -b {input}")
shell("samtools index {input}")
}}\' | sed "s/\\(.*\\) \\(.*\\)\\ \\(.*\\)/\\\\1:\\\\2-\\\\3/g" |  xargs samtools faidx {input[2]} \\
grep -vf {wildcards.sample}/{wildcards.sequence}.tigs.toremove {input[1]} | cut -f1 | xargs samtools faidx {input[2]} >> {output[0]}
shell: "sort -k2,2gr {input[1]} | awk \'{{if ($2 > {params.min_contig_size}) print $1}}\' | xargs samtools faidx {input[0]} > {output}"
samtools sort --threads {threads} > {output}"
cov=$(samtools view {input[1]} -s $i -h {params.myrange} | samtools depth - | cut -f3 | awk \'{{sum+=$1}}END{{print sum/(NR+1)}}\')
samtools view -h -O BAM -s $i {input[1]} {params.myrange} > {params.bam}
samtools index {params.bam}
samtools faidx {input[0]} $(echo {params.myrange}| cut -f1 -d \':\') | cut -f1 -d \':\' > {params.fa}
(samtools idxstats {input[0]} | grep {params.tig} | awk \'{{if ($2 > 50000) print $1, ":", $2-50000, "-", $2; else print $1, ":", 1, "-", $2 }}\' | tr -d \' \';
samtools idxstats {input[0]} | grep {params.tig} | awk \'{{if ($2 > 50000) print $1, ":", 1, "-", 50000; else print $1, ":", 1, "-", $2 }}\' | tr -d \' \') |
xargs -I foo sh -c \'samtools view -h {input[0]} foo | samtools fastq - || true\' | paste - - - - | sort | uniq | tr \'\\t\' \'\
cut -f1 | xargs samtools faidx {input[0]}; ls {params.sample}/3.circularization/3.circular_sequences/* | grep .fa$ | xargs cat) |
"minimap2 -t {threads} -ax map-ont {input} | samtools sort --threads {threads} > {output}"
"samtools index {input}"
shell: "samtools faidx {input}"
"logs/samtools/create_dict.log"
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
sort="samtools",
"0.59.2/bio/samtools/index"
module load samtools
samtools sort -@ 16 {input} > {output.bam}
samtools index -@ 16 {output.bam}
conda: "envs/samtools.yaml"
envmodules: "samtools/1.8-gcc5.4.0"
shell: "which samtools && samtools view -b {input} | samtools sort -o {output} && samtools index {output}"
conda: "envs/samtools.yaml"
envmodules: "samtools/1.8-gcc5.4.0"
shell: "which samtools && samtools view -b {input} | samtools sort -o {output} && samtools index {output}"
"samtools collate -O {input.fname_aln} | samtools fastq -1 {output.fname_fastq_R1} -2 {output.fname_fastq_R2} -"
samtools sort -o {output.fname_bam} {output.fname_bam}
samtools sort -o {output.fname_bam} {output.fname_bam}
samtools view \\
"v1.3.2/bio/samtools/index"
join(workpath,"QC","{name}.samtools_flagstat.txt"),
bwa mem -t {params.threads} {params.extra} {input.reference} {input.r1} {input.r2} | samtools sort -o {output} - >> {log} 2>&1
"wget https://github.com/samtools/htslib/releases/download/{params.htslib_version}/{params.htslib_tar_name} -O {output.htslib_tar}"
"samtools sort {input.p1} > {output.o1}"
"samtools sort {input.p2} > {output.o2}"
"samtools sort {input} > {output}"
&& samtools view -bS {removalDIR}/{wildcards.id}.sam > {removalDIR}/{wildcards.id}.bam \\
&& samtools view -b -f 4 -F 256 {removalDIR}/{wildcards.id}.bam > {removalDIR}/{wildcards.id}_unaligned.bam \\
&& samtools sort -n {removalDIR}/{wildcards.id}_unaligned.bam -o {removalDIR}/{wildcards.id}_unaligned_sorted.bam \\
&& samtools bam2fq {removalDIR}/{wildcards.id}_unaligned_sorted.bam > {removalDIR}/{wildcards.id}_unaligned.fastq \\
&& samtools view -bS {removalDIR}/{wildcards.id}.sam > {removalDIR}/{wildcards.id}.bam \\
&& samtools view -b -f 12 -F 256 {removalDIR}/{wildcards.id}.bam > {removalDIR}/{wildcards.id}_unaligned.bam \\
&& samtools sort -n {removalDIR}/{wildcards.id}_unaligned.bam -o {removalDIR}/{wildcards.id}_unaligned_sorted.bam \\
&& samtools bam2fq {removalDIR}/{wildcards.id}_unaligned_sorted.bam > {removalDIR}/{wildcards.id}_unaligned.fastq \\
samtools view -Shb -o {output}
samtools flagstat {input} > {output}
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
minimap2 -Y -t {threads} -x map-ont -a {params.ref} {input.trim} | samtools view -bF 4 - | samtools sort -@ {threads} - > {output}
samtools index -@ {threads} {input}
align_trim --start --normalise 200 {params.scheme} --report {output.report} < {input.bamfile} 2> {output.dropped} | samtools sort -T {params.prefix} - -o {output.trimmedBamfile};
align_trim --normalise 200 {params.scheme} --remove-incorrect-pairs --report {output.report} < {input.bamfile} 2> {output.dropped} | samtools sort -T {params.prefix} - -o {output.primertrimmedBamfile}
samtools index -@ {threads} {input.trimmedBamfile};
samtools index -@ {threads} {input.primertrimmedBamfile}
samtools view -b -r {params.pool1} {input.primertrimmedBamfile} > {output.pool1Bam};
samtools index {output.pool1Bam};
samtools view -b -r {params.pool2} {input.primertrimmedBamfile} > {output.pool2Bam};
samtools index {output.pool2Bam}
shell: "samtools stats {input} > {output}"
shell: "samtools fasta -t {input} > {output}"
"samtools view -Sb - > {output[0]}; " + \\
"samtools sort {output[0]} -o {output[1]}; " + \\
"samtools view {output[1]} | " + \\
" | samtools sort -@30 -o {output} -"
shell: "samtools merge {output} {input}"
shell: "samtools view {input[0]} | " + \\
"samtools faidx {output[0]}"
"samtools sort -@8 -tBX -o {output}"
shell: "samtools view {input} > {output}"
shell: "samtools view -h {input} | sed \'s/-1$/-2/g\' > {output}"
shell: "samtools view -h {input} | sed \'s/-1$/-3/g\' > {output}"
shell: "samtools view -h {input} | sed \'s/-1$/-4/g\' > {output}"
shell: "samtools merge -@32 -tBX {output[0]} {input}"
shell: "samtools sort -@30 -m 8G -n -o {output} {input}"
"samtools sort -@48 -o {output}"
"samtools view -Sb - > {output} "
shell: "samtools sort -@48 {input} -o {output} "
conda: "envs/samtools.yaml"
shell: "samtools view {input} | wc -l > {output}"
conda: "envs/samtools.yaml"
shell: "samtools view -F 4 {input} | wc -l > {output}"
\t\tshell("bowtie2 -1 {input.r1} -2 {input.r2} -x {wildcards.sample}_tmp/{wildcards.sample}.index -p 6 | samtools view -Sb | samtools sort > {output}")
\t\t"samtools faidx {input}"
\t\t"samtools dict {input} -o {output}"
\t\t"minimap2 -a --eqx {input.ref} {input.s} | samtools view -Sb -F 0x900 > {output} 2> {log}"
\t\t"samtools sort {input} > {output} 2> {log}"
\t\t"samtools index {input} 2> {log}"
\t\t"samtools idxstats {input} > {output}"
Converts the downloaded bam-file to fastq using samtools.
"0.31.0/bio/samtools/bam2fq/separate"
| samtools view -S -b | samtools sort > {output}
samtools index {input} {output[0]} 2> {output[1]}
sort="samtools",
"0.27.1/bio/samtools/index"
"qc/samtools-stats/{sample}-{unit}.txt"
"logs/samtools-stats/{sample}-{unit}.log"
"0.27.1/bio/samtools/stats"
expand(["qc/samtools-stats/{u.sample}-{u.unit}.txt",
"logs/samtools/create_dict.log",
"../envs/samtools.yaml"
"samtools dict {input} > {output} 2> {log} "
program=config[\'programs_path\'][\'samtools\'],
program=config[\'programs_path\'][\'samtools\']
program=config[\'programs_path\'][\'samtools\']
&& samtools view -bS {removalDIR}/{wildcards.id}.sam > {removalDIR}/{wildcards.id}.bam \\
&& samtools view -b -f 4 -F 256 {removalDIR}/{wildcards.id}.bam > {removalDIR}/{wildcards.id}_unaligned.bam \\
&& samtools sort -n {removalDIR}/{wildcards.id}_unaligned.bam -o {removalDIR}/{wildcards.id}_unaligned_sorted.bam \\
&& samtools bam2fq {removalDIR}/{wildcards.id}_unaligned_sorted.bam > {removalDIR}/{wildcards.id}_unaligned.fastq \\
&& samtools view -bS {removalDIR}/{wildcards.id}.sam > {removalDIR}/{wildcards.id}.bam \\
&& samtools view -b -f 12 -F 256 {removalDIR}/{wildcards.id}.bam > {removalDIR}/{wildcards.id}_unaligned.bam \\
&& samtools sort -n {removalDIR}/{wildcards.id}_unaligned.bam -o {removalDIR}/{wildcards.id}_unaligned_sorted.bam \\
&& samtools bam2fq {removalDIR}/{wildcards.id}_unaligned_sorted.bam > {removalDIR}/{wildcards.id}_unaligned.fastq \\
"samtools/1.14",
sorting="samtools",  # Can be \'none\', \'samtools\' or \'picard\'.
sort_extra="",  # Extra args for samtools/picard.
"results/logs/samtools_index/{sample}.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"results/logs/samtools_index/{sample}.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"results/logs/samtools_index/{sample}_samtools_index_Watson_Reads.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"results/logs/samtools_index/{sample}_samtools_index_Crick_Reads.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"samtools/1.14",
sorting="samtools",  # Can be \'none\', \'samtools\' or \'picard\'.
sort_extra="",  # Extra args for samtools/picard.
"results/logs/samtools_index/{sample}.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"results/logs/samtools_index/{sample}.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"results/logs/samtools_index/{sample}_samtools_index_Watson_Reads.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
"results/logs/samtools_index/{sample}_samtools_index_Crick_Reads.log",
"samtools/1.14",
"v1.3.2/bio/samtools/index"
\t\tsamtools split -f \'{OUTPUT_PATH}/log/%!.bam\' -@{params.cpu} {input}
\t\tsamtools sort -@{params.cpu} -o {output} {input}
\t\tsamtools index -@{params.cpu} {input}
\t\t\tumi_tools dedup --no-sort-output --stdin={input.bam} k:{params.paired} --log={log.out}  --output-stats={OUTPUT_PATH}/log/DEDUP_UMI_{wildcards.sample} | samtools sort -n -@{params.cpu} -o {output} 2> {log.err}
"samtools view {input[0]} -S -b > {output[0]}"
"samtools sort -T {params} -n -o {output} {input}"
"env_yaml/samtools.yaml"
samtools sort -@ {resources.threads} {params.BAM_path} \\
"samtools_index_{sample}.log"),
"samtools_index_{sample}.log")
"samtools_index_{sample}_benchmark.log")
"env_yaml/samtools.yaml"
samtools index -@ {resources.threads} {input.BAM_sorted} \\
flagstats_out = (ALIGN_DIR + "{run_id}/" + "{run_id}.samtools_flagstats.txt"),
"samtools index {input} && samtools flagstat -O tsv {input} > {output.flagstats_out}"
"samtools view --bam {input.sam} |  samtools sort - > {output.sorted_bam} && \\
samtools index {output.sorted_bam}"
samtools faidx {input}"
samtools index {output.sorted_rg_bam}"
\'conda_env/samtools_installed\',
\'conda_env/samtools_installed\'
conda: \'conda_env/samtools.yml\'
conda: \'conda_env/samtools.yml\'
"bwa mem -M -t4 -R\'{params.read_group}\' {params.bwa_index} {input.R1} {input.R2} | samtools view -bSo {output}"
conda: \'conda_env/samtools.yml\'
"bwa mem -M -t4 -R\'{params.read_group}\' {params.bwa_index} {input.R1} | samtools view -bSo {output}"\t\t\t
conda: \'conda_env/samtools.yml\'
samtools view -buS -f 2 -F 4 -@32 {input} |
samtools fixmate -m - - |
samtools sort -@32 -o {output.bam} && samtools index {output.bam}
conda: \'conda_env/samtools.yml\'
samtools view -buS -F 4 -@32 {input} |
samtools fixmate -m - - |
samtools sort -@32 -o {output.bam} && samtools index {output.bam}
conda: \'conda_env/samtools.yml\'
\'samtools merge {output.bam} {input} && samtools index {output}\'
conda: \'conda_env/samtools.yml\'
\'samtools merge {output.bam} {input} && samtools index {output}\'
conda: \'conda_env/samtools.yml\'
"samtools markdup -r {input} {output.bam} && samtools index {output.bam}"
conda: \'conda_env/samtools.yml\'
"samtools flagstat {input.aligned} -O tsv > {output.aligned} && samtools flagstat {input.deduped} -O tsv > {output.deduped}"
conda: \'conda_env/samtools.yml\'
"samtools flagstat {input} -O tsv > {output}"
conda: "./evn/samtools.yaml"
\'samtools sort {input.bam_ngmlr} -o {output.sort_ngmlr} | samtools index 2> {log}\' \\
\'samtools sort {input.bam_pbmm2} -o {output.sort_pbmm2} | samtools index 2>> {log}\'
\'minimap2 -ax asm5 --eqx {input.ref} {input.asm} > {output.sam} | samtools view -b -o {output.bam} >2 {log}\'
\'samtools calmd -u {input.pbmm2_bam} {input.ref} > {output.pbmm2_MD}\' \\
\'samtools calmd -u {input.pbmm2_bam} {input.ref} > {output.pbmm2_MD}\' \\
"../envs/samtools.yaml"
samtools view -@ {threads} -bS -o {output} {input.sam}
"../envs/samtools.yaml"
samtools flagstat {input.bam} --threads {threads} > {output}
"../envs/samtools.yaml"
samtools stats {input.bam} > {output}
samtools sort {input.bam} > {output.sort}
samtools index {output.sort}
| samtools sort -@ {threads} -o {output}
| samtools sort -@ {threads} -o {output}
singularity: "quay.io/biocontainers/samtools:1.11--h6270b1f_0"
samtools sort -@ {threads} -O BAM -o {output.bam} {input}
samtools index -@ {threads} {output.bam}
singularity: "docker://biocontainers/samtools:v1.7.0_cv4"
samtools sort -@ {threads} -O BAM -o {output.bam} {input}
samtools index -@ {threads} {output.bam}
"samtools view -h -o {output} {input}"
"samtools view -h -o {output} {input}"
samtools_params = config["Samtools_mapping_params"]["samtools_view_params"]
"samtools view {params.samtools_params} - "
samtools_params = config["Samtools_mapping_params"]["samtools_view_params"]
"samtools view {params.samtools_params} - "
samtools_params = config["Samtools_mapping_params"]["samtools_view_params"]
"samtools view {params.samtools_params} - "
"samtools sort -n -@ {threads} "
"samtools fixmate {params.fixmate_params} {input} {output} "
"samtools sort -@ {threads} "
samtools markdup {params.markdup_params} {input} {output.BAM}
samtools index {output.BAM} {output.BAI}
"samtools stats {input} | "
samtools idxstats {input} > {output.idxstats}
samtools flagstat {input} > {output.flagstat}
samtools view -H {input} > {output.sample_header}
samtools reheader {output.new_sample_header} {input} > {output.new_bam}
samtools index {output.new_bam} {output.new_bam_index}
multiqc -m samtools {input.idxstats} -o {output.MultiQC_idxstats}
multiqc -m samtools {input.flagstat} -o {output.MultiQC_flagstat}
multiqc -m samtools {input.idxstats} -o {output.MultiQC_idxstats}
multiqc -m samtools {input.flagstat} -o {output.MultiQC_flagstat}
samtools merge {output.BAM_1} {input.bam} > {log} 2>&1
samtools index {output.BAM_1} {output.BAI_1}
samtools_params = config["Samtools_mapping_params"]["samtools_view_params"],
samtools_filtering_params = config["Samtools_read_filtering"]["samtools_view_filtering"]
samtools index {input} {output.BAI_1}
"samtools view -L {input.bed} -b {input.bam} "
"samtools index {output.bam}"
"samtools view -L {input.bed} -b {input.bam} "
"samtools index {output.bam}"
"samtools view -L {input.bed} -b {input.bam} "
"samtools index {output.bam}"
\t\t"(module load tools samtools/1.9 bwa/{version}; "
\t\t"(module load tools perl/5.24.0 samtools/1.9 biobambam2/{version}; "
\t\t"(module load tools java/1.8.0 samtools/1.9 gatk/{version}; "
\t\t"(module load tools java/1.8.0 samtools/1.9 gatk/{version}; "
\t\t"samtools index -@ {threads} {output.bam} {output.bai}"
\t\t"(module load tools samtools/{version}; "
\t\t"samtools view -C -T {input.ref} -@ {threads} {input.bam} > {output.cram}; "
\t\t"samtools index -@ {threads} {output.cram} {output.crai}; "
"samtools index {input} "
"samtools faidx {input} -o {output.fai}"
"{input.R1} {input.R2} | samtools view -Sbh - | samtools sort > "
"{input.S1} | samtools view -Sbh - | samtools sort -@ {threads} > "
"samtools index {output.paired_temp} ;"
"samtools index {output.single_temp} ;"
"samtools merge -f {output.merge_temp} {output.paired_temp} "
"samtools view -hF 4 {output.merge_temp} | samtools sort -@ {threads} > "
"samtools index {output.merge_sorted} {output.merge_sorted_bai}"
"{input.R1} {input.R2} | samtools view -Sbh - | samtools sort > "
"{input.S1} | samtools view -Sbh - | samtools sort -@ {threads} > "
"samtools index {output.paired_temp} ;"
"samtools index {output.single_temp} ;"
"samtools merge -f {output.merge_temp} {output.paired_temp} "
"samtools view -hF 4 {output.merge_temp} | samtools sort -@ {threads} > "
sort="samtools",
threads: get_resource("samtools_index","threads")
mem_mb = get_resource("samtools_index","mem"),
walltime = get_resource("samtools_index","walltime")
f"{LOGDIR}/samtools/index/{{sample}}-{{unit}}.log"
"0.79.0/bio/samtools/index"
threads: get_resource("samtools_index","threads")
mem_mb = get_resource("samtools_index","mem"),
walltime = get_resource("samtools_index","walltime")
f"{LOGDIR}/samtools/index/{{sample}}-{{unit}}.log"
"0.79.0/bio/samtools/index"
"0.79.0/bio/samtools/merge"
threads: get_resource("samtools_index","threads")
mem_mb = get_resource("samtools_index","mem"),
walltime = get_resource("samtools_index","walltime")
f"{LOGDIR}/samtools/index_merged/{{sample}}.log"
"0.79.0/bio/samtools/index"
f"{OUTDIR}/qc/samtools-stats/{{sample}}-{{unit}}.txt"
f"{LOGDIR}/samtools-stats/{{sample}}-{{unit}}.log"
threads: get_resource("samtools_stats","threads")
mem_mb = get_resource("samtools_stats","mem"),
walltime = get_resource("samtools_stats","walltime")
"0.79.0/bio/samtools/stats"
expand(f"{OUTDIR}/qc/samtools-stats/{{u.sample}}-{{u.unit}}.txt", u=units.itertuples()),
sort="samtools",
"0.27.1/bio/samtools/index"
\t\tsamtools sort -T {params.scratch}SAMSORT -o {output} {params.out}Aligned.out.bam
\t\tsamtools index {output}
\t\tsamtools sort -T {params.scratch}SAMSORT -o {output} {params.out}Aligned.out.bam
\t\tsamtools index {output}
containers["varscan-2.4.2-samtools-1.3.1-tabix-0.2.6-grep-2.14"]
samtools mpileup \\
containers["bwa-0.7.17-samtools-1.3.1-picard-2.9.2"]
| samtools view \\
containers["bwa-0.7.17-samtools-1.3.1-picard-2.9.2"]
| samtools view \\
\t    "conda/samtools.yaml"
\t\t\tsamtools view -b {input} > {output}
\t    "conda/samtools.yaml"
\t\t\tsamtools sort {input} > {output}
\t    "conda/samtools.yaml"
\t\t\tsamtools index -c {input} {output}
shell: "samtools dict {input} > {output}"
shell: "samtools index {input}"
"samtools merge {output.bam} {input.bams}"
\t\tdepth_plot = "results/coverage/samtools_depth/GC_EC_{manifest}_{patient}_{sample}_{primer}_cumulative_coverage.png",
\t\traw_coverage_plot = "results/coverage/samtools_depth/GC_EC_{manifest}_{patient}_{sample}_{primer}_cumulative_coverage_rawCounts.png",
\t\tmodule load samtools
\t\tsamtools depth -q 20 -d 25000 {input.bam} | python3 scripts/python/plot_cumulative_coverage.py \\
\t\tmodule load samtools
\t\tsamtools flagstat {input.bam} > {output.flagstat}
RESULT_DIR + "samtools_variants.vcf.gz"
"Calling variants with samtools"
"samtools depth {input} > {output}"
"samtools stats {input} > {output}"
"samtools merge {output.bam} {input};"
"samtools index {output.bam}"
"samtools markdup -@ {threads} {input} {output}"
"samtools sort -@ {threads} {input} > {output}"
"samtools fixmate -m -@ {threads} {input} {output}"
"samtools sort -n -@ {threads} {input} > {output}"
sort="samtools",
"0.27.1/bio/samtools/index"
"0.77.0/bio/samtools/index"
"samtools faidx {input}"
sort="results/logs/samtools_sort/{sample}-{unit}.log",
"samtools sort - "
"samtools view -h -q {params.minq} {input} | "
"samtools view -bS - > {output.bam}; "
"samtools stats {output.bam} > {output.metrics}"
"samtools merge --threads {threads} {params} "
L178="output_dir/samtools/Ref_nCoV_{sample}-uF.bam",
L179="output_dir/samtools/Ref_nCoV_{sample}.bam",
L180="output_dir/samtools/Ref_nCoV_{sample}.bam.flagstat",
L181="output_dir/samtools/Ref_nCoV_{sample}-s.bam",
L183a="output_dir/samtools/Ref_nCoV_{sample}-smd.bam",
L183b="output_dir/samtools/Ref_nCoV_{sample}-smd.matrics",
stdout="output_dir/samtools/Ref_nCoV_{sample}-smd.matrics.stdout.log",
stderr="output_dir/samtools/Ref_nCoV_{sample}-smd.matrics.stderr.log"
samtools view -bt $DB.fai {input} > {output.L178}
samtools sort -n {output.L178} | samtools fixmate: - {output.L179}
samtools flagstat {output.L179} > {output.L180}
samtools sort {output.L179} -o {output.L181} --reference {params.db}
samtools index {output.L181}
\'logs/samtools_index.log\'
"samtools faidx {input}"
\'logs/samtools_index.log\'
"samtools faidx {input}"
\'logs/samtools_index.log\'
"samtools faidx {input}"
"""apply samtools flagstats on all bam"""
threads: get_threads(\'samtools_flagstat\', 1)
error =  f\'{log_dir}samtools_flagstat/{{samples}}.e\',
output = f\'{log_dir}samtools_flagstat/{{samples}}.o\'
samtools flagstat -@ {threads} {input.bam} | tee {output.txt_file} 1>{log.output} 2>{log.error}
"""merge all samtools flagstat files"""
csv_resume = expand(rules.samtools_flagstat.output.txt_file , samples = rattlesnp.samples)
"""apply samtools depth on all bam SE end PE"""
threads: get_threads(\'samtools_depth\', 1)
error =  f\'{log_dir}samtools_depth/{{samples}}.e\',
output = f\'{log_dir}samtools_depth/{{samples}}.o\'
samtools depth {params.other_options} {input.bam} | tee {output.txt_file} 1>{log.output} 2>{log.error}
threads : get_threads(\'samtools_depth_to_csv\', 1)
txt = rules.samtools_depth.output.txt_file,
error =  f\'{log_dir}samtools_depth_to_csv/{{samples}}.e\',
output = f\'{log_dir}samtools_depth_to_csv/{{samples}}.o\'
threads : get_threads(\'merge_samtools_depth_stats\', 1)
csv_resume = expand(rules.samtools_depth_to_csv.output.csv_resume , samples = rattlesnp.samples)
error =  f\'{log_dir}merge_samtools_depth_stats/mergeResume.e\',
output = f\'{log_dir}merge_samtools_depth_stats/mergeResume.o\'
merge_samtools_depth_csv(input.csv_resume, output.csv_resume_merge, sep="\\t")
depth_resume = rules.merge_samtools_depth_stats.output.csv_resume_merge,
samtools sort -@ {threads} -o {output.bam_file}) 1>{log.output} 2>{log.error}
other_options_samtools_sort = config["PARAMS_TOOLS"]["SAMTOOLS_SORT"]
- other_options_samtools_sort: {{params.other_options_samtools_sort}}
samtools sort -@ {threads} {params.other_options_samtools_sort} -o {output.bam_file};
samtools index -@ {threads} {output.bam_file}) 1>{log.output} 2>{log.error}
"""make samtools view and sort for all bam"""
threads: get_threads(\'samtools_view_sort_bam\', 1)
other_options_samtools_view = config["PARAMS_TOOLS"]["SAMTOOLS_VIEW"],
other_options_samtools_sort = config["PARAMS_TOOLS"]["SAMTOOLS_SORT"]
error =  f\'{log_dir}samtools_view_sort_bam/{{samples}}.e\',
output = f\'{log_dir}samtools_view_sort_bam/{{samples}}.o\'
- other_options_samtools_view: {{params.other_options_samtools_view}}
- other_options_samtools_sort: {{params.other_options_samtools_sort}}
(samtools view -@ {threads} {params.other_options_samtools_view} {input.bam} |
samtools sort -@ {threads} {params.other_options_samtools_sort} -o {output.bam_file}
samtools index -@ {threads} {output.bam_file}) 1>{log.output} 2>{log.error}
(samtools faidx {input.reference}) 1>{log.output} 2>{log.error}
