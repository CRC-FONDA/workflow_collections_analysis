"bwa-mem2 {input.genome} {input.read_one} {input.read_two} | samtools view -Sb - > {output}"
"bwa-mem2 {input.genome} {input.read_one} {input.read_two} | samtools view -Sb - > {output}"
done=touch("temp/bwa_ref_{SM}"),
"logs/bwa_index_{SM}.log",
bwa index -p temp/ref_{wildcards.SM} {input.fasta}
bwa_index_done="temp/bwa_ref_{SM}",
"logs/bwa_aln_{SM}_{W}.log",
bwa aln -t {threads} temp/ref_{wildcards.SM} {input.reads} \\
| bwa samse -n {params.num_dups} temp/ref_{wildcards.SM} - {input.reads} \\
sam=rules.bwa_aln.output.sam,
bwa index {params.scaffold}
bwa mem -t {threads} {params.scaffold} {input.fwd} {input.rev} | samtools view -bS - | \\
join(DATA_DIR, binning_analyses, "singlerun/framework/bwa-ref_name_vf/ref-db.fasta"),
bwa index {output}
join(DATA_DIR, binning_analyses, "singlerun_coassembly/framework/bwa-ref_name_vf/ref-db.fasta"),
bwa index {output}
catalogue=join(DATA_DIR, binning_analyses, "singlerun/framework/bwa-ref_name_vf/ref-db.fasta"),
bwa mem -t {threads} {input.catalogue} {input.fwd} {input.rev} \\
catalogue=join(DATA_DIR, binning_analyses, "singlerun_coassembly/framework/bwa-ref_name_vf/ref-db.fasta"),
bwa mem -t {threads} {input.catalogue} {input.fwd} {input.rev}\\
extra = params["bwa"]["extra"],
params["bwa"]["threads"]
MAP_RAW + "{population}.{library}.bwa_mem.log"
MAP_RAW + "{population}.{library}.bwa_mem.json"
(bwa mem \\
bwa = expand("logs/ref_index/{ref}.bwa_index.log", ref=config["reference_genome"]),
bwa index {input} 2> {log.bwa}
bwa_index = expand(config["reference_genome"]+".{suffix}", suffix=["amb","ann","bwt","pac","sa"]),
\t\tlog_dir = "logs/bwa_index"
\t\t"logs/bwa_index/{genome}.log"
\t\t"bwa index {input} 2> {log}"\t
\t\tinput = get_bwa_mem_input,\t\t\t
\t\tlog_dir = "logs/bwa_mem"
\t\t"logs/bwa_mem/{sample}.log"
\t\t"bwa mem -t {threads} -R \'{params.read_group}\' {input.input} 1> {output.sam} 2> {log} && "
\t\trules.bwa_mem.output.bam
\t\tbam_out = "mapped_reads/{sample}.vs_{ref_genome}.bwa.sort.bam",
\t\tshell("bwa aln {input.ref_genome_file} {input.reads_in[0]} > {input.reads_in[0]}.sai ")
\t\t\tshell("bwa aln {input.ref_genome_file} {input.reads_in[1]} > {input.reads_in[1]}.sai ")
\t\t\tshell("bwa sampe {input.ref_genome_file} {input.reads_in[0]}.sai {input.reads_in[1]}.sai {input.reads_in[0]}  {input.reads_in[1]} | samtools view -Shb | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -o {output.bam_out} - ")
\t\t\tshell("bwa samse {input.ref_genome_file} {input.reads_in[0]}.sai {input.reads_in[0]} | samtools view -Shb | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -o {output.bam_out} - ")
\t\tbam_in = "mapped_reads/{sample}.vs_{ref_genome}.bwa.sort.bam"
\t\tbam_out = "mapped_reads/{sample}.vs_{ref_genome}.bwaUniq.sort.bam"
\t#cat  all_samples.vs_droSec1.bwaUniq.summary.frq.count| cut -f 3 | tail -n +2 | sort | uniq -c
\t\tbam_reports = lambda wildcards: expand("meta/VCFs/{prefix}.vs_{ref_genome}.{aligner}.summary", prefix=wildcards.prefix, ref_genome=["droSim1","droSec1"], aligner="bwaUniq")
\t\talignment_summaries = expand("meta/alignments.vs_{ref_genome}.{aligner}.summary", ref_genome=[\'droSim1\', \'droSec1\'], aligner=[\'bwa\',\'bwaUniq\']),
\t\tfull_variant_summary = expand("meta/{prefix}.calledVariants.{aligner}.summary", aligner=["bwaUniq"], prefix=["all_samples"] ),
\t\twindowed_frq_shifts = expand("variant_analysis/freqShift/all_samples.{treat}_with_PopSec_and_PopSim.vs_droSim1.bwaUniq.windowed_w100000_s100000.frqShift", treat = [\'selection\',\'control\']),
\t\tdistances = expand("variants/all_samples.vs_{ref_genome}.bwaUniq/distances/from.all.to.all.{ref_genome}_w100000_s100000.distanceRoster",ref_genome=[\'droSim1\', \'droSec1\']),
temp("output/mapped/{sample}-{rep}-{unit, [^.]+}.se.bwa.bam")
"logs/bwa/{sample}-{rep, [^-]+}-{unit}.log"
index=lambda wildcards: config["bwa"]["index"],
extra=config["bwa"]["extra"]
bwa mem -t {threads} {params.extra} \\
"logs/bwa_index.log",
"0.72.0/bio/bwa-mem2/index"
idx=rules.bwa_index.output,
"logs/bwa_mem/{sample}-{unit}.log",
"0.72.0/bio/bwa-mem2/mem"
bwa="log/align.bwa.txt",
containers["bwa-mem2"]
bwa-mem2 mem \\
{input.f} {input.r} 2> {log.bwa} |
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
log: MAP + "bwa_{sample}.log"
benchmark: MAP + "bwa_{sample}.bmk"
"(bwa mem -R \'{params.rg}\' -t {threads} {input.genome} {input.sample} "
"bwa mem {input.genome} {input.r1} {input.r2} > {output}"
"bwa mem {input.genome} {input[0]} > {output}"
\t\tindex=expand("data/bwa/contigs/index/viral_contig_library.{extension}",
\t\t"envs/yaml/bwa.yaml"
\t\tindex=expand("data/bwa/bins/index/bin_library_decon.{extension}",
\t\t"envs/yaml/bwa.yaml"
\t\tbai="data/bwa/bins/bam/{sample}_bin_aligned.bam.bai"
"bwa mem {input} | samtools view -Sb - > {output}"
"./bwa-0.7.17/bwa index -p {params.prefix} {input} && mv {params.prefix}* {params.directory}"
"(./bwa-0.7.17/bwa mem -t {threads} {params.ref_base} {input.r1} {input.r2} | samtools view -Sb - > {output}) 2> {log}"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
\t\t"bwa index {input[0]}; bwa mem -t {threads} {input} | samtools sort --threads {threads} > {output}"
bwaindex_uri = BWA_INDEXLINK,
"&& wget -qO- {params.bwaindex_uri} | tar -xvz -C {output}"
SAMPLE_OUTPUT_DIR+"/logs/bwa_mem/{sample}_{lane}.log"
"(bwa mem -t {threads} -T {params.thersholds} -R \'{params.rg}\' {input} | "
"logs/bwa_index/genome.log"
"v1.7.0/bio/bwa/index"
"logs/bwa_mem/{sample}.log"
"v1.7.0/bio/bwa/mem"
expand("results/bwa_mem/{unit.sample}-{unit.unit}.bam", unit=units.itertuples()),
"logs/bwa_index/{ref}.log"
"v1.0.0/bio/bwa/index"
"logs/bwa_mem/{sample}_srt.log"
"v1.1.0/bio/bwa/mem"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.52.0/bio/bwa/mem"
"logs/bwa_index.log"
"0.53.0/bio/bwa/index"
shell("bwa index -a bwtsw {output.ref}")
shell("bwa aln -R 1000000 -O 3 -E 3 -t {threads} {input} {params.tmp}/simu_reads.fq > {params.tmp}/simu_reads.sai")
shell("bwa samse {input} {params.tmp}/simu_reads.sai {params.tmp}/simu_reads.fq > {params.tmp}/simu_reads.sam")
input: index = "bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT.sa",
conda: "envs/bwa.yaml"
shell: "bwa mem -t 8 " + \\
"bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT " + \\
input: index = "bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT.sa",
conda: "envs/bwa.yaml"
shell: "bwa mem -t 8 " + \\
"bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT " + \\
output: "bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT.sa"
conda: "envs/bwa.yaml"
shell: "bwa index -p bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT {input}"
input: index = "bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT.sa",
conda: "envs/bwa.yaml"
shell: "bwa mem -t 8 " + \\
"bwa_index/Homo_sapiens.GRCh38.dna.chromosome.MT " + \\
shell: "samtools view -h http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/HGDP/data/{wildcards.population}/{wildcards.individual}/alignment/{wildcards.individual}.alt_bwamem_GRCh38DH.20181023.{wildcards.population}.cram chrM > BERGSTROEM2020/{wildcards.population}/{wildcards.individual}_mt.sam"
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
bam = "020.bwa/{name}.bam",
bai = "020.bwa/{name}.bam.bai",
bwa mem {params.ref} {input.fq} \\
bams = expand("020.bwa/{name}.bam", name=samples),
bwa index {input.fasta}
bam= temp(\'{genome}/bwa/{run_id}.bam\'),
bai= temp(\'{genome}/bwa/{run_id}.bam.bai\'),
bwa mem -t 8 {input.fasta} {input.fastq_r1} {input.fastq_r2} \\
bam= \'{genome}/bwa/{library_id}.bam\',
md= \'{genome}/bwa/{library_id}.md.txt\',
stats= \'{genome}/bwa/{library_id}.stats\'
bam= \'{genome}/bwa/{library_id}.bam\',
bam= \'{genome}/bwa/{library_id}.bam\',
params: **(bwa_index_rp.parameters),
resources: **(bwa_index_rp.resources),
"bwa index {input.fasta_path}"
params: **(bwa_mem_align_rp.parameters),
resources: **(bwa_mem_align_rp.resources),
" bwa mem {params.extra_args} -t {params.threads}"
"bwa-mem2 index {input}"
idx = rules.bwa_index.output,
bwa-mem2 mem -t {resources.cpus} {input.assembly} {input.reads} | samblaster -r | samtools view -b - > {output}
\toutput: GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.bwt")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\toutput: "bwa_indices/{id}.fa.bwt"
\t\tidx="bwa_indices/{id}.fa"
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tidx="bwa_indices/{id2}.fa.bwt"
\t\tidx="bwa_indices/{id}.fa"
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 4 {params.idx} {input.R1} {input.R2} | samtools sort -@4 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id2}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa index -p {params.idx} {input}
\t\tann=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.ann"),
\t\tpac=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.pac"),
\t\tamb=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.amb"),
\t\tbwt=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.bwt"),
\t\tsa =GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa.sa")
\t\tidx=GS.remote(GS_PREFIX + "/bwa_indices/{id}.fa")
\tconda: "envs/bwa.yaml"
\t\tbwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"logs/{prefix}.bwa.stderr.log"
threads: config["bwa_threads"]
bwa mem -K 100000000 -p -v 3 -t {threads} -Y {input.reference} /dev/stdin - 2> >(tee {log} >&2) | \\
v_bwa = bwa_version
--PROGRAM_RECORD_ID "bwamem" \\
--PROGRAM_GROUP_VERSION "{params.v_bwa}" \\
--PROGRAM_GROUP_COMMAND_LINE "bwa mem -K 100000000 -p -v 3 -t 2 -Y {input.reference}" \\
--PROGRAM_GROUP_NAME "bwamem" \\
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
REFERENCE_GENOME + '.bwameth.c2t',
REFERENCE_GENOME + '.bwameth.c2t.amb',
REFERENCE_GENOME + '.bwameth.c2t.ann',
REFERENCE_GENOME + '.bwameth.c2t.bwt',
REFERENCE_GENOME + '.bwameth.c2t.pac',
REFERENCE_GENOME + '.bwameth.c2t.sa'
bwameth_path = config['paths']['bwameth_path'],
'{params.bwameth_path} index {input}'
{rules.bwameth_index.output},
'3_aligned_sorted_markdupes/{sample}.bwameth.log'
config['bwameth']['threads']
bwameth_path = config['paths']['bwameth_path'],
{params.bwameth_path} \\
bwa index {input.genome}
bwa mem -t {threads} {input.genome} {input.read1} {input.read2} | samtools view -u -F 4 -q 30 -@ {threads} | samtools sort -O BAM -o {output.alignedBAM} -@ {threads}
alignedBAM = rules.bwa_map.output.alignedBAM,
outbam=temp("analysis/bwamem/{sample}.bam"),
outbai="analysis/bwamem/{sample}.bam.bai",
idxstat="analysis/bwamem/{sample}.bam.idxstat",
samblaster_err="analysis/bwamem/{sample}.samblaster.e",
stdout="logs/bwamem/{sample}.o",
stderr="logs/bwamem/{sample}.e",
"benchmarks/bwamem/{sample}.txt"
bwa_idx=bwa_index,
config[\'modules\'][\'bwa\'],
bwa mem \\
{params.bwa_idx} \\
echo "END bwamem"
echo "END bwamem" 1>&2
bam="analysis/bwamem/{sample}.bam"
"analysis/bwamem/{sample}.bam"
"analysis/bwamem/{bam_name}.bam"
"analysis/bwamem/{sample}.bam",
expand("analysis/bwamem/flagstat/{sample.sample}.flagstat", sample=samples.itertuples()),
expand("analysis/bwamem/CollectInsertSizeMetrics/{sample.sample}.insert_size_metrics.txt", sample=samples[samples[\'se_or_pe\']=="PE"].itertuples()),
expand("analysis/bwamem/{sample.sample}.bam.idxstat", sample=samples.itertuples()),
expand("analysis/bwamem/CollectAlignmentSummaryMetrics/{sample.sample}.aln_metrics.txt", sample=samples.itertuples()),
expand("analysis/bwamem/{sample.sample}.samblaster.e", sample=samples.itertuples()),
"analysis/bwamem/flagstat/",
"analysis/bwamem/",
"analysis/bwamem/CollectAlignmentSummaryMetrics/",
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
expand("data/{species.id}/indexes/bwa/{species.id}.bwt", species=species.itertuples()),
expand("data/{hybrid_genome_id}/indexes/bwa/{hybrid_genome_id}.bwt", hybrid_genome_id=hybrid_genomes.id),
"data/{species_id}/indexes/bwa/{species_id}.bwt",
"data/{species_id}/indexes/bwa/{species_id}.sa"
stdout="logs/bwa_idx/{species_id}.o",
stderr="logs/bwa_idx/{species_id}.e",
"benchmarks/bwa_idx/{species_id}.txt"
outpref="data/{species_id}/indexes/bwa/{species_id}"
config["bwa"]
bwa index \\
"bwa mem {input} | samtools view -Sb - > {output}"
message: "aligning bwa {input}: {threads} threads"
bwa = "00log/{sample}.align",
bwa mem -t 5 -M -v 1 -R \'{params.rg}\' {config[ref_fa]} {input[0]} {input[1]} 2> {log.bwa} \\
bwa aln -t 5 {config[ref_fa]} {input[0]} 2> {log.bwa} > 03aln/{wildcards.sample}_R1.sai
bwa aln -t 5 {config[ref_fa]} {input[1]} 2>> {log.bwa} > 03aln/{wildcards.sample}_R2.sai
bwa sampe -s -r \'{params.rg}\' {config[ref_fa]} 03aln/{wildcards.sample}_R1.sai 03aln/{wildcards.sample}_R2.sai {input[0]} {input[1]} 2>> {log.bwa} \\
message: "aligning bwa {input}: {threads} threads"
bwa = "00log/{sample}.align",
bwa mem -t 5 -M -v 1 -R \'{params.rg}\' {config[ref_fa]} {input} 2> {log.bwa} \\
bwa aln -t 5 {config[ref_fa]} {input} 2> {log.bwa} > 03aln/{wildcards.sample}.sai
bwa samse -r \'{params.rg}\' {config[ref_fa]} 03aln/{wildcards.sample}.sai {input} 2>> {log.bwa} \\
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"{sn}/benchmarks/{sn}_composite_reference_bwa_map.benchmark.tsv"
\'(bwa mem -t {threads} {params.composite_index} \'
\'{sn}/core/{sn}_viral_reference_bwa-build.log\'
"{sn}/benchmarks/{sn}_reference_bwa_build.benchmark.tsv"
\'bwa index -p {params.output_prefix} {input} >{log} 2>&1\'
"{sn}/benchmarks/{sn}_viral_reference_bwa_map.benchmark.tsv"
\'{sn}/core/{sn}_viral_reference_bwa.log\'
\'(bwa mem -t {threads} {params.ref_prefix} \'
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
bwa index -p {params} -a bwtsw {input}
bwa=config["BWAparams"],
RUN_DIR + "/logs/{sample}.{bin}.bwa.log"
bwa mem {params.bwa} {params.index} {input.R2} {input.R1} | \\
"bwa", "samtools", "gcc"
bwa aln -t {threads} {input.ref} {input.reads} > out/human/{wildcards.sample}/{wildcards.sample}.mito.sai
bwa samse {input.ref} out/human/{wildcards.sample}/{wildcards.sample}.mito.sai {input.reads} | samtools view -q 30 -bSh > out/human/{wildcards.sample}/{wildcards.sample}.mito.bam
"bwa", "samtools", "gcc"
bwa aln -t {threads} {input.ref} {input.reads} > out/human/{wildcards.sample}/{wildcards.sample}.auto.sai
bwa samse {input.ref} out/human/{wildcards.sample}/{wildcards.sample}.auto.sai {input.reads} | samtools view -q 30 -bSh > out/human/{wildcards.sample}/{wildcards.sample}.auto.bam
reference_chromossome = "../data/bwa/grch38.chr22.fasta"
"../data/bwa/grch38.chr22.fasta.amb",
"../data/bwa/grch38.chr22.fasta.ann",
"../data/bwa/grch38.chr22.fasta.bwt",
"../data/bwa/grch38.chr22.fasta.fai",
"../data/bwa/grch38.chr22.fasta.pac",
"../data/bwa/grch38.chr22.fasta.sa"
"../logs/bwa_index"
"{bwa} index {input.reference_chromossome}"
reference_chromossome = "../data/bwa/grch38.chr22.fasta",
bwa_index_output = "../data/bwa/grch38.chr22.fasta.amb"
"{bwa} mem {input.reference_chromossome} {input.amostra_R1} {input.amostra_R2} > {output.alignment}"
reference_chromossome = "../data/bwa/grch38.chr22.fasta",
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
bwa_index=paths.refgenome.bwt,
cli_opts=config["software"]["bwa"]["cli_opts"],
threads: config["software"]["bwa"]["threads"]
"../envs/bwa.yml"
"( bwa {params.cli_opts} -t {threads} "
expand("outputs/cds_as_noncoding_bwa/{orpheum_db}/{alpha_ksize}/{acc}_cds.nuc_noncoding.stat", orpheum_db = ORPHEUM_DB, alpha_ksize = ALPHA_KSIZE, acc = ACC),
expand("outputs/cds_as_coding_bwa/{orpheum_db}/{alpha_ksize}/{acc}_cds.nuc_coding.stat", orpheum_db = ORPHEUM_DB, alpha_ksize = ALPHA_KSIZE, acc = ACC)
conda: "envs/bwa.yml"
bwa index {input}
output: temp("outputs/cds_as_noncoding_bwa/{orpheum_db}/{alphabet}-k{ksize}/{acc}_cds.nuc_noncoding.bam")
conda: "envs/bwa.yml"
bwa mem -t {threads} {input.ref_nuc_cds} {input.nuc_noncoding} | samtools sort -o {output} -
input: "outputs/cds_as_noncoding_bwa/{orpheum_db}/{alphabet}-k{ksize}/{acc}_cds.nuc_noncoding.bam"
output:"outputs/cds_as_noncoding_bwa/{orpheum_db}/{alphabet}-k{ksize}/{acc}_cds.nuc_noncoding.stat"
conda: "envs/bwa.yml"
output: temp("outputs/cds_as_coding_bwa/{orpheum_db}/{alphabet}-k{ksize}/{acc}_cds.nuc_coding.bam")
conda: "envs/bwa.yml"
bwa mem -t {threads} {input.ref_nuc_cds} {input.nuc_coding} | samtools sort -o {output} -
input: "outputs/cds_as_coding_bwa/{orpheum_db}/{alphabet}-k{ksize}/{acc}_cds.nuc_coding.bam"
output:"outputs/cds_as_coding_bwa/{orpheum_db}/{alphabet}-k{ksize}/{acc}_cds.nuc_coding.stat"
conda: "envs/bwa.yml"
f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa"
f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.amb",
f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.ann",
f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.bwt",
f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.pac",
f"{ASSEMBLYDIR_VARIANT}/bwa/{FILENAME_BASE_ADD}.dna.{ENSEMBL_ID_TYPE}.fa.sa"
f"{LOGS_DIR}/bwa_index/{FILENAME_BASE_ADD}.log"
f"{WRAPPERBASE}/bio/bwa/index"
rgi bwt --read_one {input.read1} --read_two {input.read2} --output_file {params.output_prefix} --aligner bwa --threads {threads} >>{log} 2>&1
bwa mem {input.megares_db} {params.output_prefix_tmp}/{wildcards.sample}_r1_pe_trimmed.fq {params.output_prefix_tmp}/{wildcards.sample}_r2_pe_trimmed.fq 2>> {log} | samtools sort -n -O sam > {params.output_prefix_tmp}/{wildcards.sample}.sam 2>>{log}
Needed for the crossMapParallel implementation, which uses kalliso for fast mapping instead of bwa.
instead of bwa for mapping operations. This implementation is recommended for
Cross map all samples with bwa then use the output of this rule to create contig abundance/depth files
temp(\'{output_dir}/pipeline/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.sam\')
bwa_index = lambda wildcards: get_cohort_config(wildcards.cohort)[\'bwa_index\']
bwa mem -M -t4
{params.bwa_index}
\'{output_dir}/pipeline/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.sam\'
bam = temp(\'{output_dir}/pipeline/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.sorted.bam\'),
index = temp(\'{output_dir}/pipeline/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.sorted.bam.bai\'),
\'{{output_dir}}/pipeline/{{cohort}}/tmp/bwa_mem/\' + wildcards.sample + \'_lib{lib}.sorted.bam\',
"logs/bwamem/{sample_dir}.log"
bwa mem \\
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
bwa index {input}
bwa mem -p -v 3 -t {threads} -T 0 \\
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"envs/bwamem2.yaml"
"bwa-mem2 index {input}"
idx = rules.bwa_index.output,
"envs/bwamem2.yaml"
bwa-mem2 mem -t {resources.cpus} {input.assembly} {input.reads} | samblaster -r | samtools view -b - > {output}
If the mapping has been done with bwa mem -M option, using the smoove pipeline, the support for SR will always be zero.
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"envs/bwa.yaml"
bwa index {input.ref}
index=rules.generate_bwa_index.output.idx,
bam=results("bwa", "{library}.bam"),
"envs/bwa.yaml"
prefix=splitext(rules.generate_bwa_index.output.idx[0])[0],
bwa mem -t {threads} {params.prefix} {input.fqs} | \\
"envs/bwa.yaml"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
\t\tbwa index {input.contig}
\t\tbwa mem -C -t{config[threads]} {input.contig} {input.linked_reads} | samtools sort -tBX -o {output} -@{config[threads]}
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
custom=config.get("params_bwa_mem", ""),
sge_opts="-l mfree=8G -pe serial 10 -N bwa_mem_map -l disk_free=20G -l h_rt=7:0:0:0 -q eichler-short.q -l ssd=True",
bwa_threads = "10",
run-bwamem -t {params.bwa_threads} -dso $TMPDIR/tmp {input[0]} {input[1]} | bash
custom=config.get("params_bwa_mem", ""),
sge_opts="-l mfree=6G -pe serial 10 -N bwa_mem_map -l disk_free=10G -l h_rt=3:0:0:0 -q eichler-short.q -soft -l ssd=True -R y",
bwa_threads = "10",
bwa mem {params.custom} -R \'@RG\\\\tID:{params.flowcell}_{wildcards.lane}\\\\tSM:{params.sample}\\\\tLB:{params.sample}\\\\tPL:{config[platform]}\\\\tPU:{params.flowcell}\' \\
-t {params.bwa_threads} {input} 2> {log} | \\
message: "Building bwa-mem2 genome index"
bwa-mem2 index {params.genome}
bwa-mem2 mem -t {threads} -C {params.genome} $R1 $R2 \\
("bwa mem -v 3 -x intractg -t {threads} {input.contigs} {input.r1} {input.r2} | "
"analysis_output/{unit}/bwa-mem2/{sample}_{threads}.bam",
temp("analysis_output/{unit}/bwa-mem2/{sample}_{threads}.bai"),
"analysis_output/{unit}/bwa-mem2/{sample}_{threads}_index_bam.log",
"analysis_output/{unit}/bwa/{sample}_{threads}.bam",
temp("analysis_output/{unit}/bwa/{sample}_{threads}.bai"),
"analysis_output/{unit}/bwa/{sample}_{threads}_index_bam.log",
assembly_copy = expand("{base}/bwa_index/{assembly_group}.fa", base = SCRATCHDIR, assembly_group = METAG_ASSEMBLYGROUP),
bwa_index = expand("{base}/bwa_index/{assembly_group}.fa.{bwa_tail}", base = SCRATCHDIR, assembly_group = METAG_ASSEMBLYGROUP, bwa_tail = ["amb", "ann", "bwt", "pac", "sa"]),
bwa_memG = get_sample_list(METAG_ASSEMBLYGROUP, METAG_SAMPLELIST, METAG_ACCESSION),
bwa_memT = get_sample_list(METAT_ASSEMBLYGROUP, METAT_SAMPLELIST, METAT_ACCESSION),
SCRATCHDIR + "/bwa_index/{assembly_group}.fa"
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.amb",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.ann",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.bwt",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.pac",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.sa"
OUTPUTDIR + "/logs/bwa_index/{assembly_group}.log"
bwa index {input} 2> {log}
SCRATCHDIR + "/bwa_index/{assembly_group}.fa"
amb = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.amb",
ann = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.ann",
bwt = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.bwt",
pac = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.pac",
sa = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.sa",
reference = SCRATCHDIR + "/bwa_index/{assembly_group}.fa",
OUTPUTDIR + "/logs/bwa_mem/{assembly_group}/{study}/{sample}.log"
bwa mem -t {params.threads} {params.extra} {input.reference} {input.r1} {input.r2} | samtools sort -o {output} - >> {log} 2>&1
\tbwa index {input}
\tbwa mem -t 1 -M \\
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"bwa mem -t {threads} {input} | samtools view -Sb - > {output}"
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
"envs/bwa.yaml"
"bwa mem {input} | samtools view -Sb - > {output}"
"envs/bwa.yaml"
"envs/bwa.yaml"
"envs/bwa.yaml"
"logs/{prefix}.bwa.stderr.log"
threads: config["bwa_threads"]
bwa mem -K 100000000 -p -v 3 -t {threads} -Y {input.reference} /dev/stdin - 2> >(tee {log} >&2) | \\
v_bwa = bwa_version
--PROGRAM_RECORD_ID "bwamem" \\
--PROGRAM_GROUP_VERSION "{params.v_bwa}" \\
--PROGRAM_GROUP_COMMAND_LINE "bwa mem -K 100000000 -p -v 3 -t 2 -Y {input.reference}" \\
--PROGRAM_GROUP_NAME "bwamem" \\
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
idx=rules.bwa_index.output,
"logs/bwa_mem/{sample}-{unit}.log",
"0.60.7/bio/bwa/mem"
"logs/bwa_index.log",
"0.60.7/bio/bwa/index"
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
"bwa mem {input} | samtools view -Sb - > {output}"
"logs/bwa_index.log"
"0.53.0/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.52.0/bio/bwa/mem"
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
input:fasta=config["references"]["bwa"],
( echo -e "@HD\\tVN:1.4\\tSO:queryname"; bwa mem {input.fasta} <( echo -e \'@test\
fasta=config["references"]["bwa"],
bwa mem -L 80 -M -C {input.fasta} <( samtools view -F {params.samflag} {input.bam} | awk \'BEGIN{{ OFS="\\\
bwa mem -M -L 80 -C {input.inv} <(
"bwa mem -t {threads} {input.genome} {input.reads} | "
\t\texpand(f"{OUTDIR}/logs/bwa_mem/{{sample}}.stats", sample=SAMPLES)
\t\tsai1 = temp( f"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}_1.sai")
\tlog: f"{OUTDIR}/round{ROUND}/logs/bwa_aln/{{sample}}_map1.log"
\t\t"bwa aln -t {threads} {input.REF} {input.fq1} 2> {log} > {output.sai1}"
\t\tsai2 = temp(f"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}_2.sai")
\tlog: f"{OUTDIR}/round{ROUND}/logs/bwa_aln/{{sample}}_map2.log"
\t\t"bwa aln -t {threads} {input.REF} {input.fq2} 2> {log} > {output.sai2}"
\t\tsai1 = f"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}_1.sai",
\t\tsai2 = f"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}_2.sai",
\t\ttemp(f"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}.bam")
\tlog: f"{OUTDIR}/round{ROUND}/logs/bwa_sampe/{{sample}}_map2.log"
\t\t"bwa sampe -P {input.REF} {input.sai1} {input.sai2} {input.fq1} {input.fq2} 2> {log} | samtools view -bS - > {output}"
\t\tf"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}.bam"
\t\tf"{OUTDIR}/round{ROUND}/logs/bwa_aln/{{sample}}.stats"
\t\tf"{OUTDIR}/bwa_mem/{{sample}}.bam"
\tlog:  f"{OUTDIR}/logs/bwa_mem/{{sample}}.log"
\t\t"bwa mem -M -t {threads} {input.REF} {input.fq1} {input.fq2} 2> {log} | samtools view -bS - > {output}"
\t\tf"{OUTDIR}/bwa_mem/{{sample}}.bam"
\t\tf"{OUTDIR}/logs/bwa_mem/{{sample}}.stats"
\t\tbam = f"{OUTDIR}/round{ROUND}/bwa_aln/{{sample}}.bam",
\t\t"bwa index -a bwtsw {input}"\t
"bwa/0.7.17",
"bash scripts/bwa_map.sh {wildcards.sample} {input[0]} {input[1]} > {output}"
\t\tbam_out = "mapped_reads/{sample}.vs_{ref_genome}.bwa.sort.bam",
\t\tshell("bwa aln {input.ref_genome_file} {input.reads_in} > {input.reads_in}.sai ")
\t\tshell("bwa samse {input.ref_genome_file} {input.reads_in}.sai {input.reads_in} | samtools view -Shb | samtools addreplacerg -r ID:{wildcards.sample} -r SM:{wildcards.sample} - | samtools sort -o {output.bam_out} - ")
\t\tbam_in = "mapped_reads/{sample}.vs_{ref_genome}.bwa.sort.bam",
\t\tbam_cntrl = lambda wildcards: "mapped_reads/%s.vs_%s.bwa.sort.bam" % tuple([partition_experimental_by_put(sample_by_name[wildcards.sample]["experimental"])["in"][0]["name"], "dm6"]),
\t\tbams_rep = lambda wildcards: expand( "mapped_reads/{samp}.vs_{ref_gen}.bwa.sort.bam", samp =list(set(sampname_by_group[wildcards.group]).intersection(set([c[\'name\'] for c in partition_experimental_by_put(wildcards.experimental)["out"]]) )), ref_gen=["dm6"] ),
\t\tbam_cntrl = lambda wildcards: expand( "mapped_reads/{samp}.vs_{ref_gen}.bwa.sort.bam", samp = partition_experimental_by_put(wildcards.experimental)["in"][0]["name"], ref_gen=["dm6"] ),
\t\taligned_reads_summary = ["summaries/alignments.vs_dm6.bwa.summary"],
\t\t# called_peak_stats = ["meta/basicPeakStats.vs_dm6.bwa.summary"],
\t\t# collapsed_peak_stats = ["meta/collapsedPeakStats.vs_dm6.bwa.summary"],
\t\t# merged_peak_stats = ["meta/mergedPeakStats.vs_dm6.bwa.summary"],
\t\t# contrast_stats = ["meta/contrastedPeakStats.shared.vs_dm6.bwa.summary", "meta/contrastedPeakStats.exclusive.vs_dm6.bwa.summary"],
"bwa-mem2 index {input}"
idx = rules.bwa_index.output,
conda: "envs/bwa.yml"
bwa index {input}
conda: "envs/bwa.yml"
bwa index {input}
conda: "envs/bwa.yml"
bwa mem -p -t {threads} {input.ref_assembly} {input.reads} | samtools sort -o {output} -
conda: "envs/bwa.yml"
conda: \'envs/bwa.yml\'
conda: \'envs/bwa.yml\'
conda: "envs/bwa.yml"
bwa mem -p -t {threads} {input.ref_assembly} {input.reads} | samtools sort -o {output} -
conda: "envs/bwa.yml"
conda: \'envs/bwa.yml\'
conda: \'envs/bwa.yml\'
conda: "envs/bwa.yml"
conda: \'envs/bwa.yml\'
conda: \'envs/bwa.yml\'
conda: \'envs/bwa.yml\'
conda: "envs/bwa.yml"
conda: \'envs/bwa.yml\'
bwa index {input.ref}
bwa mem {input.ref} {input.fastq} | samtools view -u | samtools sort -o {output}
bwa_bam = results_dir + "{sample}/{sample}_bwa.bam",
rg_bwa = rg_option_bwa,
bwa_samblaster = "samblaster --ignoreUnmated |"
bwa mem {config[BWA_CUSTOM_OPTIONS]} {params.rg_bwa} -t {config[NUMBER_CPU]} {config[BWA_INDEX]} {params.unaligned_reads} | {params.bwa_samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {params.bwa_bam} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {params.bwa_bam}
samtools merge -c -@ {config[NUMBER_CPU]} -f -h {params.header} {output.bam_file} {params.hisat2_bam} {params.bwa_bam}
rm {params.unaligned_reads} {params.header} {params.hisat2_bam} {params.bwa_bam} {params.out_dir}{params.sample}/{params.sample}_hisat2.bam.bai {params.out_dir}{params.sample}/{params.sample}_bwa.bam.bai
bwa mem {config[BWA_CUSTOM_OPTIONS]} {params.rg_bwa} -t {config[NUMBER_CPU]} {config[BWA_INDEX]} {params.unaligned_reads} | {params.bwa_samblaster} samtools view -@ {config[NUMBER_CPU]} -Sb - | sambamba sort -t {config[NUMBER_CPU]} --tmpdir={params.tmp} -o {params.bwa_bam} /dev/stdin
samtools index -@ {config[NUMBER_CPU]} {params.bwa_bam}
samtools merge -c -@ {config[NUMBER_CPU]} -f -h {params.header} {output.bam_file} {params.hisat2_bam} {params.bwa_bam}
rm {params.unaligned_reads} {params.header} {params.hisat2_bam} {params.bwa_bam} {params.out_dir}{params.sample}/{params.sample}_hisat2.bam.bai {params.out_dir}{params.sample}/{params.sample}_bwa.bam.bai
filename = f"bwa.gatk_hc.{name}.vcf.gz"
\t\t"../envs/bwa.yml"
\t\t"docker://szsctt/bwa:1"
stdout="results/logs/{sample}.bwa_index_{assembler}.stdout",
stderr="results/logs/{sample}.bwa_index_{assembler}.stderr"
"results/benchmarks/{sample}.bwa_index_{assembler}.tsv"
bwa index -p {params.prefix} \\
index_files = rules.bwa_index.output.index_files
bwa_mem_stderr="results/logs/{sample}.bwa_mem_{assembler}.stderr",
"results/benchmarks/{sample}.bwa_mem_{assembler}.tsv"
bwa mem -t {threads} \\
{input.fqs[0]} {input.fqs[1]} 2>{log.bwa_mem_stderr} \\
bam=rules.bwa_mem.output.bam,
bam_index=rules.bwa_mem.output.bam_index
bam=rules.bwa_mem.output.bam,
bam_index=rules.bwa_mem.output.bam_index
bam=rules.bwa_mem.output.bam,
\t\t"logs/bwa_align.log"
\t\t"(bwa index {input.ref} "
\t\t"&& bwa mem {input.ref} {input.r1} {input.r2} | samtools view -Sbh > {output}) 2> {log}"
"bwa index {input.fasta} 2> {log}"
"bwa mem -t {threads} {params.idx} {input.reads} | "
"bwa index {input.fasta} 2> {log}"
"bwa mem -t {threads} {params.idx} {input.reads} | "
"bwa index {input.fasta} 2> {log}"
"bwa mem -t {threads} {params.idx} {input.reads} | "
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"{build}/stats/coverage/bwa/{sample}/{sample}.{unique_id}_{build}.coverage.tsv"
expand(expand("{{build}}/stats/bwa/{sample}/{sample}.{unique_id}_{{build}}.idxstats.tsv", zip, sample = sequences[\'Sample\'], unique_id =  sequences["unique_id"]), build = ["b38"] ),
expand(expand("{{build}}/stats/coverage/bwa/{sample}/{sample}.{unique_id}_{{build}}.coverage.tsv", zip, sample = sequences[\'Sample\'], unique_id =  sequences["unique_id"]), build = ["b38"] ), # individual bam files
"{build}/stats/bwa/{sample}/{sample}.{unique_id}_{build}.idxstats.tsv"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
OUTPUT_DIR+"/summary/bwa_cov-est.csv",
OUTPUT_DIR+"/summary/bwa_cov-exp.csv",
OUTPUT_DIR+"/summary/bwa_counts-total.csv",
OUTPUT_DIR+"/summary/bwa_counts-unique.csv"
bwa_db = config["database"]["bwa_db"],
tools/map2ref.sh -t 8 -i {input.fwd} -n {input.rev} -r {params.bwa_db} -o {params.outpref} -c {params.reftype}
OUTPUT_DIR+"/summary/bwa_cov-est.csv"
tools/parse_bwa-cov.py -i {params.outdir} -o {output}
OUTPUT_DIR+"/summary/bwa_cov-exp.csv"
tools/parse_bwa-expcov.py -i {params.outdir} -o {output}
OUTPUT_DIR+"/summary/bwa_counts-{type}.csv"
tools/parse_bwa-counts.py -i {params.outdir} -f {wildcards.type} -o {output}
expand_pools_groups("map_bwa/{pool}_{group}.sorted.bam.flagstat"),
output: "map_bwa/{pool}_{group}.unsorted.sam"
shell("bwa mem -t {threads} %s {input}/forward.fastq.gz {input}/backward.fastq.gz > {output}" % options)
input: "map_bwa/{pool}_{group}.unsorted.bam"
input: "map_bwa/{pool}_{group}.unsorted.bam"
input: "map_bwa/{pool}_{group}.sorted.bam"
"bwa index {input.ref}; bwa mem -t {threads} {input.ref} {input.reads} | \\
"logs/bwa_index.log"
"0.59.2/bio/bwa/index"
idx=rules.bwa_index.output
"logs/bwa_mem/{sample}-{unit}.log"
"0.59.2/bio/bwa/mem"
bwa index {input.megares_db} \\
bwa mem \\
conda: "envs/bwa.yaml"
shell: "which bwa && bwa mem -t {threads} -R {params.RG} {input.ref} {input.fastq} -o {output}"
conda: "envs/bwa.yaml"
shell: "which bwa && bwa mem -t {threads} -R {params.RG} {input.ref} {input.fastq} -o {output}"
bwa index {input.fname_reference}
bwa mem {input.fname_reference} {input.fname_fastq_merged} > {output.fname_bam}
bwa index {output.fname_reference}
bwa mem \\
assembly_copy = expand("{base}/bwa_index/{assembly_group}.fa", base = SCRATCHDIR, assembly_group = METAG_ASSEMBLYGROUP),
bwa_index = expand("{base}/bwa_index/{assembly_group}.fa.{bwa_tail}", base = SCRATCHDIR, assembly_group = METAG_ASSEMBLYGROUP, bwa_tail = ["amb", "ann", "bwt", "pac", "sa"]),
bwa_memG = get_sample_list(METAG_ASSEMBLYGROUP, METAG_SAMPLELIST, METAG_ACCESSION),
bwa_memT = get_sample_list(METAT_ASSEMBLYGROUP, METAT_SAMPLELIST, METAT_ACCESSION),
SCRATCHDIR + "/bwa_index/{assembly_group}.fa"
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.amb",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.ann",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.bwt",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.pac",
SCRATCHDIR + "/bwa_index/{assembly_group}.fa.sa"
OUTPUTDIR + "/logs/bwa_index/{assembly_group}.log"
bwa index {input} 2> {log}
SCRATCHDIR + "/bwa_index/{assembly_group}.fa"
amb = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.amb",
ann = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.ann",
bwt = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.bwt",
pac = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.pac",
sa = SCRATCHDIR + "/bwa_index/{assembly_group}.fa.sa",
reference = SCRATCHDIR + "/bwa_index/{assembly_group}.fa",
OUTPUTDIR + "/logs/bwa_mem/{assembly_group}/{study}/{sample}.log"
bwa mem -t {params.threads} {params.extra} {input.reference} {input.r1} {input.r2} | samtools sort -o {output} - >> {log} 2>&1
bwa index {input}
bwa mem -p -v 3 -t {threads} -T 0 \\
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
output: "assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd.amb",
"assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd.ann",
"assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd.bwt",
"assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd.pac",
"assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd.sa"
conda: "envs/bwa.yaml"
shell: "bwa index -a bwtsw " + \\
"-p assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd " + \\
input: index = "assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd.sa",
output: "assembly_wtdbg2/bwa/{lib}.bam"
conda: "envs/bwa.yaml"
shell: "bwa mem -t 30 " + \\
"assembly_wtdbg2/bwa/EGYPTREF_wtdbg2.ctg.2nd "+\\
input: expand("assembly_wtdbg2/bwa/{lib}.bam", lib=ILLUMINA_LIBS)
output: "assembly_wtdbg2/bwa/sr.srt.bam"
input: "assembly_wtdbg2/bwa/sr.srt.bam",
shell: "bwa index {input[0]}"
shell: "bwa mem -t8 -p -C {input[0]} {input[1]} |" + \\
shell: "bwa index -p {params.prefix} {input[0]}"
shell: "bwa mem -t 48 -p -C {input[0]} {input[1]} |" + \\
expand("OD_bwa_index/{sample}.sa", sample = SAMPLES),
"Run bwa indexer"
"OD_bwa_index/{sample}.sa"
bwa index -p OD_bwa_index/{wildcards.sample} {input}
"Run bwa alignment"
"OD_bwa_index/{sample}.sa",
bwa mem -t {threads} \\
OD_bwa_index/{wildcards.sample} \\
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"logs/bwa_index.log",
"0.59.2/bio/bwa/index"
"05.Build_Host_index/{project}_bwa_index".format(project=config[\'project_name\'])
program=config[\'programs_path\'][\'bwa\']
index="05.Build_Host_index/{project}_bwa_index".format(project=config[\'project_name\']),
"logs/bwa/{sample}.log"
program=config[\'programs_path\'][\'bwa\'],
idx=config["bwa_genome"]
"results/logs/bwa_mem/{sample}.log",
"bwa/0.7.15",
"v1.3.2/bio/bwa/mem"
idx=config["bwa_genome"]
"results/logs/bwa_mem/{sample}.log",
"bwa/0.7.15",
"v1.3.2/bio/bwa/mem"
temp(path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.paired.bam\')
bwa_index = lambda wildcards: get_cohort_config(wildcards.cohort)[\'bwa_index\']
"bwa mem -M -t4 -R\'{params.read_group}\' {params.bwa_index} {input.R1} {input.R2} | samtools view -bSo {output}"
temp(path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.single.bam\')
bwa_index = lambda wildcards: get_cohort_config(wildcards.cohort)[\'bwa_index\']
"bwa mem -M -t4 -R\'{params.read_group}\' {params.bwa_index} {input.R1} | samtools view -bSo {output}"\t\t\t
path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.paired.bam\'
bam = temp(path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.paired.sorted.bam\'),
index = temp(path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.paired.sorted.bam.bai\'),
path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.single.bam\'
bam = temp(path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.single.sorted.bam\'),
index = temp(path_to_data + \'/{cohort}/tmp/bwa_mem/{sample}_lib{lib}.single.sorted.bam.bai\'),
path_to_data + \'/\' + wildcards.cohort + \'/tmp/bwa_mem/\' + wildcards.sample + \'_lib{lib}.paired.sorted.bam\',
path_to_data + \'/\' + wildcards.cohort + \'/tmp/bwa_mem/\' + wildcards.sample + \'_lib{lib}.single.sorted.bam\',
path_to_data + \'/samples/{sample}/merged/bwa_mem/aligned.sorted.markdup.bam\'
sam=rules.bwa_mem.output
MAP_DOC + "bwa_index_reference.log"
MAP_DOC + "bwa_index_reference.json"
"bwa index {input} &> {log}"
bwa_params = config["BWA-Mapping"]["BWA_mem_params"],
MAP_DOC + "bwa_{sample}_pe.log"
MAP_DOC + "bwa_{sample}_pe.json"
"(bwa mem -R \'{params.rg}\' {params.bwa_params} {input.reference} {input.forward} {input.reverse} | "
bwa_params = config["BWA-Mapping"]["BWA_mem_params"],
MAP_DOC + "bwa_{sample}.log"
MAP_DOC + "bwa_{sample}.json"
"(bwa mem -R \'{params.rg}\' {params.bwa_params} {input.reference} {input.Flashed_read} | "
bwa_params = config["BWA-Mapping"]["BWA_mem_params"],
MAP_DOC + "bwa_{sample}.log"
MAP_DOC + "bwa_{sample}.json"
"(bwa mem -R \'{params.rg}\' {params.bwa_params} {input.reference} {input.single} | "
\t\t"bwa mem -M -t {threads} {input.genome} {input.input1} {input.input2} | gzip -c > {output}"
\t\tsam   = temp("temp/align/bwa_mem/{sample}.sam")
\tlog: "logs/bwa_mem/{sample}.log"
\t\t"(module load tools samtools/1.9 bwa/{version}; "
\t\t"bwa mem -M -t {threads} -R {params.rg} {input.ref} {input.reads} > {output.sam}; "
\t\tsam = rules.bwa_mem.output.sam
"bwa mem -t {threads} -M "
"bwa mem -t {threads} -M "
"bwa mem -t {threads} -M "
"bwa mem -t {threads} -M "
threads: get_resource("bwa_idx_genome","threads")
mem_mb = get_resource("bwa_idx_genome","mem"),
walltime = get_resource("bwa_idx_genome","walltime")
f"{LOGDIR}/bwa_idx_genome/bwa_idx_genome.log"
f"{LOGDIR}/bwa_idx_genome/bwa_idx_genome.bmk"
"0.79.0/bio/bwa-mem2/index"
f"{LOGDIR}/bwa_mem/{{sample}}-{{unit}}.log"
"0.79.0/bio/bwa-mem2/mem"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
containers["bwa-0.7.17-samtools-1.3.1-picard-2.9.2"]
bwa mem \\
containers["bwa-0.7.17-samtools-1.3.1-picard-2.9.2"]
bwa mem \\
maps + "{sample}/{library}.bwa.log"
maps + "{sample}/{library}.bwa.json"
"(bwa mem "
"input/DNAse-seq_MCF7_ENCSR000EPH_rep1_1_se_bwa_biorep_filtered_peaks_aka_ENCFF961ZCT.bed",
query = "input/DNAse-seq_MCF7_ENCSR000EPH_rep1_1_se_bwa_biorep_filtered_peaks_aka_ENCFF961ZCT.bed",
shell("bwa mem -v 1 -t {threads} -R \'@RG\\\\tID:{READ_GROUP}\\\\tPL:ILLUMINA\\\\tLB:{wildcards.unit}\\\\tSM:{wildcards.sample}\' {params.db_prefix} {input.forward} >{output}")
shell("bwa mem -v 1 -t {threads} -R \'@RG\\\\tID:{READ_GROUP}\\\\tPL:ILLUMINA\\\\tLB:{wildcards.unit}\\\\tSM:{wildcards.sample}\' {params.db_prefix} {input.forward} {input.reverse} >{output}")
"bwa index -p {params.db_prefix} {input}"
"logs/bwa_mem/{sample}-{unit}.log"
"0.27.1/bio/bwa/mem"
"{genome}.bwa_index.log"
"bwa index"
mem="results/logs/bwa_mem/{sample}-{unit}.log",
"bwa mem"
expand("output_dir/bwa/Ref_nCoV_{sample}.sam", sample=SAMPLES),
bwa1="output_dir/bwa/Ref_nCov_{sample}_1.sai",
bwa2="output_dir/bwa/Ref_nCov_{sample}_2.sai",
stderr1="output_dir/bwa/Ref_nCov_{sample}_1.sai.stderr.log",
stderr2="output_dir/bwa/Ref_nCov_{sample}_2.sai.stderr.log",
bwa aln -t 4 \\
{params.db} {input.read1} > {output.bwa1}\\
bwa aln -t 4 \\
{params.db} {input.read2} > {output.bwa2}\\
bwa1="output_dir/bwa/Ref_nCov_{sample}_1.sai",
bwa2="output_dir/bwa/Ref_nCov_{sample}_2.sai",
sam="output_dir/bwa/Ref_nCoV_{sample}.ori.sam",
stderr="output_dir/bwa/Ref_nCoV_{sample}.ori.sam.stderr.log"
bwa sampe {params.db} \\
{input.bwa1} {input.bwa2} {input.read1} {input.read2}\\
"output_dir/bwa/Ref_nCoV_{sample}.ori.sam"
"output_dir/bwa/Ref_nCoV_{sample}.sam"
stdout="output_dir/bwa/Ref_nCoV_{sample}.sam.FLT.stdout.log",
stderr="output_dir/bwa/Ref_nCoV_{sample}.sam.FLT.stderr.log",
"output_dir/bwa/Ref_nCoV_{sample}.sam",
ref = rules.bwa_index.input.fasta
"""make index with bwa for reference file"""
threads: get_threads(\'bwa_index\', 1)
error =  f\'{log_dir}bwa_index/{basename_reference}.e\',
output = f\'{log_dir}bwa_index/{basename_reference}.o\'
(bwa index {input.fasta}) 1>{log.output} 2>{log.error}
"""make bwa mem for all samples on reference"""
threads: get_threads(\'bwa_mem_sort_bam\', 1)
other_options_bwa = config["PARAMS_TOOLS"]["BWA_MEM"],
error =  f\'{log_dir}bwa_mem_sort_bam/{{samples}}.e\',
output = f\'{log_dir}bwa_mem_sort_bam/{{samples}}.o\'
- other_options_bwa: {{params.other_options_bwa}}
(bwa mem -t {threads} {input.fasta} {input.R1} {input.R2} -R \'{params.rg}\' |
"""make bwa aln for all samples PE on reference"""
threads: get_threads(\'run_bwa_aln_PE\', 1)
index = rules.bwa_index.output.index,
error =  f\'{log_dir}run_bwa_aln_PE/{{samples}}.e\',
output = f\'{log_dir}run_bwa_aln_PE/{{samples}}.o\'
(bwa aln -t {threads} {params.other_options} -f {output.sai_R1} {input.fasta} {input.R1}) 1>{log.output} 2>{log.error} &&
(bwa aln -t {threads} {params.other_options} -f {output.sai_R2} {input.fasta} {input.R2}) 1>{log.output} 2>{log.error}
"""make bwa sampe for all samples PE on reference"""
threads: get_threads(\'bwa_sampe_sort_bam\', 1)
index = rules.bwa_index.output.index,
R1 = rules.run_bwa_aln.input.R1,
R2 = rules.run_bwa_aln.input.R2,
sai_R1 = rules.run_bwa_aln.output.sai_R1,
sai_R2 = rules.run_bwa_aln.output.sai_R2
other_options_bwa = config["PARAMS_TOOLS"]["BWA_SAMPE"],
error =  f\'{log_dir}bwa_sampe_sort_bam/{{samples}}.e\',
output = f\'{log_dir}bwa_sampe_sort_bam/{{samples}}.o\'
- other_options_bwa: {{params.other_options_bwa}}
(bwa sampe -r"{params.rg}" {params.other_options_bwa} {input.fasta} {input.sai_R1} {input.sai_R2} {input.R1} {input.R2} |
ref=config[\'bwa\'][\'REF\'],
n=config[\'bwa\'][\'max_edit_distance\'],
q=config[\'bwa\'][\'read_trimming_param\'],
log: DIR_OUT + DIR_LOG + "bwa/{sample}.log"
"bwa aln -n {params.n} -t {threads} -q {params.q} {params.ref} {input} > {output.sai} 2> {log}; "
"bwa samse -f {output.samse} -r \'@RG\\\\tID:{wildcards.sample}\\\\tSM:{wildcards.sample}\'"
