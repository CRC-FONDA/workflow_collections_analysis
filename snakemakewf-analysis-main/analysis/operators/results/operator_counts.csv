operator, count by repo, count by rule, total count
samtools, 190, 504, 773
mkdir, 143, 494, 588
rm, 136, 328, 457
cat, 118, 277, 344
python, 113, 470, 495
echo, 96, 330, 857
mv, 90, 232, 378
sed, 87, 192, 351
cut, 85, 191, 386
awk, 80, 201, 297
&1, 79, 364, 391
Rscript, 79, 274, 285
bcftools, 77, 176, 252
cd, 72, 213, 258
grep, 70, 144, 259
gzip, 70, 143, 177
fastqc, 64, 103, 110
wget, 63, 152, 193
cp, 62, 118, 183
if, 59, 197, 288
touch, 56, 171, 203
bwa, 53, 89, 104
sort, 51, 111, 132
2, 49, 274, 302
for, 48, 130, 165
multiqc, 45, 62, 72
bedtools, 43, 157, 225
fi, 41, 148, 224
gunzip, 41, 77, 99
done, 39, 111, 138
ln, 38, 63, 95
bgzip, 37, 105, 118
else, 37, 91, 111
zcat, 35, 82, 103
python3, 32, 131, 138
tar, 32, 43, 46
tr, 31, 89, 100
rbt, 31, 31, 31
bedextract, 30, 30, 30
set, 29, 305, 509
STAR, 29, 49, 52
perl, 28, 99, 120
tabix, 28, 87, 94
export, 27, 78, 135
bowtie2, 27, 35, 38
picard, 26, 48, 48
trim_galore, 25, 30, 41
seqtk, 24, 31, 39
1, 23, 73, 82
minimap2, 23, 35, 35
&, 22, 82, 85
head, 22, 54, 61
tail, 22, 34, 46
/dev/null, 22, 28, 30
gatk, 20, 125, 131
uniq, 20, 47, 51
java, 20, 34, 39
curl, 20, 33, 46
paste, 19, 48, 83
then, 19, 25, 29
bowtie2-build, 19, 25, 25
R, 18, 67, 67
bash, 18, 47, 47
do, 18, 43, 47
wc, 18, 39, 52
tee, 18, 35, 37
featureCounts, 18, 27, 27
module, 16, 69, 85
&&, 16, 34, 39
pigz, 15, 52, 63
salmon, 15, 26, 28
cutadapt, 15, 26, 27
ls, 15, 22, 24
trimmomatic, 15, 18, 18
infer_experiment.py, 15, 15, 15
bamCoverage, 14, 23, 25
bam_stat.py, 14, 15, 15
read_GC.py, 14, 15, 15
read_distribution.py, 14, 14, 14
), 13, 31, 33
kallisto, 13, 21, 21
find, 13, 16, 23
fastp, 13, 14, 15
&2, 12, 72, 101
[, 12, 41, 65
(, 12, 33, 47
/, 12, 19, 34
snakemake, 12, 18, 23
dot, 12, 18, 23
read_duplication.py, 12, 13, 13
junction_saturation.py, 12, 12, 12
inner_distance.py, 12, 12, 12
junction_annotation.py, 11, 11, 11
conda, 10, 94, 185
while, 10, 41, 47
macs2, 10, 22, 25
hisat2, 10, 21, 24
plink, 10, 21, 21
source, 9, 49, 67
stringtie, 9, 21, 21
gffread, 9, 14, 14
xargs, 9, 14, 14
true, 9, 12, 14
spades.py, 9, 12, 12
megahit, 9, 10, 10
seqkit, 9, 9, 13
imctools, 9, 9, 9
/ilastik-release/bin/python, 9, 9, 9
unzip, 8, 12, 12
bedGraphToBigWig, 8, 10, 10
gtdbtk, 8, 10, 10
jgi_summarize_bam_contig_depths, 8, 8, 8
qiime, 7, 169, 250
vcftools, 7, 46, 52
augur, 7, 30, 32
+, 7, 24, 30
rsync, 7, 11, 15
git, 7, 10, 20
bwa-mem2, 7, 10, 10
kraken2, 7, 9, 10
metabat2, 7, 9, 9
reformat.sh, 7, 7, 8
RepeatMasker, 7, 7, 7
hisat2-build, 7, 7, 7
prodigal, 7, 7, 7
r, 6, 90, 90
exit, 6, 23, 33
checkm, 6, 15, 22
elif, 6, 14, 25
sourmash, 6, 13, 15
diamond, 6, 12, 14
rev, 6, 10, 12
gffcompare, 6, 10, 10
chmod, 6, 9, 10
=, 6, 6, 14
zgrep, 6, 6, 10
plotCorrelation, 6, 6, 7
iqtree, 6, 6, 6
freebayes, 6, 6, 6
singularity, 5, 18, 19
md5sum, 5, 15, 22
bismark_methylation_extractor, 5, 14, 22
sh, 5, 14, 14
bismark, 5, 12, 12
multiBamSummary, 5, 12, 12
NanoPlot, 5, 12, 12
biom, 5, 9, 15
printf, 5, 9, 12
ulimit, 5, 8, 8
qualimap, 5, 8, 8
mafft, 5, 8, 8
sleep, 5, 7, 10
blastn, 5, 7, 7
zip, 5, 7, 7
parallel, 5, 7, 7
porechop, 5, 7, 7
bismark_genome_preparation, 5, 7, 7
0, 5, 6, 10
mosdepth, 5, 6, 6
concoct, 5, 5, 5
flye, 5, 5, 5
vep, 5, 5, 5
samblaster, 5, 5, 5
., 4, 26, 26
mothur, 4, 19, 19
mmseqs, 4, 17, 22
abricate, 4, 15, 15
pushd, 4, 14, 14
computeMatrix, 4, 11, 13
plotHeatmap, 4, 8, 15
done;, 4, 7, 15
g, 4, 7, 13
}}, 4, 7, 9
rmdir, 4, 7, 7
emapper.py, 4, 7, 7
NanoStat, 4, 7, 7
gsutil, 4, 6, 22
[[, 4, 6, 7
split, 4, 6, 7
dRep, 4, 6, 6
fasterq-dump, 4, 6, 6
python2, 4, 6, 6
SURVIVOR, 4, 5, 6
canu, 4, 5, 6
prokka, 4, 5, 5
fasttree, 4, 5, 5
hmmpress, 4, 4, 6
//g, 4, 4, 5
prefetch, 4, 4, 4
\t, 4, 4, 4
!DOCTYPE, 4, 4, 4
Filter, 4, 4, 4
I={input}, 4, 4, 4
fastq-dump, 4, 4, 4
20, 4, 4, 4
NanoFilt, 4, 4, 4
&2), 4, 4, 4
init_template, 4, 4, 4
reg_to_template, 4, 4, 4
update_template, 4, 4, 4
merge_metaphlan_tables.py, 4, 4, 4
0.05, 4, 4, 4
exec, 3, 67, 67
metawrap, 3, 12, 12
&1;, 3, 9, 10
cooler, 3, 9, 9
date, 3, 9, 9
eval, 3, 7, 8
2.0, 3, 7, 7
umi_tools, 3, 7, 7
fi;, 3, 6, 10
sortBed, 3, 6, 6
f, 3, 6, 6
function, 3, 6, 6
metaphlan, 3, 5, 7
hmmscan, 3, 5, 5
shuf, 3, 5, 5
vsearch, 3, 5, 5
LC_ALL=C, 3, 5, 5
antsApplyTransforms, 3, 5, 5
ktImportText, 3, 4, 5
pbmm2, 3, 4, 4
repair.sh, 3, 4, 4
$0, 3, 4, 4
bbduk.sh, 3, 4, 4
multiBigwigSummary, 3, 4, 4
40.0, 3, 4, 4
quast, 3, 4, 4
NR==1, 3, 4, 4
SORT_ORDER=queryname, 3, 4, 4
sambamba, 3, 3, 8
Attribute, 3, 3, 6
sniffles, 3, 3, 6
egrep, 3, 3, 5
make, 3, 3, 5
delly, 3, 3, 4
ktImportTaxonomy, 3, 3, 4
bowtie, 3, 3, 4
scp, 3, 3, 3
true), 3, 3, 3
plotCoverage, 3, 3, 3
findMotifsGenome.pl, 3, 3, 3
download-db.sh, 3, 3, 3
?xml, 3, 3, 3
Query, 3, 3, 3
Dataset, 3, 3, 3
/Dataset, 3, 3, 3
/Query, 3, 3, 3
cellranger, 3, 3, 3
100, 3, 3, 3
hisat2_extract_exons.py, 3, 3, 3
hisat2_extract_splice_sites.py, 3, 3, 3
CTG_PREFIX=$(basename, 3, 3, 3
vamb, 3, 3, 3
$1\, 3, 3, 3
htseq-count, 3, 3, 3
REMOVE_DUPLICATES=true, 3, 3, 3
mash, 3, 3, 3
MarkDuplicates, 3, 3, 3
bamtools, 3, 3, 3
O={output}, 3, 3, 3
M={log}, 3, 3, 3
snpEff, 3, 3, 3
true;, 3, 3, 3
run_MaxBin.pl, 3, 3, 3
DAS_Tool, 3, 3, 3
.05, 3, 3, 3
CENT=0, 3, 3, 3
CENT=$(grep, 3, 3, 3
`, 3, 3, 3
$(basename, 2, 12, 16
smc++, 2, 10, 12
INPUT={input}, 2, 10, 10
xvfb-run, 2, 9, 9
scripts/join_tables.py, 2, 8, 8
test, 2, 7, 10
isoseq3, 2, 7, 9
fpython3, 2, 7, 7
OUTPUT={output.bam}, 2, 7, 7
FILES=$(echo, 2, 7, 7
HiC-Pro, 2, 6, 6
O={output.bam}, 2, 6, 6
I={input.bam}, 2, 6, 6
30.0, 2, 6, 6
log, 2, 6, 6
sudo, 2, 6, 6
jupyter, 2, 6, 6
$CAT, 2, 5, 11
groot, 2, 5, 7
Trinity, 2, 5, 5
WC1=$(zcat, 2, 5, 5
WC2=$(zcat, 2, 5, 5
0), 2, 5, 5
ivar, 2, 5, 5
CREATE_INDEX=true, 2, 5, 5
coverage2cytosine, 2, 5, 5
rgi, 2, 4, 7
CAT, 2, 4, 5
Fasta_to_Scaffolds2Bin.sh, 2, 4, 5
dmesg, 2, 4, 4
sample=$(echo, 2, 4, 4
check_directory, 2, 4, 4
gtf2bed, 2, 4, 4
mawk, 2, 4, 4
DIRNAME=$(mktemp, 2, 4, 4
\tsmc++, 2, 4, 4
$(readlink, 2, 4, 4
nanopolish, 2, 4, 4
kreport2mpa.py, 2, 4, 4
taxon_nametreads, 2, 4, 4
scripts/area_plot.py, 2, 4, 4
scripts/KrakenTools/kreport2krona.py, 2, 4, 4
est_abundance.py, 2, 4, 4
VALIDATION_STRINGENCY=SILENT, 2, 4, 4
VALIDATION_STRINGENCY=LENIENT, 2, 4, 4
docker, 2, 3, 8
julia, 2, 3, 5
yes, 2, 3, 4
Genrich, 2, 3, 4
gtfToGenePred, 2, 3, 3
genePredToBed, 2, 3, 3
mysql, 2, 3, 3
cuteSV, 2, 3, 3
//, 2, 3, 3
temp.txt, 2, 3, 3
1{{print}}, 2, 3, 3
nofiles=$(ls, 2, 3, 3
slang=$(egrep, 2, 3, 3
mix_files=, 2, 3, 3
nolines=$(cat, 2, 3, 3
mix_files=-m, 2, 3, 3
papermill, 2, 3, 3
3.0, 2, 3, 3
60.0, 2, 3, 3
200.0, 2, 3, 3
HaplotypeCaller, 2, 3, 3
bc), 2, 3, 3
rev), 2, 3, 3
grid, 2, 3, 3
clean(r, 2, 3, 3
clean(, 2, 3, 3
busco, 2, 3, 3
hmmsearch, 2, 3, 3
pilon, 2, 3, 3
ngmlr, 2, 3, 3
popd, 2, 3, 3
sha256sum, 2, 3, 3
threads={threads}, 2, 3, 3
deduplicate_bismark, 2, 3, 3
/p;2~4p, 2, 2, 4
bbmap.sh, 2, 2, 3
amrfinder, 2, 2, 3
blastp, 2, 2, 3
10, 2, 2, 3
print, 2, 2, 3
plotPCA, 2, 2, 3
makeblastdb, 2, 2, 3
ccs, 2, 2, 2
real=$(realpath, 2, 2, 2
run_dbcan.py, 2, 2, 2
/opt/deepvariant/bin/run_deepvariant, 2, 2, 2
dv_make_examples.py, 2, 2, 2
dv_call_variants.py, 2, 2, 2
dv_postprocess_variants.py, 2, 2, 2
scripts/prepend_labels.sh, 2, 2, 2
logs/validate_bed_file/bedtools_merge.log;, 2, 2, 2
!, 2, 2, 2
configureStrelkaGermlineWorkflow.py, 2, 2, 2
geneBody_coverage.py, 2, 2, 2
]/, 2, 2, 2
nextalign, 2, 2, 2
run_gubbins.py, 2, 2, 2
bamPEFragmentSize, 2, 2, 2
bamCompare, 2, 2, 2
lastdb, 2, 2, 2
lastal, 2, 2, 2
medaka_consensus, 2, 2, 2
log/{wildcards.sample}_qc.err, 2, 2, 2
log/{wildcards.sample}_minimap_hpv.err, 2, 2, 2
log/{wildcards.sample}_minimap_sort_hpv.err, 2, 2, 2
log/{wildcards.sample}_minimap_index_hpv.err, 2, 2, 2
log/{wildcards.sample}_minimap.err, 2, 2, 2
log/{wildcards.sample}_minimap_sort.err, 2, 2, 2
log/{wildcards.sample}_minimap_index.err, 2, 2, 2
log/{wildcards.sample}_qc_hpv.err, 2, 2, 2
./make-lineage-csv.py, 2, 2, 2
$2\, 2, 2, 2
get_species_taxids.sh, 2, 2, 2
1{{print, 2, 2, 2
swarm, 2, 2, 2
fold, 2, 2, 2
vcffilter, 2, 2, 2
header=$(head, 2, 2, 2
cargo, 2, 2, 2
which, 2, 2, 2
outdir=$(dirname, 2, 2, 2
$1, 2, 2, 2
plotFingerprint, 2, 2, 2
50, 2, 2, 2
snippy, 2, 2, 2
INPUT={input.ubam}, 2, 2, 2
FASTQ=/dev/stdout, 2, 2, 2
INTERLEAVE=true, 2, 2, 2
NON_PF=true, 2, 2, 2
MergeBamAlignment, 2, 2, 2
SortSam, 2, 2, 2
SetNmMdAndUqTags, 2, 2, 2
GenomicsDBImport, 2, 2, 2
GatherVcfsCloud, 2, 2, 2
IndexFeatureFile, 2, 2, 2
bamcov, 2, 2, 2
cairosvg, 2, 2, 2
fastq_screen, 2, 2, 2
bedops, 2, 2, 2
blastx, 2, 2, 2
=1, 2, 2, 2
hisat2_index, 2, 2, 2
cd-hit-est, 2, 2, 2
blat, 2, 2, 2
in1={input.fq1}, 2, 2, 2
out1={output.fq1P}, 2, 2, 2
ref=data/00adapters/truseq.fa.gz, 2, 2, 2
longstitch, 2, 2, 2
bbcountunique.sh, 2, 2, 2
cut_up_fasta.py, 2, 2, 2
concoct_coverage_table.py, 2, 2, 2
merge_cutup_clustering.py, 2, 2, 2
extract_fasta_bins.py, 2, 2, 2
hmmbuild, 2, 2, 2
;, 2, 2, 2
paths, 2, 2, 2
dependencies, 2, 2, 2
extract_barcodes_path, 2, 2, 2
settings, 2, 2, 2
read_analysis.py, 2, 2, 2
simulator.py, 2, 2, 2
nnUNet_plan_and_preprocess, 2, 2, 2
nnUNet_train, 2, 2, 2
nnUNet_predict, 2, 2, 2
fslmerge, 2, 2, 2
tmpdir=qc/fastqc/{wildcards.patient}-{wildcards.sample_type}.tmp, 2, 2, 2
logs/rseqc/rseqc_junction_annotation, 2, 2, 2
workflowname, 2, 2, 2
INPUT={input.bam}, 2, 2, 2
EukRep, 2, 2, 2
LOAD_swissprot_blastp, 2, 2, 2
LOAD_pfam, 2, 2, 2
LOAD_swissprot_blastx, 2, 2, 2
TransDecoder.LongOrfs, 2, 2, 2
TransDecoder.Predict, 2, 2, 2
ILLUMINACLIP:{config[trimmomatic][ILLUMINACLIP]}, 2, 2, 2
LEADING:{config[trimmomatic][LEADING]}, 2, 2, 2
TRAILING:{config[trimmomatic][TRAILING]}, 2, 2, 2
brew, 2, 2, 2
tmpdir=qc/fastqc/.{wildcards.sample_id}.tmp, 2, 2, 2
guppy_basecaller, 2, 2, 2
metaquast.py, 2, 2, 2
sort-bed, 2, 2, 2
metaspades.py, 2, 2, 2
scripts/KrakenTools/combine_kreports.py, 2, 2, 2
in={input}, 2, 2, 2
in1={input.read1}, 2, 2, 2
in2={input.read2}, 2, 2, 2
scripts/preprocessing_summary.py, 2, 2, 2
SORT_ORDER=coordinate, 2, 2, 2
ASSUME_SORTED=true, 2, 2, 2
pygna, 1, 45, 45
config[VENV_DIR], 1, 19, 19
hamronize, 1, 12, 12
pore_c, 1, 11, 11
], 1, 10, 12
$len;, 1, 9, 9
wd=$(pwd), 1, 8, 8
parallel_cmd=, 1, 8, 8
parallel_cmd=parallel, 1, 8, 8
fsampleID=$(echo, 1, 8, 8
OUTPUT={output}, 1, 8, 8
UNFINISHED_GENOME, 1, 8, 8
expIslDir={params.isl_dir}/{wildcards.accession}/{params.organism}, 1, 7, 7
merfishtools, 1, 7, 7
results_report={params.resultsreport}, 1, 7, 7
.format(**config), 1, 7, 7
scripts/tomat.py, 1, 7, 7
cpan, 1, 6, 18
rio, 1, 6, 13
parallel_cmd=$([[, 1, 6, 6
CAT=cat;, 1, 6, 6
contacts, 1, 6, 6
sickle, 1, 6, 6
f{{wildcards.model}}, 1, 6, 6
smorfer.sh, 1, 6, 6
/bin/rm, 1, 5, 10
blobtools, 1, 5, 5
phyloFlash.pl, 1, 5, 5
prefix={params.output_dir}, 1, 5, 5
/data/bin/cellranger-atac, 1, 5, 5
refgenie, 1, 5, 5
sampleID=$(echo, 1, 5, 5
models, 1, 5, 5
sbatch, 1, 5, 5
geneNameFile=$(, 1, 5, 5
amm, 1, 5, 5
$decoratedFile.swp, 1, 5, 5
decoratedFileLength=$(wc, 1, 5, 5
annotation={params[0]}, 1, 5, 5
annotation={params[2]}, 1, 5, 5
f{{wildcards.dataset}}, 1, 5, 5
^.*/, 1, 4, 12
contigtax, 1, 4, 4
taxmapper, 1, 4, 4
mem_per_job=$(expr, 1, 4, 4
lra, 1, 4, 4
megalodon, 1, 4, 4
./{input.bin}, 1, 4, 4
numactl, 1, 4, 4
input_accessions={input.accessions}, 1, 4, 4
sys.path[0], 1, 4, 4
GTDBTK_DATA_PATH={GTDBTK_DATA_PATH}, 1, 4, 4
../../{output.vcf}, 1, 4, 4
src/aggregate_previous_sctensor.sh, 1, 4, 4
src/aggregate_sctensor.sh, 1, 4, 4
src/plot_auc.sh, 1, 4, 4
src/plot_aucpr.sh, 1, 4, 4
src/plot_f.sh, 1, 4, 4
src/plot_mcc.sh, 1, 4, 4
src/plot_fpr.sh, 1, 4, 4
src/plot_fnr.sh, 1, 4, 4
src/plot_pr.sh, 1, 4, 4
src/plot_time.sh, 1, 4, 4
src/plot_memory.sh, 1, 4, 4
src/plot_LR.sh, 1, 4, 4
alignments, 1, 4, 4
IFS=$\, 1, 4, 4
fastq_to_fasta, 1, 4, 4
set.dir(output={params.outdir});, 1, 4, 4
\tmkdir, 1, 4, 4
variantcalling={params[0]}, 1, 4, 4
debug={params[2]}, 1, 4, 4
annotation={params[1]}, 1, 4, 4
SV={params[0]}, 1, 4, 4
MEI={params[1]}, 1, 4, 4
script, 1, 4, 4
add_to_queries, 1, 4, 4
ngd, 1, 4, 4
rnew=$(echo, 1, 4, 4
R={input.ref}, 1, 4, 4
fpython, 1, 4, 4
);, 1, 3, 17
add_descriptions.py, 1, 3, 9
=NF;i++)if($i, 1, 3, 6
m)m=$i;print, 1, 3, 6
samp=$(echo, 1, 3, 5
2]//, 1, 3, 5
Trinotate, 1, 3, 5
scripts/summarize-table.py, 1, 3, 4
OUTFMT=$OUTFMT, 1, 3, 4
6_viewBS/inputfiles.txt, 1, 3, 4
coverm, 1, 3, 3
crimson, 1, 3, 3
palin_mode=$(grep, 1, 3, 3
You, 1, 3, 3
MODE={params.mode}, 1, 3, 3
TAXON_LEVELS=(2, 1, 3, 3
picrust2_pipeline.py, 1, 3, 3
plot-vcfstats, 1, 3, 3
a=$(basename, 1, 3, 3
~/bin/SEACR/SEACR_1.3.sh, 1, 3, 3
%$//g, 1, 3, 3
$4, 1, 3, 3
maxVal)), 1, 3, 3
stdbuf, 1, 3, 3
src/plot_auc_eachcci.sh, 1, 3, 3
src/plot_auc_merge.sh, 1, 3, 3
src/plot_aucpr_eachcci.sh, 1, 3, 3
src/plot_aucpr_merge.sh, 1, 3, 3
src/plot_f_eachcci.sh, 1, 3, 3
src/plot_f_merge.sh, 1, 3, 3
src/plot_mcc_eachcci.sh, 1, 3, 3
src/plot_mcc_merge.sh, 1, 3, 3
src/plot_fpr_eachcci.sh, 1, 3, 3
src/plot_fpr_merge.sh, 1, 3, 3
src/plot_fnr_eachcci.sh, 1, 3, 3
src/plot_fnr_merge.sh, 1, 3, 3
src/plot_pr_eachcci.sh, 1, 3, 3
src/plot_pr_merge.sh, 1, 3, 3
src/plot_time_merge.sh, 1, 3, 3
src/plot_memory_merge.sh, 1, 3, 3
wb_command, 1, 3, 3
idvar=$(echo, 1, 3, 3
freyja, 1, 3, 3
OUTFMT=6, 1, 3, 3
AverageImages, 1, 3, 3
../bcmap, 1, 3, 3
expType={params.exp_type}, 1, 3, 3
mktemp_dir, 1, 3, 3
idf_filename=$(perl, 1, 3, 3
SVL12K_DF, 1, 3, 3
0.5, 1, 3, 3
$F[$r];}}, 1, 3, 3
eff_size=$(awk, 1, 3, 3
nbatch=$(ls, 1, 3, 3
iter={config[interval.iter]}, 1, 3, 3
samp={config[interval.samp]}, 1, 3, 3
bpen={config[bpen]}, 1, 3, 3
../../../{log.std}, 1, 3, 3
debug={params[1]}, 1, 3, 3
format={params[0]}, 1, 3, 3
paired={params[2]}, 1, 3, 3
STR={params[0]}, 1, 3, 3
genotype={params[1]}, 1, 3, 3
tools/rename_multifasta_prefix.py, 1, 3, 3
flair.py, 1, 3, 3
segments=--segments, 1, 3, 3
ribotricer, 1, 3, 3
O={output.stats}, 1, 3, 3
L=$(less, 1, 2, 12
name=$(echo, 1, 2, 10
N=$(less, 1, 2, 10
local, 1, 2, 8
var=$(echo, 1, 2, 8
g);, 1, 2, 8
check_tsv_data_file_not_empty_of_data, 1, 2, 6
fio, 1, 2, 6
callpeak, 1, 2, 4
HRIBO/scripts/generate_excel_overview.py, 1, 2, 4
fastq-sort, 1, 2, 4
twoBitToFa, 1, 2, 4
$import_versions, 1, 2, 4
genome=$(echo, 1, 2, 4
Unassigned, 1, 2, 3
analyticsFile={wildcards.accession}-analytics.tsv, 1, 2, 3
PATH=$PATH:{workflow.basedir}/atlas-analysis/differential, 1, 2, 3
SnpSift, 1, 2, 3
lofreq, 1, 2, 3
sequenza-utils, 1, 2, 3
DEDUPLICATE_BISMARK, 1, 2, 3
/biodata/irg/grp_stich/Hv-DRR-pop/bin/bismark_v0.20.0/Bismark/bismark2summary, 1, 2, 3
STAR_lane1_map1_logfile.log, 1, 2, 2
OUTPUT=$(dirname, 1, 2, 2
bismark2report, 1, 2, 2
bismark2summary, 1, 2, 2
filter_non_conversion, 1, 2, 2
temp.gtf;, 1, 2, 2
scripts/rename_multifasta_prefix.py, 1, 2, 2
${{TMPDIR}}/merged.bed, 1, 2, 2
gmst.pl, 1, 2, 2
base=$(basename, 1, 2, 2
transabyss, 1, 2, 2
transabyss-merge, 1, 2, 2
max_mem=$(({params.cpumem}, 1, 2, 2
riana, 1, 2, 2
/usr/local/bin/HiC-Pro_3.1.0/bin/utils/sparseToDense.py, 1, 2, 2
PairSeq.py, 1, 2, 2
ParseHeaders.py, 1, 2, 2
filename={wildcards.ss_file};, 1, 2, 2
from_build=$(echo, 1, 2, 2
select=$[$(wc, 1, 2, 2
beaglew, 1, 2, 2
={wildcards.maf}, 1, 2, 2
={params.maf_upper}, 1, 2, 2
temp;, 1, 2, 2
demuxlet, 1, 2, 2
continue, 1, 2, 2
./bwa-0.7.17/bwa, 1, 2, 2
catfishq, 1, 2, 2
vcfsort, 1, 2, 2
bgziptabix, 1, 2, 2
run_pepper_margin_deepvariant, 1, 2, 2
Unass)^, 1, 2, 2
bzcat, 1, 2, 2
tombo, 1, 2, 2
rmats.py, 1, 2, 2
tail_start=1, 1, 2, 2
tail_start=2, 1, 2, 2
docjoin, 1, 2, 2
BERGSTROEM2020/{wildcards.population}/{wildcards.individual}_mt.sam, 1, 2, 2
cellranger-dna, 1, 2, 2
whatshap, 1, 2, 2
maxThreads={threads}, 1, 2, 2
useGrid=false, 1, 2, 2
return, 1, 2, 2
nanoQC, 1, 2, 2
PYTHONPATH={INDIC_NLP}, 1, 2, 2
filename=`basename, 1, 2, 2
binary=giashard, 1, 2, 2
binary=~/go/bin/giashard, 1, 2, 2
mix_files=$(mktemp, 1, 2, 2
$mix_files, 1, 2, 2
nolines_txt=$($CAT, 1, 2, 2
total_nolines=$(echo, 1, 2, 2
Check, 1, 2, 2
tracy, 1, 2, 2
nanoq, 1, 2, 2
vulcan, 1, 2, 2
faSize, 1, 2, 2
TEMPDIR=$(mktemp, 1, 2, 2
fcoolpup.py, 1, 2, 2
impute2, 1, 2, 2
src/groundtruth.sh, 1, 2, 2
src/plot_groundtruth.sh, 1, 2, 2
src/previous_sctensor.sh, 1, 2, 2
src/sctensor.sh, 1, 2, 2
src/roc_auc_bin_f.sh, 1, 2, 2
src/plot_roc_auc_f.sh, 1, 2, 2
src/plot_prc_aucpr_mcc.sh, 1, 2, 2
src/plot_tr.sh, 1, 2, 2
${{OUTDIR}}/${{SAMPLE}}/${{SAMPLE}}_${{DIRECTION}}.fastq, 1, 2, 2
:::, 1, 2, 2
gemma, 1, 2, 2
scripts/gtfParser, 1, 2, 2
t_coffee, 1, 2, 2
$var.bin., 1, 2, 2
concoct_bins.stats;, 1, 2, 2
metabat_bins.stats;, 1, 2, 2
maxbin_bins.stats;, 1, 2, 2
refined_bins.stats;, 1, 2, 2
concoct.checkm, 1, 2, 2
metabat.checkm, 1, 2, 2
maxbin.checkm, 1, 2, 2
refined.checkm, 1, 2, 2
reassembled_bins.stats;, 1, 2, 2
reassembled.checkm, 1, 2, 2
g), 1, 2, 2
abundance.stats, 1, 2, 2
)_*.xml, 1, 2, 2
update_database, 1, 2, 2
metaWRAP, 1, 2, 2
30nt),, 1, 2, 2
cas_data, 1, 2, 2
bin/singleCellPipe, 1, 2, 2
/){{print}}else{{chomp;print, 1, 2, 2
PREFIX=`echo, 1, 2, 2
ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads}, 1, 2, 2
c3d, 1, 2, 2
analyticsFile=$(grep, 1, 2, 2
qcExitCode=$?, 1, 2, 2
get_methods_from_irap, 1, 2, 2
decoratedFile={output.decoexpression}, 1, 2, 2
decoratedFile=`echo, 1, 2, 2
ae_dir=$(perl, 1, 2, 2
mirbase_dir=$(perl, 1, 2, 2
expPath=$(pwd), 1, 2, 2
organism={params.organism}, 1, 2, 2
arrayDesignFile=$(get_arraydesign_file, 1, 2, 2
geneNameFile=${{expPath}}/mature.accession.tsv.aux, 1, 2, 2
$geneNameFile, 1, 2, 2
geneNameFile=$(get_geneNameFile_given_organism, 1, 2, 2
./interproscan.sh, 1, 2, 2
e, 1, 2, 2
workflow/scripts/expression_analysis/extractFromBAM_RegionBed_WPS_Cov.py, 1, 2, 2
set.seed(seed={wildcards.seed});, 1, 2, 2
set.current(processors={resources.procs});, 1, 2, 2
blank).+, 1, 2, 2
nextclade, 1, 2, 2
ANNOTATIONS_FILE={input.annot}, 1, 2, 2
TagBamWithReadSequenceExtended, 1, 2, 2
SUMMARY={output.summary}, 1, 2, 2
BASE_QUALITY={params.base_qual}, 1, 2, 2
NUM_BASES_BELOW_QUALITY={params.bases_below_qual}, 1, 2, 2
BASE_RANGE={params.base_range}, 1, 2, 2
BARCODED_READ=1, 1, 2, 2
OUTPUT_SUMMARY={output.summary}, 1, 2, 2
MISMATCHES={params.mismatches}, 1, 2, 2
NUM_BASES={params.num_bases}, 1, 2, 2
EMBL_dat_to_Trinotate_sqlite_resourceDB.pl, 1, 2, 2
results/{config[PROJECT]}/runs/{config[RUN]}/, 1, 2, 2
+config_path+, 1, 2, 2
+scripts_dir+/jaspar2motif.py, 1, 2, 2
t/;, 1, 2, 2
burn={config[ldhat.burn]}, 1, 2, 2
xvf, 1, 2, 2
`#-B, 1, 2, 2
`#-j, 1, 2, 2
`#-z, 1, 2, 2
`#-E, 1, 2, 2
`#-c, 1, 2, 2
out/FinalOutput/out.clean, 1, 2, 2
shell:gatk, 1, 2, 2
read_fast5_basecaller.py, 1, 2, 2
glsearch36, 1, 2, 2
!seen[$1,$2]++, 1, 2, 2
ALIGNER={params.aligner}, 1, 2, 2
scripts/rcbbc, 1, 2, 2
workflow/scripts/fasta_to_nexus.py, 1, 2, 2
exome={params[1]}, 1, 2, 2
bed={params[3]}, 1, 2, 2
filter_string={params[4]}, 1, 2, 2
debug={params[5]}, 1, 2, 2
variantcalling={params[1]}, 1, 2, 2
expansion={params[0]}, 1, 2, 2
ExpansionHunter, 1, 2, 2
alsgenescanner={params[3]}, 1, 2, 2
SV={params[2]}, 1, 2, 2
alsgenescanner={params[0]}, 1, 2, 2
alignment_report={params.alignmentreport}, 1, 2, 2
sequencing_report={params.sequencingreport}, 1, 2, 2
calls_report={params.callsreport}, 1, 2, 2
expansion={params[1]}, 1, 2, 2
./gffread/gffread, 1, 2, 2
gappa, 1, 2, 2
/usr/bin/time, 1, 2, 2
pid=$!, 1, 2, 2
/dev/null;do, 1, 2, 2
ps, 1, 2, 2
vistasoft_path}));, 1, 2, 2
jsonInfo=jsondecode(fileread({input.params_file}));, 1, 2, 2
BIDS_dir},, 1, 2, 2
preprocessed_reoriented,, 1, 2, 2
fasta_generate_regions.py), 1, 2, 2
freebayes-parallel, 1, 2, 2
fasta_generate_regions.py, 1, 2, 2
virsorter, 1, 2, 2
configureStrelkaSomaticWorkflow.py, 1, 2, 2
INPUT={input.vcf}, 1, 2, 2
OUTPUT={output.vcf}, 1, 2, 2
NEW_SAMPLE_NAME={params.sample}\, 1, 2, 2
merge_kallisto.R, 1, 2, 2
zpca-tpm, 1, 2, 2
alfa, 1, 2, 2
bbsplit.sh, 1, 2, 2
options, 1, 2, 2
gtf=--gtf, 1, 2, 2
output=--outfileName, 1, 2, 2
zless, 1, 2, 2
cnvkit.py, 1, 2, 2
out={output}, 1, 2, 2
strainphlan, 1, 2, 2
fslmaths, 1, 2, 2
reg_resample, 1, 2, 2
parts=(${{tmp//@/, 1, 2, 2
sum(samples.origin, 1, 2, 2
RUN_TRIMMING, 1, 2, 2
TRIM_5_ONLY, 1, 2, 2
medaka, 1, 2, 2
abyss-pe, 1, 2, 2
]/s/[^ATGCatgc]/N/g, 1, 2, 2
gedi, 1, 2, 2
sc=$(, 1, 2, 2
sp=$(, 1, 2, 2
add_to_dbs, 1, 2, 2
align_fa, 1, 2, 2
results/AMOEBAE_Data, 1, 2, 2
results, 1, 2, 2
csv_to_fasta, 1, 2, 2
tckmap, 1, 2, 2
alphainput=({input.alphainput}), 1, 2, 2
len=${{#alphainput[@]}}, 1, 2, 2
betainput=({input.betainput}), 1, 2, 2
len=${{#column[@]}}, 1, 2, 2
pcoainput=({input.pcoainput}), 1, 2, 2
len=${{#pcoainput[@]}}, 1, 2, 2
hhblits, 1, 2, 2
trap, 1, 2, 2
out_dir=$(dirname, 1, 2, 2
import_versions=$out_dir/import_versions.tsv, 1, 2, 2
db=$(echo, 1, 2, 2
version=$(echo, 1, 2, 2
abs=$(readlink, 1, 2, 2
$TMPDIR/import_versions, 1, 2, 2
in_dir=$(dirname, 1, 2, 2
inStrain, 1, 2, 2
gatk3, 1, 2, 2
QUAL, 1, 2, 2
TMP_DIR={params.tmp}, 1, 2, 2
I=/dev/stdin, 1, 2, 2
SO=coordinate, 1, 2, 2
rose-dt, 1, 2, 2
rose-dt-plot.py, 1, 2, 2
ann_solo, 1, 2, 2
\t{BISMARK}, 1, 2, 2
/biodata/irg/grp_stich/Hv-DRR-pop/bin/bismark_v0.20.1/Bismark/bam2nuc, 1, 2, 2
/biodata/irg/grp_stich/Hv-DRR-pop/bin/bismark_v0.20.1/Bismark/coverage2cytosine, 1, 2, 2
1_trimmed_reads/cat, 1, 2, 2
=n;, 1, 2, 2
.join(, 1, 2, 2
[fpython, 1, 2, 2
header.html;, 1, 1, 7
int, 1, 1, 7
float, 1, 1, 7
data/tmp, 1, 1, 5
decorate_if_exists, 1, 1, 5
Min, 1, 1, 5
temp.html;, 1, 1, 4
0){{print, 1, 1, 4
vt, 1, 1, 4
bc, 1, 1, 4
GENOME.fasta, 1, 1, 4
$TMPDIR/fasta/db.fasta, 1, 1, 3
base64, 1, 1, 3
src/scripts/Fasta_to_Scaffolds2Bin.sh, 1, 1, 3
ionice, 1, 1, 3
basta, 1, 1, 3
bpen{bpen}.res_noheader.txt, 1, 1, 3
string, 1, 1, 3
humann2_join_tables, 1, 1, 3
$TMPDIR/fasta/taxonmap, 1, 1, 2
Saccharomyces_cerevisiae.R64-1-1.ncrna.fa, 1, 1, 2
=d),(?=d)//g, 1, 1, 2
=NF;X++){{OUT=OUT, 1, 1, 2
Unassigned_[0-9]*, 1, 1, 2
){{seq=seq+1;print, 1, 1, 2
Scripts/stampa_merge.py, 1, 1, 2
15), 1, 1, 2
if($3, 1, 1, 2
psql, 1, 1, 2
^:,, 1, 1, 2
preseq, 1, 1, 2
aMGSIM, 1, 1, 2
mapDamage, 1, 1, 2
bracken, 1, 1, 2
$vcf_text, 1, 1, 2
metaphlan_hclust_heatmap.py, 1, 1, 2
kmerresistance, 1, 1, 2
srst2, 1, 1, 2
ariba, 1, 1, 2
samples.txt, 1, 1, 2
memote, 1, 1, 2
pangolin, 1, 1, 2
plink2, 1, 1, 2
MERIDA_ILP, 1, 1, 2
organism=$(get_organism_from_condensed_sdrf, 1, 1, 2
gff_file=$(, 1, 1, 2
data/{wildcards.sample}/logs, 1, 1, 2
gb, 1, 1, 2
coal_sizes=$(echo, 1, 1, 2
./src/454/bin/sffinfo, 1, 1, 2
humann_databases, 1, 1, 2
transcripts.fasta, 1, 1, 2
transcripts.gff3, 1, 1, 2
../{log}, 1, 1, 2
tools/filter_checkv.py, 1, 1, 2
reads_1.fastq, 1, 1, 2
align_trim, 1, 1, 2
longshot, 1, 1, 2
Choose, 1, 1, 2
Kmer, 1, 1, 2
humann2_databases, 1, 1, 2
mpa2_table-v2.7.7.txt, 1, 1, 2
humann2_renorm_table, 1, 1, 2
RiboReport/scripts/concatGFF.py, 1, 1, 2
find_redun_seqs, 1, 1, 2
$(for, 1, 1, 2
done), 1, 1, 2
pbsv, 1, 1, 2
45, 1, 1, 2
251831106, 1, 1, 2
ref, 1, 1, 2
NC_012920.1, 1, 1, 2
iu-gen-configs, 1, 1, 1
iu-filter-quality-minoche, 1, 1, 1
infile_$proj_name.tx, 1, 1, 1
STAR_init_map1_logfile.log, 1, 1, 1
lima, 1, 1, 1
\tcp, 1, 1, 1
\tCodes/generate_bootstrap_alignments.py, 1, 1, 1
Codes/extract_two_copy_genes.py, 1, 1, 1
\trm, 1, 1, 1
Codes/count_sequence_patterns.py, 1, 1, 1
Codes/make_fate_network.py, 1, 1, 1
Codes/cluster_fates.R, 1, 1, 1
ALL_TCG_GENES=`cat, 1, 1, 1
CHECK_PRESENCE=`grep, 1, 1, 1
Codes/cluster_bootstraps.py, 1, 1, 1
Codes/measure_recurrence_prevalence.py, 1, 1, 1
Codes/find_recurrent_quartets.sh, 1, 1, 1
Codes/measure_recurrence_magnitude.sh, 1, 1, 1
check.out, 1, 1, 1
fastx_renamer, 1, 1, 1
fastx_reverse_complement, 1, 1, 1
scripts/cmseq.sh, 1, 1, 1
https://www.gnu.org/licenses/, 1, 1, 1
kneaddata_database, 1, 1, 1
kneaddata, 1, 1, 1
mkfifo, 1, 1, 1
/dev/stdin, 1, 1, 1
${{TMPDIR}}/sorted.bam, 1, 1, 1
${{TMPDIR}}/sorted.bed, 1, 1, 1
${{TMPDIR}}/minus.bed, 1, 1, 1
${{TMPDIR}}/plus.bed, 1, 1, 1
${{TMPDIR}}/overlaps.bed, 1, 1, 1
${{TMPDIR}}/subtracted.bed, 1, 1, 1
gff2bed, 1, 1, 1
prerapsearch, 1, 1, 1
download_eggnog_data.py, 1, 1, 1
$TMPDIR/fasta/tm.map, 1, 1, 1
files=$(cat, 1, 1, 1
genome_id=$(echo, 1, 1, 1
new_id=$(grep, 1, 1, 1
$TMPDIR/fasta/jgi.map, 1, 1, 1
$TMPDIR/fasta/refseq.map, 1, 1, 1
$TMPDIR/fasta/taxonmap.1, 1, 1, 1
$TMPDIR/fasta/taxonmap.2, 1, 1, 1
summary, 1, 1, 1
/usr/local/bin/HiC-Pro_3.1.0/bin/utils/digest_genome.py, 1, 1, 1
LC_ALL=C;, 1, 1, 1
crypt4gh, 1, 1, 1
pizzly, 1, 1, 1
envs/ecc_caller/generate_bam_file.sh, 1, 1, 1
envs/ecc_caller/call_ecc_regions.sh, 1, 1, 1
envs/ecc_caller/assign_confidence.sh, 1, 1, 1
$FILE.new, 1, 1, 1
$1==track), 1, 1, 1
wigToBigWig, 1, 1, 1
plotProfile, 1, 1, 1
\xe2\x80\x93regionsLabel, 1, 1, 1
\t-g, 1, 1, 1
\t-w, 1, 1, 1
/,, 1, 1, 1
WC=`wc, 1, 1, 1
N_LINES=`echo, 1, 1, 1
odir=01qc/{wildcards.sample}_fastqc, 1, 1, 1
bam2wig.py, 1, 1, 1
img=$(readlink, 1, 1, 1
IMAGEPATH, 1, 1, 1
:${{img}}:, 1, 1, 1
https://ndownloader.figshare.com/files/2194841, 1, 1, 1
pattern=$(echo, 1, 1, 1
url=ftp://ftp.sra.ebi.ac.uk/vol1/fastq, 1, 1, 1
sample={wildcards.sample}, 1, 1, 1
parallel_jobs=$((, 1, 1, 1
bit-summarize-assembly, 1, 1, 1
eukcc, 1, 1, 1
working_dir=$(pwd), 1, 1, 1
${{CONDA_PREFIX}}/etc/conda/activate.d/set_env_vars.sh, 1, 1, 1
GTDBTK_DATA_PATH={params.gtdbtk_db_dir}, 1, 1, 1
${{working_dir}}/{log}, 1, 1, 1
={params.min_unk}, 1, 1, 1
amrfinder_update, 1, 1, 1
download-antismash-databases, 1, 1, 1
antismash, 1, 1, 1
run]}/6hrPlevPt/, 1, 1, 1
M={output.metrics}, 1, 1, 1
ascp, 1, 1, 1
genomeCoverageBed, 1, 1, 1
AssemblePairs.py, 1, 1, 1
CollapseSeq.py, 1, 1, 1
SplitSeq.py, 1, 1, 1
ratio=$(grep, 1, 1, 1
velocyto, 1, 1, 1
prepare_receptor4.py, 1, 1, 1
obabel, 1, 1, 1
fcd, 1, 1, 1
59, 1, 1, 1
15, 1, 1, 1
working, 1, 1, 1
estimate_degree, 1, 1, 1
estimate_degree_vs_true), 1, 1, 1
germlinew, 1, 1, 1
gzvcf2plink, 1, 1, 1
maskSegments, 1, 1, 1
ibd2degree, 1, 1, 1
muscle, 1, 1, 1
clustalo, 1, 1, 1
unassigned, 1, 1, 1
img, 1, 1, 1
pandoc, 1, 1, 1
html, 1, 1, 1
link, 1, 1, 1
/head, 1, 1, 1
body, 1, 1, 1
/body, 1, 1, 1
/html, 1, 1, 1
data/genome.fa, 1, 1, 1
shred, 1, 1, 1
dag.svg;, 1, 1, 1
rulegraph.svg, 1, 1, 1
tiddit, 1, 1, 1
genefuse, 1, 1, 1
$ANNOTSV/bin/AnnotSV, 1, 1, 1
samplot, 1, 1, 1
mergeBed, 1, 1, 1
outdir=`echo, 1, 1, 1
list.samples, 1, 1, 1
pedsim, 1, 1, 1
ibis, 1, 1, 1
.*//, 1, 1, 1
qapa, 1, 1, 1
biotype_1020, 1, 1, 1
display_label_1074, 1, 1, 1
cctyper, 1, 1, 1
filter_blast_m8.py, 1, 1, 1
mcl, 1, 1, 1
vcfutils.pl, 1, 1, 1
./Parsnp-Linux64-v1.2/parsnp, 1, 1, 1
harvesttools-Linux64-v1.2/harvesttools, 1, 1, 1
log/index_lra.err, 1, 1, 1
log/{wildcards.sample}_lra_map.err, 1, 1, 1
log/{wildcards.sample}_sv_call.err, 1, 1, 1
log/{wildcards.sample}_depth.err, 1, 1, 1
log/{wildcards.sample}_sort_vcf.err, 1, 1, 1
log/{wildcards.sample}_index_vcf.err, 1, 1, 1
log/{wildcards.sample}_pmd_hpv.err, 1, 1, 1
log/{wildcards.sample}_pmd.err, 1, 1, 1
log/index_lra_hpv.err, 1, 1, 1
log/{wildcards.sample}_lra_map_hpv.err, 1, 1, 1
log/{wildcards.sample}_sv_call_hpv.err, 1, 1, 1
log/{wildcards.sample}_depth_hpv.err, 1, 1, 1
log/{wildcards.sample}_sort_vcf_hpv.err, 1, 1, 1
log/{wildcards.sample}_index_vcf_hpv.err, 1, 1, 1
log/{wildcards.sample}_basic.err, 1, 1, 1
log/{wildcards.sample}_model.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_sort1.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_index1.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_sort3.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_index3.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_sort1.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_index1.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_sort3.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_index3.err, 1, 1, 1
log/{wildcards.sample}_basic_hpv.err, 1, 1, 1
log/{wildcards.sample}_model_hpv.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_sort1_hpv.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_index1_hpv.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_sort3_hpv.err, 1, 1, 1
log/{wildcards.sample}_basic_bam_index3_hpv.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_sort1_hpv.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_index1_hpv.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_sort3_hpv.err, 1, 1, 1
log/{wildcards.sample}_model_based_bam_index3_hpv.err, 1, 1, 1
frm, 1, 1, 1
ver=$(python, 1, 1, 1
&1), 1, 1, 1
path1=$(echo, 1, 1, 1
FQ1=`echo, 1, 1, 1
FQ2=`echo, 1, 1, 1
out=`echo, 1, 1, 1
Scripts/init_sample.sh, 1, 1, 1
Scripts/init_sample_SE.sh, 1, 1, 1
Scripts/init_sample_dmx.sh, 1, 1, 1
Scripts/init_sample_dmx_SE.sh, 1, 1, 1
0;i--){{k=substr(seq,i,1);rc=rc, 1, 1, 1
+str(config[dada2_taxonomy][db]), 1, 1, 1
+str(config[dada2_taxonomy][add_sps][add]), 1, 1, 1
+str(config[dada2_merge][minOverlap]), 1, 1, 1
+str(config[UNPAIRED_DATA_PIPELINE]), 1, 1, 1
=NF;i++){{header=headert$i}};print, 1, 1, 1
=NF;, 1, 1, 1
p, 1, 1, 1
=p;, 1, 1, 1
=NR;, 1, 1, 1
1){{tax=$2;for(i=3;i, 1, 1, 1
=NF;i++){{tax=tax;$i}};h[$1]=tax;}}next;}}, 1, 1, 1
mapp=, 1, 1, 1
degapseq, 1, 1, 1
1){{h[$1]=$2;}}next}}{{if(FNR, 1, 1, 1
1){{print, 1, 1, 1
Morphology_main.py, 1, 1, 1
barrnap, 1, 1, 1
analyze_blastPlus_topHit_coverage.pl, 1, 1, 1
gtf2bed.pl, 1, 1, 1
/c8000xd3/rnaseq-heath/bin/samtools, 1, 1, 1
~/anaconda2/envs/py35/bin/seqtk, 1, 1, 1
miRNA, 1, 1, 1
/exon/, 1, 1, 1
Name, 1, 1, 1
/gene_id/, 1, 1, 1
RPB, 1, 1, 1
0.1, 1, 1, 1
AC, 1, 1, 1
extractSplitReads_BwaMem, 1, 1, 1
~/harddisk/BIO_TOOl/lumpy-sv/scripts/extractSplitReads_BwaMem, 1, 1, 1
DNA-HD753-50ng_S8_L001.splitters.unsorted.bam, 1, 1, 1
lumpyexpress, 1, 1, 1
0.7, 1, 1, 1
raven, 1, 1, 1
multi_to_single_fast5, 1, 1, 1
deepsignal, 1, 1, 1
racon_wrapper, 1, 1, 1
dipdiff.py, 1, 1, 1
VcfFilter, 1, 1, 1
VcfSort, 1, 1, 1
/home/caspar/miniconda3/bin/truvari, 1, 1, 1
scripts/count-circrna.py, 1, 1, 1
scripts/parse-pileup.py, 1, 1, 1
scripts/infer-apa.py, 1, 1, 1
URL=$(python3, 1, 1, 1
e,, 1, 1, 1
print(url), 1, 1, 1
exit(e)), 1, 1, 1
$DIRNAME/my-crawler-beans.cxml, 1, 1, 1
RUNTIME=0, 1, 1, 1
RUNTIME=$((RUNTIME+5)), 1, 1, 1
CAT=$([[, 1, 1, 1
giashard_bin=$([[, 1, 1, 1
initial_nolines=$(zcat, 1, 1, 1
output={output}, 1, 1, 1
filter_command=cat, 1, 1, 1
para_nolines=$(cat, 1, 1, 1
^p-1s-1$, 1, 1, 1
output={params.tmp_translations_file}, 1, 1, 1
filter_command=python3, 1, 1, 1
$output, 1, 1, 1
n_after=$(zcat, 1, 1, 1
header=src_urlttrg_urltsrc_docttrg_doc, 1, 1, 1
header=src_urlttrg_urltsrc_textttrg_texttsrc_translated, 1, 1, 1
text_fields=$(head, 1, 1, 1
value=/dev/null, 1, 1, 1
first=0, 1, 1, 1
sort_flags=$(cat, 1, 1, 1
models/smc/bootstrap_input/{params.population}.{params.distind}_rep, 1, 1, 1
bmtagger.sh, 1, 1, 1
chrM, 1, 1, 1
log/{wildcards.patient}_medalt_patient.err, 1, 1, 1
log/{wildcards.patient}_cyto.err, 1, 1, 1
log/{wildcards.patient}_node_cyto.err, 1, 1, 1
log/{wildcards.patient}_header_node_cyto.err, 1, 1, 1
src/ensemble_prediction_pipeline/ensemble.sh, 1, 1, 1
/opt/deepvariant/bin/make_examples, 1, 1, 1
/opt/deepvariant/bin/call_variants, 1, 1, 1
/opt/deepvariant/bin/postprocess_variants, 1, 1, 1
fq, 1, 1, 1
fasta, 1, 1, 1
fastq, 1, 1, 1
gz), 1, 1, 1
sam, 1, 1, 1
cram), 1, 1, 1
yak, 1, 1, 1
hifiasm, 1, 1, 1
$2_hap1\, 1, 1, 1
mapped/{wildcards.sample}.filtered.bam, 1, 1, 1
I={input.aln_a}, 1, 1, 1
O={output.aln_clean}, 1, 1, 1
M={output.aln_clean_txt}, 1, 1, 1
./, 1, 1, 1
shell:\t, 1, 1, 1
wtdbg2.pl, 1, 1, 1
miniasm, 1, 1, 1
lftp, 1, 1, 1
CrossMap.py, 1, 1, 1
URL=http://hgdownload.soe.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz, 1, 1, 1
SNPsplit_genome_preparation, 1, 1, 1
exitcode=$?, 1, 1, 1
biotype, 1, 1, 1
ref/PlasmoDB-52_{wildcards.genome}.2.gff.gz, 1, 1, 1
coco, 1, 1, 1
O={output.bam_dedup}, 1, 1, 1
alignmentSieve, 1, 1, 1
log/{wildcards.sample}_freddie_split.err, 1, 1, 1
log/{wildcards.sample}_freddie_segment.err, 1, 1, 1
log/{wildcards.sample}_freddie_cluster.err, 1, 1, 1
log/{wildcards.sample}_freddie_isoforms.err, 1, 1, 1
log/{wildcards.sample}_gffread2.err, 1, 1, 1
log/{wildcards.sample}_freddie_split_hpv.err, 1, 1, 1
log/{wildcards.sample}_freddie_segment_hpv.err, 1, 1, 1
log/{wildcards.sample}_freddie_cluster_hpv.err, 1, 1, 1
log/{wildcards.sample}_freddie_isoforms_hpv.err, 1, 1, 1
log/{wildcards.sample}_gffread2_hpv.err, 1, 1, 1
bonito, 1, 1, 1
log/{wildcards.sample}_basecall.err, 1, 1, 1
log/{wildcards.sample}_stringtie.err, 1, 1, 1
log/{wildcards.sample}_gffread.err, 1, 1, 1
log/{wildcards.sample}_stringtie_hpv.err, 1, 1, 1
log/{wildcards.sample}_gffread_hpv.err, 1, 1, 1
unset, 1, 1, 1
input_accessions={input.baseline_accessions}, 1, 1, 1
tools/bestMash.py, 1, 1, 1
ref=$(grep, 1, 1, 1
tools/parse_dnadiff.py, 1, 1, 1
counts=$(ls, 1, 1, 1
gunc, 1, 1, 1
chrom=$(basename, 1, 1, 1
out=$outdir/$chrom.vcf.gz, 1, 1, 1
$f, 1, 1, 1
output_file, 1, 1, 1
params=list(out_prefix, 1, 1, 1
modality, 1, 1, 1
feature, 1, 1, 1
input, 1, 1, 1
integrated, 1, 1, 1
output, 1, 1, 1
bedToBam, 1, 1, 1
workflow/report/replacement_notice.txt, 1, 1, 1
corMMapMerSize=10, 1, 1, 1
corOverlapper=minimap, 1, 1, 1
corConcurrency={params.concurrency}, 1, 1, 1
cormhapConcurrency={params.concurrency}, 1, 1, 1
cormmapConcurrency={params.concurrency}, 1, 1, 1
obtmmapConcurrency={params.concurrency}, 1, 1, 1
utgmmapConcurrency={params.concurrency}, 1, 1, 1
redConcurrency={params.concurrency}, 1, 1, 1
ovbConcurrency={params.concurrency}, 1, 1, 1
ovsConcurrency={params.concurrency}, 1, 1, 1
oeaConcurrency={params.concurrency}, 1, 1, 1
PAIR=`dirname, 1, 1, 1
WDIR={EXPT_DIR}/$PAIR, 1, 1, 1
SRC=${{PAIR:0:2}}, 1, 1, 1
TGT=${{PAIR:3:2}}, 1, 1, 1
50:, 1, 1, 1
tgt_file={input[1]}/`basename, 1, 1, 1
align_file={output}/`basename, 1, 1, 1
$align_file, 1, 1, 1
split_file={output[0]}/`basename, 1, 1, 1
$txt_file, 1, 1, 1
P, 1, 1, 1
$/d, 1, 1, 1
$split_file;, 1, 1, 1
$split_file, 1, 1, 1
snippy-core, 1, 1, 1
snp-sites, 1, 1, 1
exitcode=$?;, 1, 1, 1
GenotypeGVCFs, 1, 1, 1
FastTree, 1, 1, 1
https://api.anaconda.org/package/bioconda/{wildcards.package}, 1, 1, 1
%ht%aNt%aI, 1, 1, 1
recipes/*), 1, 1, 1
bioconda-utils, 1, 1, 1
recipes, 1, 1, 1
../{output}, 1, 1, 1
neato, 1, 1, 1
./{input.bam}, 1, 1, 1
./{params.out_prefix}, 1, 1, 1
./{output.mbias}, 1, 1, 1
OT=$(cut, 1, 1, 1
OB=$(cut, 1, 1, 1
scripts/mosdepth_to_x_coverage.py, 1, 1, 1
tantan, 1, 1, 1
DP, 1, 1, 1
70, 1, 1, 1
Kleb.variants.vcf.gz, 1, 1, 1
={params.maxFragmentSize}, 1, 1, 1
scale-regions, 1, 1, 1
bedClip, 1, 1, 1
condition, 1, 1, 1
%, 1, 1, 1
plotEnrichment, 1, 1, 1
genomes/sizes.genome, 1, 1, 1
tracks/annotation-woGenes.gtf;, 1, 1, 1
tracks/annotation-woGenes.gtf, 1, 1, 1
tracks/annotation.bed, 1, 1, 1
tracks/annotation.bed6;, 1, 1, 1
tracks/annotationScore.bed6;, 1, 1, 1
logs/python_script.log, 1, 1, 1
CreateSequenceDictionary, 1, 1, 1
REFERENCE={input.genome_fa}, 1, 1, 1
OUTPUT={output.dict}, 1, 1, 1
salmon_idx_from_not_gencode, 1, 1, 1
kb, 1, 1, 1
data/NanoQ/PCNQ_read.fastq.gz, 1, 1, 1
report/NanoQ/report.txt, 1, 1, 1
graphmap, 1, 1, 1
scripts/Chunk_dataframe.sh, 1, 1, 1
CPC2/bin/CPC2.py, 1, 1, 1
transeq, 1, 1, 1
scripts/tmhmm.sh, 1, 1, 1
scripts/parallel_gmap.sh, 1, 1, 1
REPORT=assembly_report.txt, 1, 1, 1
convert, 1, 1, 1
/dev/null;, 1, 1, 1
results/SIMresults/aggregatepsd.txt, 1, 1, 1
results/SIMresults/aggregatedoseresponse.txt, 1, 1, 1
FrameBot, 1, 1, 1
raxmlHPC, 1, 1, 1
{params.ilastik_loc}, 1, 1, 1
fchromosight, 1, 1, 1
ftail, 1, 1, 1
f-d, 1, 1, 1
fawk, 1, 1, 1
v1.10.0/bio/cooltools/genome/gc, 1, 1, 1
gaas_fasta_splitter.pl, 1, 1, 1
transposonPSI.pl, 1, 1, 1
gaas_fasta_removeSeqFromIDlist.pl, 1, 1, 1
ProtExcluder.pl, 1, 1, 1
tophat2, 1, 1, 1
output/surfmorph/labels/participants.tsv, 1, 1, 1
cellranger-atac, 1, 1, 1
src/cellcellsimulate.sh, 1, 1, 1
src/{wildcards.othermethod}.sh, 1, 1, 1
src/plot_tr_eachcci.sh, 1, 1, 1
src/preprocess_{wildcards.sample}.sh, 1, 1, 1
src/labelpermutation.sh, 1, 1, 1
src/labelpermutation2.sh, 1, 1, 1
src/halpern.sh, 1, 1, 1
src/cabelloaguilar.sh, 1, 1, 1
src/report.sh, 1, 1, 1
merged.fna, 1, 1, 1
af, 1, 1, 1
f(gdown, 1, 1, 1
ISEXCEL={params.isExcel}, 1, 1, 1
1{{print($5,$2)}}, 1, 1, 1
breseq, 1, 1, 1
../../{input.r1}, 1, 1, 1
../../{log}, 1, 1, 1
all_freebayes_genomes.fa, 1, 1, 1
pdflatex, 1, 1, 1
ciftify_clean_img, 1, 1, 1
trimmed, 1, 1, 1
ktUpdateTaxonomy.sh, 1, 1, 1
kraken2-inspect, 1, 1, 1
krakefaction, 1, 1, 1
logs/salmon_path, 1, 1, 1
config.dat, 1, 1, 1
scripts/extract_RGI_fasta.py, 1, 1, 1
scripts/read_count_bam.pl, 1, 1, 1
seed.fasta, 1, 1, 1
TMPNME=$(set, 1, 1, 1
/dev/urandom, 1, 1, 1
out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/scaffolds.1000.bam, 1, 1, 1
metabat, 1, 1, 1
rev);, 1, 1, 1
out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/contigs_10K.fna, 1, 1, 1
out/assembly/{wildcards.assembler}/{wildcards.sample}/{wildcards.sample}.binning/clustering_merged.csv, 1, 1, 1
minimumsize=50000, 1, 1, 1
actualsize=$(wc, 1, 1, 1
$file), 1, 1, 1
./src/scripts/BUSCO.sh, 1, 1, 1
out/human/{wildcards.sample}/{wildcards.sample}.mito.sai, 1, 1, 1
out/human/{wildcards.sample}/{wildcards.sample}.mito.bam, 1, 1, 1
out/human/{wildcards.sample}/{wildcards.sample}.auto.sai, 1, 1, 1
out/human/{wildcards.sample}/{wildcards.sample}.auto.bam, 1, 1, 1
out/human/{wildcards.sample}/{wildcards.sample}.auto.idxstats, 1, 1, 1
contDeam.pl, 1, 1, 1
schmutzi.pl, 1, 1, 1
/apps/schmutzi/20171024/alleleFreqMT/eurasian/freqs/, 1, 1, 1
log2fasta, 1, 1, 1
callHaplogroups.py, 1, 1, 1
angsd, 1, 1, 1
./src/scripts/haplogrep, 1, 1, 1
blast2rma, 1, 1, 1
out/taxonomic_classifications/metaphlan/{wildcards.sample}/merged_abundance_table.txt, 1, 1, 1
clade, 1, 1, 1
count=$(zgrep, 1, 1, 1
merge=$(zgrep, 1, 1, 1
dedup=$(zgrep, 1, 1, 1
mito=$(samtools, 1, 1, 1
auto=$(samtools, 1, 1, 1
interproscan.sh, 1, 1, 1
assign_genome_properties.pl, 1, 1, 1
RNAfold, 1, 1, 1
ShortStack, 1, 1, 1
A=$(cat, 1, 1, 1
a=$(cat, 1, 1, 1
ITSx, 1, 1, 1
pairtools, 1, 1, 1
pairix, 1, 1, 1
refgenome, 1, 1, 1
classifier, 1, 1, 1
shell:#has, 1, 1, 1
merger, 1, 1, 1
/usr/local/bin/manta/bin/configManta.py, 1, 1, 1
whamg, 1, 1, 1
OLD_HEADER=$(bcftools, 1, 1, 1
CONTIGS_HEADER=$(grep, 1, 1, 1
ID=, 1, 1, 1
}}), 1, 1, 1
vcf_text=$(bgzip, 1, 1, 1
FILEDATE=$(grep, 1, 1, 1
$vcf_text), 1, 1, 1
sum=$(grep, 1, 1, 1
^ID), 1, 1, 1
kraken-biom, 1, 1, 1
NR, 1, 1, 1
fcurl, 1, 1, 1
resfinder.py, 1, 1, 1
./helper_scripts/download_known_PETases.py, 1, 1, 1
./helper_scripts/run_hmm_search_iteratively.py, 1, 1, 1
focal=$(echo, 1, 1, 1
mapping=$(echo, 1, 1, 1
$(find, 1, 1, 1
GTDBTk.stats, 1, 1, 1
binID=$(echo, 1, 1, 1
smetana.all, 1, 1, 1
less, 1, 1, 1
media.txt, 1, 1, 1
ll, 1, 1, 1
media.txt;, 1, 1, 1
sampleMedia.stats, 1, 1, 1
gemID=$(echo, 1, 1, 1
id=$(echo, 1, 1, 1
roary, 1, 1, 1
create_pan_genome_plots.R, 1, 1, 1
carve, 1, 1, 1
$(echo, 1, 1, 1
smetana, 1, 1, 1
motus, 1, 1, 1
PLEK, 1, 1, 1
nslices=`fslval, 1, 1, 1
cohorts, 1, 1, 1
trimgalore., 1, 1, 1
config[paths][dependencies][medestrand_path], 1, 1, 1
sample_array=({input.all_stats}), 1, 1, 1
sample_array=({input.all_amp_cov}), 1, 1, 1
amp_dep_array=({input.amp_dep_plots}), 1, 1, 1
cov_array=({input.cov_plots}), 1, 1, 1
all_plots=(${{amp_dep_array[@]}}, 1, 1, 1
1), 1, 1, 1
uniq), 1, 1, 1
demixed_array=({input.all_demixed}), 1, 1, 1
bcl-convert, 1, 1, 1
prinseq++, 1, 1, 1
sample_array=({input.consensus_files}), 1, 1, 1
sample_array=({input.masked_consensus_files}), 1, 1, 1
bam_array=({input.sample_bams}), 1, 1, 1
newName=$(echo, 1, 1, 1
/){{print, 1, 1, 1
newName;}}, 1, 1, 1
evaluate, 1, 1, 1
spoa, 1, 1, 1
ts, 1, 1, 1
NR==2, 1, 1, 1
AF=1, 1, 1, 1
results/{wildcards.file}.out.vcf.gz, 1, 1, 1
slim, 1, 1, 1
$_$_, 1, 1, 1
,++$j,\, 1, 1, 1
/;print, 1, 1, 1
={params.num}, 1, 1, 1
/){{$id=$_}}else{{@t=split(/_/,$id);$s=$_;$d=$t[5];if, 1, 1, 1
/;$_=substr($_,1);@t=split(/_/);$d=$t[1]+$L-$t[1]%$L;print, 1, 1, 1
DB=`echo, 1, 1, 1
last-train, 1, 1, 1
last-split, 1, 1, 1
antsRegistration, 1, 1, 1
MultiplyImages, 1, 1, 1
AverageAffineTransformNoRigid, 1, 1, 1
fbowtie2-build, 1, 1, 1
jellyfish, 1, 1, 1
fbowtie2, 1, 1, 1
sam2pairwise, 1, 1, 1
$each;, 1, 1, 1
L, 1, 1, 1
Lnoflip), 1, 1, 1
cmake, 1, 1, 1
polca.sh, 1, 1, 1
smoove, 1, 1, 1
percentile_ranks=(, 1, 1, 1
accession, 1, 1, 1
_, 1, 1, 1
arraydesign, 1, 1, 1
generate_differential_tracks, 1, 1, 1
annotationFile=$(find_properties_file_gsea, 1, 1, 1
pvalColNum=$(get_contrast_colnum, 1, 1, 1
log2foldchangeColNum=$(get_contrast_colnum, 1, 1, 1
plotTitle=, 1, 1, 1
Top, 1, 1, 1
Fisher-exact,, 1, 1, 1
0.1), 1, 1, 1
generate_baseline_tracks, 1, 1, 1
metrictype=tpm, 1, 1, 1
metrictype=fpkm, 1, 1, 1
deseq2version=none, 1, 1, 1
transcriptFile=$(, 1, 1, 1
decoratedFile={params.decotranscripts}, 1, 1, 1
deseq2version=`cat, 1, 1, 1
3.32.0, 1, 1, 1
target=, 1, 1, 1
arrayDataType=$(perl, 1, 1, 1
target=../../affymetrix-differential-analytics-methods.tsv, 1, 1, 1
target=../../onecolour-microarray-differential-analytics-methods.tsv, 1, 1, 1
target=../../twocolour-microarray-differential-analytics-methods.tsv, 1, 1, 1
target=../../onecolour-mirna-microarray-differential-analytics-methods.tsv, 1, 1, 1
target=../../twocolour-mirna-microarray-differential-analytics-methods.tsv, 1, 1, 1
decorate_if_exists_norm, 1, 1, 1
copy_experiment_from_analysis_to_atlas_exps, 1, 1, 1
get_magetab_for_experiment, 1, 1, 1
rename_files_baseline, 1, 1, 1
rename_files_differential, 1, 1, 1
prot_exp_type=experimentType=proteomics_baseline, 1, 1, 1
organism=$(perl, 1, 1, 1
DIR=$line, 1, 1, 1
organism_check=$(echo, 1, 1, 1
$organism_check, 1, 1, 1
organisms.txt, 1, 1, 1
organism=$organism_check, 1, 1, 1
log/merge_ccs.err, 1, 1, 1
log/merge_subread.err, 1, 1, 1
log/cluter.err, 1, 1, 1
log/polish.err, 1, 1, 1
log/gunzip.err, 1, 1, 1
log/gunzip2.err, 1, 1, 1
log/cluter_report.err, 1, 1, 1
log/sqanti.err, 1, 1, 1
log/sort.err, 1, 1, 1
log/collapsed.err, 1, 1, 1
log/fastq_tofasta2.err, 1, 1, 1
log/count.err, 1, 1, 1
log/filter.err, 1, 1, 1
log/fastq_tofasta3.err, 1, 1, 1
log/sqanti_r2.err, 1, 1, 1
log/sort2.err, 1, 1, 1
log/kallisto_index.err, 1, 1, 1
log/{wildcards.sample}_ccs.err, 1, 1, 1
log/{wildcards.sample}_cluter.err, 1, 1, 1
log/{wildcards.sample}_polish.err, 1, 1, 1
log/{wildcards.sample}_gunzip.err, 1, 1, 1
log/{wildcards.sample}_gunzip2.err, 1, 1, 1
log/{wildcards.sample}_cluter_report.err, 1, 1, 1
log/{wildcards.sample}_sqanti.err, 1, 1, 1
log/{wildcards.sample}_sort.err, 1, 1, 1
log/{wildcards.sample}_collapsed.err, 1, 1, 1
log/{wildcards.sample}_fastq_tofasta2.err, 1, 1, 1
log/{wildcards.sample}_count.err, 1, 1, 1
log/{wildcards.sample}_filter.err, 1, 1, 1
log/{wildcards.sample}_fastq_tofasta3.err, 1, 1, 1
log/{wildcards.sample}_sqanti_r2.err, 1, 1, 1
log/{wildcards.sample}_sort2.err, 1, 1, 1
log/{wildcards.sample}_sqanti_r2_filter.err, 1, 1, 1
family_interproscan={input.family_interproscan}, 1, 1, 1
interproscan_id={output.interproscan_id}, 1, 1, 1
${{interproscan_id}}, 1, 1, 1
./paircoil2, 1, 1, 1
log/{wildcards.sample}_link_bam.err, 1, 1, 1
log/{wildcards.sample}_link_bai.err, 1, 1, 1
log/{wildcards.sample}_link_loup.err, 1, 1, 1
log/{wildcards.sample}_link_summary.err, 1, 1, 1
log/{wildcards.sample}_link_count.err, 1, 1, 1
log/{wildcards.sample}_link_reanalysis_summary.err, 1, 1, 1
log/{wildcards.sample}_link_reanalysis_loup.err, 1, 1, 1
tsv-filter, 1, 1, 1
tsv-select, 1, 1, 1
nextstrain, 1, 1, 1
./bin/notify-on-deploy, 1, 1, 1
xz, 1, 1, 1
usearch, 1, 1, 1
centrifuge, 1, 1, 1
clipping_profile.py, 1, 1, 1
rgzip, 1, 1, 1
NUMBERBATCH_PATH=, 1, 1, 1
pjoin(IRTNN,, 1, 1, 1
get.seqs(accnos={input.accnos},, 1, 1, 1
get.seqs(accnos=current,, 1, 1, 1
get.dists(accnos=current,, 1, 1, 1
cluster(column={input.dist},, 1, 1, 1
cluster.fit(reflist={input.reflist},, 1, 1, 1
list.seqs(list={input.list}), 1, 1, 1
run-bwamem, 1, 1, 1
fname=${{R1%.R1.fastq}}, 1, 1, 1
R2=$fname.R2.fastq, 1, 1, 1
fname=${{bam%.bam}}, 1, 1, 1
sinto, 1, 1, 1
scripts/trim_bcs.sh, 1, 1, 1
R_LIBS=;, 1, 1, 1
run_busco, 1, 1, 1
qc/busco;, 1, 1, 1
Minimum, 1, 1, 1
samclip, 1, 1, 1
nreads=$(samtools, 1, 1, 1
rate=$(echo, 1, 1, 1
REFERENCE={input}, 1, 1, 1
ConvertToRefFlat, 1, 1, 1
SEQUENCE_DICTIONARY={input.seq_dict}, 1, 1, 1
FASTQ={input.fastq1}, 1, 1, 1
FASTQ2={input.fastq2}, 1, 1, 1
SAMPLE_NAME={wildcards.sample}, 1, 1, 1
DISCARD_READ=false, 1, 1, 1
TAG_NAME=XC, 1, 1, 1
DISCARD_READ=true, 1, 1, 1
TAG_NAME=XM, 1, 1, 1
FilterBAM, 1, 1, 1
TAG_REJECT=XQ, 1, 1, 1
TrimStartingSequence, 1, 1, 1
SEQUENCE={params.adapter_sequence}, 1, 1, 1
PolyATrimmer, 1, 1, 1
FASTQ={output}, 1, 1, 1
ALIGNED_BAM={input.aligned}, 1, 1, 1
UNMAPPED_BAM={input.unaligned}, 1, 1, 1
REFERENCE_SEQUENCE={input.reference}, 1, 1, 1
INCLUDE_SECONDARY_ALIGNMENTS=false, 1, 1, 1
PAIRED_RUN=false, 1, 1, 1
TagReadWithGeneExon, 1, 1, 1
TAG=GE, 1, 1, 1
BAMTagHistogram, 1, 1, 1
TAG=XC, 1, 1, 1
READ_QUALITY={params.read_quality}, 1, 1, 1
GatherMolecularBarcodeDistributionByGene, 1, 1, 1
NUM_CORE_BARCODES={params.ncells}, 1, 1, 1
EDIT_DISTANCE={params.edit_distance}, 1, 1, 1
READ_MQ={params.read_mq}, 1, 1, 1
MIN_BC_READ_THRESHOLD={params.min_umi_reads}, 1, 1, 1
RARE_UMI_FILTER_THRESHOLD={params.rare_umi_filter}, 1, 1, 1
shell:rm, 1, 1, 1
erp, 1, 1, 1
erp_properties, 1, 1, 1
dspm, 1, 1, 1
lcmv, 1, 1, 1
))), 1, 1, 1
obo_to_tab.pl, 1, 1, 1
print.pl, 1, 1, 1
PFAM_dat_parser.pl, 1, 1, 1
&2;, 1, 1, 1
hicup, 1, 1, 1
bam2pairs, 1, 1, 1
merge-pairs.sh, 1, 1, 1
hicFindTADs, 1, 1, 1
ILLUMINACLIP:{params.trim_dir}/adapters/TruSeq3-PE-2.fa:2:{params.minqual}:10:3:true, 1, 1, 1
config[PROJECT]+, 1, 1, 1
MAXINFO:{config[trimmomatic][MAXINFO]}, 1, 1, 1
config[DATABASE][name]+/+config[DATABASE][name], 1, 1, 1
p__, 1, 1, 1
c__, 1, 1, 1
o__, 1, 1, 1
f__, 1, 1, 1
g__, 1, 1, 1
s__, 1, 1, 1
column, 1, 1, 1
results/{wildcards.PROJECT}/runs/{wildcards.RUN}/05-dwca/, 1, 1, 1
anvi-gen-contigs-database, 1, 1, 1
anvi-profile, 1, 1, 1
anvi-merge, 1, 1, 1
anvi-import-collection, 1, 1, 1
anvi-interactive, 1, 1, 1
\t./scripts/trim_reads.sh, 1, 1, 1
salmon_results=os.path.join(RESULTS_FOLDER,, 1, 1, 1
out_folder, 1, 1, 1
filename=$(basename, 1, 1, 1
sample_name=${{filename/.fastq}}, 1, 1, 1
prepare_counts-rna.r, 1, 1, 1
prepare_counts.r, 1, 1, 1
find_imbalance-rna.r, 1, 1, 1
find_imbalance.r, 1, 1, 1
0)&&(F2R1[0:1], 1, 1, 1
9)&&($4, 1, 1, 1
9), 1, 1, 1
2)&&(F2R1[0:1], 1, 1, 1
2), 1, 1, 1
daa={output.daa}, 1, 1, 1
date), 1, 1, 1
vcf-consensus, 1, 1, 1
scripts_dir+/center_and_widen.py, 1, 1, 1
scripts_dir+/center_and_widen_bed.py, 1, 1, 1
meirlop, 1, 1, 1
$(awk, 1, 1, 1
scanMotifGenomeWide.pl, 1, 1, 1
scripts_dir+/fix_bed.bash, 1, 1, 1
scripts_dir+/statistics.py, 1, 1, 1
scripts_dir+/metrics.py, 1, 1, 1
scripts_dir+/prc.py, 1, 1, 1
tac, 1, 1, 1
TMP_DIR=./tmp, 1, 1, 1
log/ping12.err, 1, 1, 1
log/ping3.err, 1, 1, 1
overlap={config[cut_overlap]}, 1, 1, 1
chunk={config[cut_size]}, 1, 1, 1
bigchunk=$(echo, 1, 1, 1
smalloverlap=$(echo, 1, 1, 1
n_batch=$(ls, 1, 1, 1
error.txt, 1, 1, 1
dist=$(echo, 1, 1, 1
individuals=$(cat, 1, 1, 1
N0=$(, 1, 1, 1
coal_sizes=$(, 1, 1, 1
length(temp)+1;, 1, 1, 1
coal_sizes=${{coal_sizes%?}}, 1, 1, 1
coal_sizes=$N0,$coal_sizes, 1, 1, 1
coal_times=$(, 1, 1, 1
n=$(zcat, 1, 1, 1
n=$((2*$n)), 1, 1, 1
nsim={config[ldhot.nsim]}, 1, 1, 1
bammarkduplicates, 1, 1, 1
isONclust2, 1, 1, 1
basename, 1, 1, 1
humann, 1, 1, 1
pdftoppm, 1, 1, 1
ppx, 1, 1, 1
taxonomy:559292, 1, 1, 1
&format=fasta, 1, 1, 1
thermorawfileparser, 1, 1, 1
comet, 1, 1, 1
mokapot, 1, 1, 1
./medaka_polish.sh, 1, 1, 1
pgap.py, 1, 1, 1
gatk-framework, 1, 1, 1
./make-acc-taxid-mapping.py, 1, 1, 1
INPUT={input.bam_files}, 1, 1, 1
OUTPUT={output.sorted_bam_files}, 1, 1, 1
INPUT={input.sorted_bam_files}, 1, 1, 1
FASTQ={output.fq1}, 1, 1, 1
SECOND_END_FASTQ={output.fq2}, 1, 1, 1
file, 1, 1, 1
./{input.bigBedToBed}, 1, 1, 1
trimal, 1, 1, 1
shell:cat, 1, 1, 1
shell:scripts/pipeline2.0/MIPstats.py, 1, 1, 1
SNPsplit, 1, 1, 1
GENOME.GTF, 1, 1, 1
output/temp/cutadapt/logs/{params.pre}.cutadapt.log, 1, 1, 1
quast.py, 1, 1, 1
HRIBO/scripts/xtail_classic.R, 1, 1, 1
HRIBO/scripts/riborex.R, 1, 1, 1
HRIBO/scripts/prepare_deltate_input.py, 1, 1, 1
DTEG.R, 1, 1, 1
bowtie-build, 1, 1, 1
scripts/SrrMunch2.sh, 1, 1, 1
scripts/import-paired.sh, 1, 1, 1
scripts/join_pairs.sh, 1, 1, 1
scripts/derep.sh, 1, 1, 1
scripts/de-novo.sh, 1, 1, 1
scripts/q2_export.sh, 1, 1, 1
scripts/split_scATAC_bam_by_cluster.py, 1, 1, 1
01split_bam/{wildcards.sample}/{wildcards.sample}_{wildcards.cluster_id}.bam, 1, 1, 1
mtxs=, 1, 1, 1
mtxs+=, 1, 1, 1
csvs=, 1, 1, 1
csvs+=, 1, 1, 1
metaPlotR/annot_m6a.sorted.bed, 1, 1, 1
parallel-fastq-dump, 1, 1, 1
workflow/scripts/concat_fasta.py, 1, 1, 1
workflow/scripts/CDs_from_MetaEuk.py, 1, 1, 1
prank, 1, 1, 1
mpirun, 1, 1, 1
xargs);, 1, 1, 1
docker-compose, 1, 1, 1
SECONDS=0, 1, 1, 1
duration=$SECONDS, 1, 1, 1
d={NEO4J_IMPORTDIR}/{NODEDIR}/{params.meta_id}, 1, 1, 1
d={NEO4J_IMPORTDIR}/{RELDIR}/{params.meta_id}, 1, 1, 1
gene_list={input.path_gene_list}, 1, 1, 1
use_list={params[0]}, 1, 1, 1
alignment={params[1]}, 1, 1, 1
variantcalling={params[3]}, 1, 1, 1
SV={params[4]}, 1, 1, 1
MEI={params[5]}, 1, 1, 1
STR={params[6]}, 1, 1, 1
genotype={params[7]}, 1, 1, 1
expansion={params[8]}, 1, 1, 1
debug={params[9]}, 1, 1, 1
$MEI, 1, 1, 1
$STR, 1, 1, 1
$genotypeSTR, 1, 1, 1
$expansion, 1, 1, 1
format={params[1]}, 1, 1, 1
paired={params[0]}, 1, 1, 1
use_bed={params[1]}, 1, 1, 1
debug={params[3]}, 1, 1, 1
exome={params[0]}, 1, 1, 1
debug={params[4]}, 1, 1, 1
virus={params[0]}, 1, 1, 1
bacteria={params[1]}, 1, 1, 1
microbes={params[2]}, 1, 1, 1
$bacteria, 1, 1, 1
$microbes, 1, 1, 1
virus={params[0], 1, 1, 1
bacteria={params[0]}, 1, 1, 1
microbes={params[0]}, 1, 1, 1
$sequencing_report, 1, 1, 1
$calls_report, 1, 1, 1
MEI={params[0]}, 1, 1, 1
variantcalling={params[2]}, 1, 1, 1
STR={params[3]}, 1, 1, 1
genotype={params[4]}, 1, 1, 1
SV={params[5]}, 1, 1, 1
MEI={params[6]}, 1, 1, 1
alsgenescanner={params[1]}, 1, 1, 1
/tmp/gencodePA_tmp.fa, 1, 1, 1
/tmp/gencodeProtSeq.fa, 1, 1, 1
genePredToGtf, 1, 1, 1
ref/gencode_comp_ano_trim.tsv, 1, 1, 1
ref/polyAtlas_gencodechrom_hg38_sorted.bed, 1, 1, 1
ref/hg19_gencode_genome.fa, 1, 1, 1
crossmap, 1, 1, 1
bigWigToWig, 1, 1, 1
wig2bed, 1, 1, 1
snp_tmp/snps.bed, 1, 1, 1
snp_tmp/good_snps.bed, 1, 1, 1
ref/snps/hg38.snps.all.sorted.bed.gz, 1, 1, 1
id={wildcards.id}, 1, 1, 1
sample={wildcards.id}, 1, 1, 1
./util/gtf_genome_to_cdna_fasta.pl, 1, 1, 1
./util/gtf_to_alignment_gff3.pl, 1, 1, 1
./util/cdna_alignment_orf_to_genome_orf.pl, 1, 1, 1
transcripts.fasta.transdecoder.gff3, 1, 1, 1
../data/seqs/transdecoder_results/all_tissues.combined_transdecoderCDS.gff3, 1, 1, 1
agat_sp_add_start_and_stop.pl, 1, 1, 1
id={wildcards.sampleID}, 1, 1, 1
stem=${{gtf::-4}}, 1, 1, 1
fasta=${{stem}}.fa, 1, 1, 1
gdaldem, 1, 1, 1
f.properties.DESIG_ENG, 1, 1, 1
py.test, 1, 1, 1
qc2tsv, 1, 1, 1
croo, 1, 1, 1
preprocessed_{wildcards.run}_{wildcards.task};, 1, 1, 1
quit;;, 1, 1, 1
1000, 1, 1, 1
rsync://hgdownload.cse.ucsc.edu/goldenPath/{config[genome]}/chromosomes/, 1, 1, 1
tmp_sicer=$(mktemp, 1, 1, 1
$(pwd), 1, 1, 1
https://storage.googleapis.com/google-code-archive-downloads/v2/, 1, 1, 1
code.google.com/phantompeakqualtools/ccQualityControl.v.1.1.tar.gz, 1, 1, 1
awk:, 1, 1, 1
dcraw, 1, 1, 1
matlab, 1, 1, 1
addpath(genpath({params.matlabPyrTools_path}));, 1, 1, 1
freeman_windows({wildcards.scaling},, 1, 1, 1
GraphAligner, 1, 1, 1
NanoCaller, 1, 1, 1
tools/DeepVirFinder/dvf.py, 1, 1, 1
0.9, 1, 1, 1
0.01)print$1}}, 1, 1, 1
tools/select_seqs_by_IDs.py, 1, 1, 1
VIBRANT_run.py, 1, 1, 1
checkv, 1, 1, 1
tools/demovir.R, 1, 1, 1
scripts/gtdbtk-to-lineages-csv.py, 1, 1, 1
scripts/find-oddities.py, 1, 1, 1
scripts/find-oddities-examine.py, 1, 1, 1
metaphlan2.py, 1, 1, 1
gtf2bed12, 1, 1, 1
calculate-tin.py, 1, 1, 1
motevo, 1, 1, 1
http://hgdownload.soe.ucsc.edu/goldenPath/wuhCor1/UShER_SARS-CoV-2/, 1, 1, 1
matUtils, 1, 1, 1
bbmerge.sh, 1, 1, 1
ecctadpole=t, 1, 1, 1
prefilter=10, 1, 1, 1
loose=t, 1, 1, 1
outu={output.R1}, 1, 1, 1
clumpify.sh, 1, 1, 1
refstats={output.stats}, 1, 1, 1
maxindel={params.maxindel}, 1, 1, 1
minhits={params.minhits}, 1, 1, 1
local=t, 1, 1, 1
readlength.sh, 1, 1, 1
kaiju, 1, 1, 1
addTaxonNames, 1, 1, 1
gene_catalog/diamond/*.tsv, 1, 1, 1
get_SJs_from_gtf, 1, 1, 1
TranscriptClean, 1, 1, 1
talon_label_reads, 1, 1, 1
talon_initialize_database, 1, 1, 1
talon, 1, 1, 1
talon_filter_transcripts, 1, 1, 1
talon_abundance, 1, 1, 1
talon_create_GTF, 1, 1, 1
declare, 1, 1, 1
numb=$(awk, 1, 1, 1
${{line}});, 1, 1, 1
calc+=$((${{numb}}));, 1, 1, 1
words=$(echo, 1, 1, 1
avg_len=$((${{calc}}, 1, 1, 1
prepDE.py, 1, 1, 1
sqanti3_qc.py, 1, 1, 1
scripts/toconsensus.py, 1, 1, 1
spingo, 1, 1, 1
pistis, 1, 1, 1
fasta-splitter, 1, 1, 1
scripts/tolca.py, 1, 1, 1
queryf=$(basename, 1, 1, 1
alnf=$(basename, 1, 1, 1
processors={threads},, 1, 1, 1
OUTPUT_FILE=`readlink, 1, 1, 1
PHENOTYPE_FILE_CSV=`readlink, 1, 1, 1
PHENOTYPE_FILE_TSV=`echo, 1, 1, 1
gs://genetics-portal-raw/uk_biobank_sumstats/neale_v2/output/neale_v2_sumstats/*.neale2.gwas.imputed_v3.both_sexes.tsv.gz, 1, 1, 1
gs://{params.output_dir}/, 1, 1, 1
tools/map2ref.sh, 1, 1, 1
tools/parse_bwa-cov.py, 1, 1, 1
tools/parse_bwa-expcov.py, 1, 1, 1
tools/parse_bwa-counts.py, 1, 1, 1
BamClipOverlap, 1, 1, 1
config[canu_args], 1, 1, 1
genomeSize={wildcards.genome_size}, 1, 1, 1
useGrid={grid}, 1, 1, 1
opts, 1, 1, 1
merge_wrapper.py, 1, 1, 1
polya_database=--polya_db, 1, 1, 1
outfile=--outfileNamePrefix, 1, 1, 1
breakpoints=--breakpoints, 1, 1, 1
outfile=--outfileName, 1, 1, 1
featurecounts=--table, 1, 1, 1
samplesheet=--samplesheet, 1, 1, 1
annotation=--gtf, 1, 1, 1
dexseq=--dexseq.table, 1, 1, 1
width_min={params.width_min},, 1, 1, 1
options=, 1, 1, 1
ddrage, 1, 1, 1
./{input.rbt_bin}, 1, 1, 1
ALIGNED_COUNT=$(zcat, 1, 1, 1
UNALIGNED_COUNT=$(cat, 1, 1, 1
UNALIGNED_COUNT=$((, 1, 1, 1
csvtk, 1, 1, 1
fasterq-dump.2.11.0, 1, 1, 1
reads_2.fastq, 1, 1, 1
sketch.sh, 1, 1, 1
name0={wildcards.sample}, 1, 1, 1
comparesketch.sh, 1, 1, 1
format=3, 1, 1, 1
alltoall, 1, 1, 1
scripts/plot_sketch_comparison_heatmap.py, 1, 1, 1
scripts/plot_bbcountunique.py, 1, 1, 1
out1={output.read1}, 1, 1, 1
out2={output.read2}, 1, 1, 1
minlength={params.minlength}, 1, 1, 1
maxlength={params.maxlength}, 1, 1, 1
tossbrokenreads, 1, 1, 1
sample2markers.py, 1, 1, 1
extract_markers.py, 1, 1, 1
msigdb_v5.2_files_to_download_locally/msigdb_v5.2_GMTs/, 1, 1, 1
ipython3, 1, 1, 1
mri_convert, 1, 1, 1
dname=$(dirname, 1, 1, 1
https://raw.githubusercontent.com/yukiteruono/pbsim2/master/data/P6C4.model, 1, 1, 1
tmp={wildcards.read_length}, 1, 1, 1
source={wildcards.read_length}, 1, 1, 1
subsample_frac=${wildcards.coverage}, 1, 1, 1
sample={wildcards.genome_size}, 1, 1, 1
fname_cram=resources/experimental_data/SARS-CoV-2-2-strain-mix/$sample/$sample.cram, 1, 1, 1
fname_expected_variants=resources/experimental_data/SARS-CoV-2-2-strain-mix/$sample/$sample_expected_variants.csv, 1, 1, 1
fname_reference=resources/experimental_data/SARS-CoV-2-2-strain-mix/reference.fasta, 1, 1, 1
fname_insert_bed=resources/experimental_data/SARS-CoV-2-2-strain-mix/nCoV-2019.insert.bed, 1, 1, 1
flash, 1, 1, 1
tmp={wildcards.seq_mode_param}, 1, 1, 1
source=${{parts[0]}}, 1, 1, 1
subsample_frac=${{parts[1]}}, 1, 1, 1
89.6/, 1, 1, 1
89.6, 1, 1, 1
HXB2/, 1, 1, 1
HXB2, 1, 1, 1
JRCSF/, 1, 1, 1
JRCSF, 1, 1, 1
NL43/, 1, 1, 1
NL43, 1, 1, 1
YU2/, 1, 1, 1
YU2, 1, 1, 1
tmpfile={output.dname_work}/tmp.bam, 1, 1, 1
workflow/plantRNAconcat.pl, 1, 1, 1
vep_fp=`which, 1, 1, 1
vep_path=$(dirname, 1, 1, 1
vcf2maf.pl, 1, 1, 1
artic_vcf_merge, 1, 1, 1
artic_make_depth_mask, 1, 1, 1
artic_plot_amplicon_depth, 1, 1, 1
artic_mask, 1, 1, 1
artic_fasta_header, 1, 1, 1
ruanjue@gmail.com, 1, 1, 1
reads.fa, 1, 1, 1
prefix, 1, 1, 1
[reads.fa, 1, 1, 1
Long, 1, 1, 1
Prefix, 1, 1, 1
Number, 1, 1, 1
Presets,, 1, 1, 1
1G), 1, 1, 1
number, 1, 1, 1
Approximate, 1, 1, 1
depth, 1, 1, 1
5000, 1, 1, 1
k-mer, 1, 1, 1
p-homopolymer-compressed, 1, 1, 1
Subsampling, 1, 1, 1
rnaspades.py, 1, 1, 1
out1={output[0]}, 1, 1, 1
out2={output[1]}, 1, 1, 1
OD_bwa_index/{wildcards.sample}, 1, 1, 1
config[base_path]+kraken2_config[kraken2_path]+kraken2, 1, 1, 1
concat_input_reads.fq.gz, 1, 1, 1
humann2, 1, 1, 1
:, 1, 1, 1
f{{wildcards.rfile}}, 1, 1, 1
f{{wildcards.cell_line}}, 1, 1, 1
f{{wildcards.drug}}, 1, 1, 1
screen.seqs(fasta=current,, 1, 1, 1
predict.py, 1, 1, 1
SPECtre.py, 1, 1, 1
DataParser.py, 1, 1, 1
DeepRibo.py, 1, 1, 1
get_redun_hits, 1, 1, 1
results/Ref_seqs_1, 1, 1, 1
results/Ref_seqs_1/0_ref_seqs.csv, 1, 1, 1
results/Ref_seqs_1_auto_predictions.csv, 1, 1, 1
setup_fwd_srch, 1, 1, 1
run_fwd_srch, 1, 1, 1
sum_fwd_srch, 1, 1, 1
setup_rev_srch, 1, 1, 1
run_rev_srch, 1, 1, 1
sum_rev_srch, 1, 1, 1
interp_srchs, 1, 1, 1
plot, 1, 1, 1
images/example_workflow_diagram.png, 1, 1, 1
shapeit, 1, 1, 1
rfmix, 1, 1, 1
TAXON_INDICES=($(seq, 1, 1, 1
TAXON_LEVELS=(kingdom, 1, 1, 1
ZIP_FILES=$(echo, 1, 1, 1
FORWARD=$(echo, 1, 1, 1
REVERSE=$(echo, 1, 1, 1
SINGLE=$(echo, 1, 1, 1
models/smc_estimate_bootstrap_input/{params.population}_{params.distind}_rep, 1, 1, 1
models/smc_split_bootstrap_input/{params.pop_pair}_12.{params.distind1}_rep, 1, 1, 1
models/smc_split_bootstrap_input/{params.pop_pair}_21.{params.distind1}_rep, 1, 1, 1
out1={output.file1}, 1, 1, 1
out2={output.file2}, 1, 1, 1
gchist={output.gchist}, 1, 1, 1
reads=5, 1, 1, 1
alphasigni=({output.alphasigni}), 1, 1, 1
coroutput=({output.coroutput}), 1, 1, 1
column=({CONDITION}), 1, 1, 1
site=({output.site}), 1, 1, 1
leninput=${{#betainput[@]}}, 1, 1, 1
x=0, 1, 1, 1
$leninput;, 1, 1, 1
x=$leninput, 1, 1, 1
output=({output.pcoaoutput}), 1, 1, 1
conditions=({output.ancom}), 1, 1, 1
column=({params.column}), 1, 1, 1
outpairwisedist=({output.output_pairwise_distance}), 1, 1, 1
len=${{#betainput[@]}}, 1, 1, 1
alphadiv=({input.d4}), 1, 1, 1
output=({output.alphavolatility}), 1, 1, 1
len=${{#alphadiv[@]}}, 1, 1, 1
pcoaoutput=({output.pcoaoutput}), 1, 1, 1
heatmap=({HEATMAP}), 1, 1, 1
len=${{#heatmap[@]}}, 1, 1, 1
feature_heatmap=({output.feature_heatmap}), 1, 1, 1
important_feature_table_top=({output.important_feature_table_top}), 1, 1, 1
intersect.out, 1, 1, 1
subtract.out, 1, 1, 1
.format(METAXCAN_HASH), 1, 1, 1
gunzip), 1, 1, 1
tmp, 1, 1, 1
faToTwoBit, 1, 1, 1
computeGCBias, 1, 1, 1
initial_data_quality_cmd=fastqc, 1, 1, 1
HEADCROP:{config[trimmomatic][HEADCROP]}, 1, 1, 1
SLIDINGWINDOW:{config[trimmomatic][SLIDINGWINDOW]}, 1, 1, 1
AVGQUAL:{config[trimmomatic][AVGQUAL]}, 1, 1, 1
MINLEN:{config[trimmomatic][MINLEN]}, 1, 1, 1
CROP:{config[trimmomatic][CROP]}, 1, 1, 1
join_cmd=join_paired_ends.py, 1, 1, 1
join_quality_cmd=fastqc, 1, 1, 1
cluster_otus_cmd=pick_otus.py, 1, 1, 1
pick_representatives_cmd=pick_rep_set.py, 1, 1, 1
check_chimeric_seqs_cmd=parallel_identify_chimeric_seqs.py, 1, 1, 1
classify_cmd=parallel_assign_taxonomy_rdp.py, 1, 1, 1
make_otu_cmd=make_otu_table.py, 1, 1, 1
convert_otu_table_cmd=biom, 1, 1, 1
cut_expr=109-112,113-117,129,130,134, 1, 1, 1
cut_expr=94-102,113,114,116, 1, 1, 1
cols=$({{, 1, 1, 1
i=0, 1, 1, 1
let, 1, 1, 1
prefix=, 1, 1, 1
prefix=chr, 1, 1, 1
write-chunk(), 1, 1, 1
input=$1, 1, 1, 1
output=$TMPDIR/out.d/$(basename, 1, 1, 1
printf({wildcards.genome_build}t%st%dt%dt-1t%st%st[,, 1, 1, 1
x, 1, 1, 1
$i, 1, 1, 1
printf(,%s,, 1, 1, 1
printf(%s,, 1, 1, 1
printf(]\, 1, 1, 1
https://kircherlab.bihealth.org/download/CADD/v1.6/{wildcards.genome_build}/whole_genome_SNVs_inclAnno.tsv.gz, 1, 1, 1
https://kircherlab.bihealth.org/download/CADD/v1.6/{wildcards.genome_build}/whole_genome_SNVs_inclAnno.tsv.gz.tbi, 1, 1, 1
_out={output}, 1, 1, 1
out=$PWD/${{_out%.h2.db}}, 1, 1, 1
varfish-annotator, 1, 1, 1
varfish-server-background-db-{config[release_name]}-grch37, 1, 1, 1
varfish-server-background-db-{config[release_name]}-grch38, 1, 1, 1
chr=, 1, 1, 1
chr=chr, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/legacy/exac_browser/ExAC.r1.sites.vep.vcf.gz, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/legacy/exac_browser/ExAC.r1.sites.vep.vcf.gz.tbi, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/legacy/exacv1_downloads/release0.3.1/cnv/$(basename, 1, 1, 1
http://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/tsv/hgnc_complete_set.txt, 1, 1, 1
http://ftp.ncbi.nlm.nih.gov/genomes/archive/old_refseq/H_sapiens/ARCHIVE/ANNOTATION_RELEASE.105/GFF/ref_GRCh37.p13_top_level.gff3.gz, 1, 1, 1
clinvar_tsv, 1, 1, 1
main, 1, 1, 1
BEGIN, 1, 1, 1
$3, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/liftover_grch38/vcf/exomes/gnomad.exomes.r2.1.1.sites.{wildcards.chrom}.liftover_grch38.vcf.bgz, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/liftover_grch38/vcf/exomes/gnomad.exomes.r2.1.1.sites.{wildcards.chrom}.liftover_grch38.vcf.bgz.tbi, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/release/3.1.1/vcf/genomes/gnomad.genomes.v3.1.1.sites.chr{wildcards.chrom}.vcf.bgz, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/release/3.1.1/vcf/genomes/gnomad.genomes.v3.1.1.sites.chr{wildcards.chrom}.vcf.bgz.tbi, 1, 1, 1
https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/constraint/gnomad.v2.1.1.lof_metrics.by_gene.txt.bgz, 1, 1, 1
1.0, 1, 1, 1
6.0, 1, 1, 1
inkscape, 1, 1, 1
data, 1, 1, 1
defaults, 1, 1, 1
[cohort], 1, 1, 1
nucmer, 1, 1, 1
trf, 1, 1, 1
svim, 1, 1, 1
scripts/Assemblytics, 1, 1, 1
syri, 1, 1, 1
sample_files_ins, 1, 1, 1
rsem-calculate-expression, 1, 1, 1
rename, 1, 1, 1
filename(s), 1, 1, 1
DIR, 1, 1, 1
If, 1, 1, 1
INT, 1, 1, 1
genome_folder, 1, 1, 1
mates1, 1, 1, 1
mates2, 1, 1, 1
singles, 1, 1, 1
}, 1, 1, 1
bismark2bedGraph, 1, 1, 1
sizes.genome, 1, 1, 1
LC_COLLATE=C, 1, 1, 1
[^, 1, 1, 1
hicstuff, 1, 1, 1
instagraal, 1, 1, 1
fq_lines=$(, 1, 1, 1
n_reads=$((fq_lines, 1, 1, 1
genome_len=$(, 1, 1, 1
fq={output}, 1, 1, 1
trim=${{fq%_[12].fastq.gz}}, 1, 1, 1
numLines=$(fastq-dump, 1, 1, 1
fname=${{trim}}_1.fastq, 1, 1, 1
ILLUMINACLIP:{params.adapter}:2:30:10, 1, 1, 1
\t-threads, 1, 1, 1
\t-{params.phred}, 1, 1, 1
\t{input.single}, 1, 1, 1
\t{output.single}, 1, 1, 1
\tILLUMINACLIP:{params.adapter}:2:30:10, 1, 1, 1
\t{params.trimmomatic_params}, 1, 1, 1
\t2, 1, 1, 1
rad_haplotyper.pl, 1, 1, 1
islandpath, 1, 1, 1
scripts/phispy/PhiSpy.py, 1, 1, 1
DownloadLog.txt, 1, 1, 1
DownloadLog1.txt, 1, 1, 1
Rlog.txt, 1, 1, 1
htsfile, 1, 1, 1
rgrep, 1, 1, 1
ILLUMINACLIP:{params.adapters}:2:30:10, 1, 1, 1
https://github.com/tseemann/shovill/issues/59, 1, 1, 1
shovill, 1, 1, 1
tblastn, 1, 1, 1
mashtree, 1, 1, 1
mlst, 1, 1, 1
30, 1, 1, 1
=45, 1, 1, 1
MQ, 1, 1, 1
=30, 1, 1, 1
FORMAT/DP, 1, 1, 1
=10, 1, 1, 1
=50, 1, 1, 1
ADR[0:1], 1, 1, 1
=1), 1, 1, 1
PolyAAnalysis.jl/scripts/annotate_polyA.jl, 1, 1, 1
CREATE_INDEX=false, 1, 1, 1
gmap_build, 1, 1, 1
gsnap, 1, 1, 1
I={input.sam}, 1, 1, 1
length(starts);, 1, 1, 1
varscan, 1, 1, 1
t0/0, 1, 1, 1
H={output.histo}, 1, 1, 1
REF_FLAT={input.annot}, 1, 1, 1
RIBOSOMAL_INTERVALS={input.ref_rrna}, 1, 1, 1
STRAND_SPECIFICITY=NONE, 1, 1, 1
CHART_OUTPUT={output.histo}, 1, 1, 1
comm, 1, 1, 1
INPUT=/dev/stdin, 1, 1, 1
METRICS_FILE={output.dupstats}, 1, 1, 1
ASSUME_SORT_ORDER=coordinate, 1, 1, 1
COMPRESSION_LEVEL=1, 1, 1, 1
QUIET=false, 1, 1, 1
size=$(stat, 1, 1, 1
342, 1, 1, 1
num_sig_variants_rep_A=$(grep, 1, 1, 1
f=$(basename, 1, 1, 1
dnadiff, 1, 1, 1
METRICS_FILE={output.metrics}, 1, 1, 1
SOAPnuke, 1, 1, 1
MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000, 1, 1, 1
REMOVE_DUPLICATES=TRUE, 1, 1, 1
OUTPUT={output.L183a}, 1, 1, 1
METRICS_FILE={output.L183b}, 1, 1, 1
dos2unix, 1, 1, 1
1.bed, 1, 1, 1
2.bed, 1, 1, 1
3.bed, 1, 1, 1
4.bed, 1, 1, 1
frags.bed, 1, 1, 1
fragments.bed, 1, 1, 1
atropos, 1, 1, 1
{SCRIPTS}/vcf2phylip.py, 1, 1, 1
{SCRIPTS}/vcf2geno.py, 1, 1, 1
raxmlHPC-PTHREADS, 1, 1, 1
raxml-ng, 1, 1, 1
INDIR=$(dirname, 1, 1, 1
init, 1, 1, 1
LOAD_rnammer, 1, 1, 1
report, 1, 1, 1
rwc, 1, 1, 1
sizes.txt, 1, 1, 1
clustering/$i.txt;, 1, 1, 1
biopet-validatefastq, 1, 1, 1
